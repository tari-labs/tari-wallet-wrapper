// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: sidechain_types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Signature } from "./types";

export const protobufPackage = "tari.rpc";

/**
 * Copyright 2020. The Tari Project
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
 * products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

export interface SideChainFeature {
  validatorNodeRegistration?: ValidatorNodeRegistration | undefined;
  templateRegistration?: TemplateRegistration | undefined;
  confidentialOutput?: ConfidentialOutputData | undefined;
}

export interface ValidatorNodeRegistration {
  publicKey: Uint8Array;
  signature: Signature | undefined;
}

export interface TemplateRegistration {
  authorPublicKey: Uint8Array;
  authorSignature: Signature | undefined;
  templateName: string;
  templateVersion: number;
  templateType: TemplateType | undefined;
  buildInfo: BuildInfo | undefined;
  binarySha: Uint8Array;
  binaryUrl: string;
}

export interface ConfidentialOutputData {
  claimPublicKey: Uint8Array;
}

export interface TemplateType {
  wasm?: WasmInfo | undefined;
  flow?: FlowInfo | undefined;
  manifest?: ManifestInfo | undefined;
}

export interface WasmInfo {
  abiVersion: number;
}

export interface FlowInfo {
}

export interface ManifestInfo {
}

export interface BuildInfo {
  repoUrl: string;
  commitHash: Uint8Array;
}

function createBaseSideChainFeature(): SideChainFeature {
  return { validatorNodeRegistration: undefined, templateRegistration: undefined, confidentialOutput: undefined };
}

export const SideChainFeature: MessageFns<SideChainFeature> = {
  encode(message: SideChainFeature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validatorNodeRegistration !== undefined) {
      ValidatorNodeRegistration.encode(message.validatorNodeRegistration, writer.uint32(10).fork()).join();
    }
    if (message.templateRegistration !== undefined) {
      TemplateRegistration.encode(message.templateRegistration, writer.uint32(18).fork()).join();
    }
    if (message.confidentialOutput !== undefined) {
      ConfidentialOutputData.encode(message.confidentialOutput, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SideChainFeature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSideChainFeature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validatorNodeRegistration = ValidatorNodeRegistration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.templateRegistration = TemplateRegistration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.confidentialOutput = ConfidentialOutputData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SideChainFeature {
    return {
      validatorNodeRegistration: isSet(object.validatorNodeRegistration)
        ? ValidatorNodeRegistration.fromJSON(object.validatorNodeRegistration)
        : undefined,
      templateRegistration: isSet(object.templateRegistration)
        ? TemplateRegistration.fromJSON(object.templateRegistration)
        : undefined,
      confidentialOutput: isSet(object.confidentialOutput)
        ? ConfidentialOutputData.fromJSON(object.confidentialOutput)
        : undefined,
    };
  },

  toJSON(message: SideChainFeature): unknown {
    const obj: any = {};
    if (message.validatorNodeRegistration !== undefined) {
      obj.validatorNodeRegistration = ValidatorNodeRegistration.toJSON(message.validatorNodeRegistration);
    }
    if (message.templateRegistration !== undefined) {
      obj.templateRegistration = TemplateRegistration.toJSON(message.templateRegistration);
    }
    if (message.confidentialOutput !== undefined) {
      obj.confidentialOutput = ConfidentialOutputData.toJSON(message.confidentialOutput);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SideChainFeature>, I>>(base?: I): SideChainFeature {
    return SideChainFeature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SideChainFeature>, I>>(object: I): SideChainFeature {
    const message = createBaseSideChainFeature();
    message.validatorNodeRegistration =
      (object.validatorNodeRegistration !== undefined && object.validatorNodeRegistration !== null)
        ? ValidatorNodeRegistration.fromPartial(object.validatorNodeRegistration)
        : undefined;
    message.templateRegistration = (object.templateRegistration !== undefined && object.templateRegistration !== null)
      ? TemplateRegistration.fromPartial(object.templateRegistration)
      : undefined;
    message.confidentialOutput = (object.confidentialOutput !== undefined && object.confidentialOutput !== null)
      ? ConfidentialOutputData.fromPartial(object.confidentialOutput)
      : undefined;
    return message;
  },
};

function createBaseValidatorNodeRegistration(): ValidatorNodeRegistration {
  return { publicKey: new Uint8Array(0), signature: undefined };
}

export const ValidatorNodeRegistration: MessageFns<ValidatorNodeRegistration> = {
  encode(message: ValidatorNodeRegistration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey.length !== 0) {
      writer.uint32(10).bytes(message.publicKey);
    }
    if (message.signature !== undefined) {
      Signature.encode(message.signature, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidatorNodeRegistration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorNodeRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = Signature.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorNodeRegistration {
    return {
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
      signature: isSet(object.signature) ? Signature.fromJSON(object.signature) : undefined,
    };
  },

  toJSON(message: ValidatorNodeRegistration): unknown {
    const obj: any = {};
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.signature !== undefined) {
      obj.signature = Signature.toJSON(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorNodeRegistration>, I>>(base?: I): ValidatorNodeRegistration {
    return ValidatorNodeRegistration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorNodeRegistration>, I>>(object: I): ValidatorNodeRegistration {
    const message = createBaseValidatorNodeRegistration();
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    message.signature = (object.signature !== undefined && object.signature !== null)
      ? Signature.fromPartial(object.signature)
      : undefined;
    return message;
  },
};

function createBaseTemplateRegistration(): TemplateRegistration {
  return {
    authorPublicKey: new Uint8Array(0),
    authorSignature: undefined,
    templateName: "",
    templateVersion: 0,
    templateType: undefined,
    buildInfo: undefined,
    binarySha: new Uint8Array(0),
    binaryUrl: "",
  };
}

export const TemplateRegistration: MessageFns<TemplateRegistration> = {
  encode(message: TemplateRegistration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.authorPublicKey);
    }
    if (message.authorSignature !== undefined) {
      Signature.encode(message.authorSignature, writer.uint32(18).fork()).join();
    }
    if (message.templateName !== "") {
      writer.uint32(26).string(message.templateName);
    }
    if (message.templateVersion !== 0) {
      writer.uint32(32).uint32(message.templateVersion);
    }
    if (message.templateType !== undefined) {
      TemplateType.encode(message.templateType, writer.uint32(42).fork()).join();
    }
    if (message.buildInfo !== undefined) {
      BuildInfo.encode(message.buildInfo, writer.uint32(50).fork()).join();
    }
    if (message.binarySha.length !== 0) {
      writer.uint32(58).bytes(message.binarySha);
    }
    if (message.binaryUrl !== "") {
      writer.uint32(66).string(message.binaryUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TemplateRegistration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemplateRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authorSignature = Signature.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.templateName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.templateVersion = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.templateType = TemplateType.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.buildInfo = BuildInfo.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.binarySha = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.binaryUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemplateRegistration {
    return {
      authorPublicKey: isSet(object.authorPublicKey) ? bytesFromBase64(object.authorPublicKey) : new Uint8Array(0),
      authorSignature: isSet(object.authorSignature) ? Signature.fromJSON(object.authorSignature) : undefined,
      templateName: isSet(object.templateName) ? globalThis.String(object.templateName) : "",
      templateVersion: isSet(object.templateVersion) ? globalThis.Number(object.templateVersion) : 0,
      templateType: isSet(object.templateType) ? TemplateType.fromJSON(object.templateType) : undefined,
      buildInfo: isSet(object.buildInfo) ? BuildInfo.fromJSON(object.buildInfo) : undefined,
      binarySha: isSet(object.binarySha) ? bytesFromBase64(object.binarySha) : new Uint8Array(0),
      binaryUrl: isSet(object.binaryUrl) ? globalThis.String(object.binaryUrl) : "",
    };
  },

  toJSON(message: TemplateRegistration): unknown {
    const obj: any = {};
    if (message.authorPublicKey.length !== 0) {
      obj.authorPublicKey = base64FromBytes(message.authorPublicKey);
    }
    if (message.authorSignature !== undefined) {
      obj.authorSignature = Signature.toJSON(message.authorSignature);
    }
    if (message.templateName !== "") {
      obj.templateName = message.templateName;
    }
    if (message.templateVersion !== 0) {
      obj.templateVersion = Math.round(message.templateVersion);
    }
    if (message.templateType !== undefined) {
      obj.templateType = TemplateType.toJSON(message.templateType);
    }
    if (message.buildInfo !== undefined) {
      obj.buildInfo = BuildInfo.toJSON(message.buildInfo);
    }
    if (message.binarySha.length !== 0) {
      obj.binarySha = base64FromBytes(message.binarySha);
    }
    if (message.binaryUrl !== "") {
      obj.binaryUrl = message.binaryUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TemplateRegistration>, I>>(base?: I): TemplateRegistration {
    return TemplateRegistration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TemplateRegistration>, I>>(object: I): TemplateRegistration {
    const message = createBaseTemplateRegistration();
    message.authorPublicKey = object.authorPublicKey ?? new Uint8Array(0);
    message.authorSignature = (object.authorSignature !== undefined && object.authorSignature !== null)
      ? Signature.fromPartial(object.authorSignature)
      : undefined;
    message.templateName = object.templateName ?? "";
    message.templateVersion = object.templateVersion ?? 0;
    message.templateType = (object.templateType !== undefined && object.templateType !== null)
      ? TemplateType.fromPartial(object.templateType)
      : undefined;
    message.buildInfo = (object.buildInfo !== undefined && object.buildInfo !== null)
      ? BuildInfo.fromPartial(object.buildInfo)
      : undefined;
    message.binarySha = object.binarySha ?? new Uint8Array(0);
    message.binaryUrl = object.binaryUrl ?? "";
    return message;
  },
};

function createBaseConfidentialOutputData(): ConfidentialOutputData {
  return { claimPublicKey: new Uint8Array(0) };
}

export const ConfidentialOutputData: MessageFns<ConfidentialOutputData> = {
  encode(message: ConfidentialOutputData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.claimPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.claimPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfidentialOutputData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfidentialOutputData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.claimPublicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfidentialOutputData {
    return {
      claimPublicKey: isSet(object.claimPublicKey) ? bytesFromBase64(object.claimPublicKey) : new Uint8Array(0),
    };
  },

  toJSON(message: ConfidentialOutputData): unknown {
    const obj: any = {};
    if (message.claimPublicKey.length !== 0) {
      obj.claimPublicKey = base64FromBytes(message.claimPublicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfidentialOutputData>, I>>(base?: I): ConfidentialOutputData {
    return ConfidentialOutputData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfidentialOutputData>, I>>(object: I): ConfidentialOutputData {
    const message = createBaseConfidentialOutputData();
    message.claimPublicKey = object.claimPublicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTemplateType(): TemplateType {
  return { wasm: undefined, flow: undefined, manifest: undefined };
}

export const TemplateType: MessageFns<TemplateType> = {
  encode(message: TemplateType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.wasm !== undefined) {
      WasmInfo.encode(message.wasm, writer.uint32(10).fork()).join();
    }
    if (message.flow !== undefined) {
      FlowInfo.encode(message.flow, writer.uint32(18).fork()).join();
    }
    if (message.manifest !== undefined) {
      ManifestInfo.encode(message.manifest, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TemplateType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemplateType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wasm = WasmInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flow = FlowInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.manifest = ManifestInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemplateType {
    return {
      wasm: isSet(object.wasm) ? WasmInfo.fromJSON(object.wasm) : undefined,
      flow: isSet(object.flow) ? FlowInfo.fromJSON(object.flow) : undefined,
      manifest: isSet(object.manifest) ? ManifestInfo.fromJSON(object.manifest) : undefined,
    };
  },

  toJSON(message: TemplateType): unknown {
    const obj: any = {};
    if (message.wasm !== undefined) {
      obj.wasm = WasmInfo.toJSON(message.wasm);
    }
    if (message.flow !== undefined) {
      obj.flow = FlowInfo.toJSON(message.flow);
    }
    if (message.manifest !== undefined) {
      obj.manifest = ManifestInfo.toJSON(message.manifest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TemplateType>, I>>(base?: I): TemplateType {
    return TemplateType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TemplateType>, I>>(object: I): TemplateType {
    const message = createBaseTemplateType();
    message.wasm = (object.wasm !== undefined && object.wasm !== null) ? WasmInfo.fromPartial(object.wasm) : undefined;
    message.flow = (object.flow !== undefined && object.flow !== null) ? FlowInfo.fromPartial(object.flow) : undefined;
    message.manifest = (object.manifest !== undefined && object.manifest !== null)
      ? ManifestInfo.fromPartial(object.manifest)
      : undefined;
    return message;
  },
};

function createBaseWasmInfo(): WasmInfo {
  return { abiVersion: 0 };
}

export const WasmInfo: MessageFns<WasmInfo> = {
  encode(message: WasmInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.abiVersion !== 0) {
      writer.uint32(8).uint32(message.abiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WasmInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWasmInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.abiVersion = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WasmInfo {
    return { abiVersion: isSet(object.abiVersion) ? globalThis.Number(object.abiVersion) : 0 };
  },

  toJSON(message: WasmInfo): unknown {
    const obj: any = {};
    if (message.abiVersion !== 0) {
      obj.abiVersion = Math.round(message.abiVersion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WasmInfo>, I>>(base?: I): WasmInfo {
    return WasmInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WasmInfo>, I>>(object: I): WasmInfo {
    const message = createBaseWasmInfo();
    message.abiVersion = object.abiVersion ?? 0;
    return message;
  },
};

function createBaseFlowInfo(): FlowInfo {
  return {};
}

export const FlowInfo: MessageFns<FlowInfo> = {
  encode(_: FlowInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlowInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlowInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlowInfo {
    return {};
  },

  toJSON(_: FlowInfo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FlowInfo>, I>>(base?: I): FlowInfo {
    return FlowInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FlowInfo>, I>>(_: I): FlowInfo {
    const message = createBaseFlowInfo();
    return message;
  },
};

function createBaseManifestInfo(): ManifestInfo {
  return {};
}

export const ManifestInfo: MessageFns<ManifestInfo> = {
  encode(_: ManifestInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManifestInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManifestInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ManifestInfo {
    return {};
  },

  toJSON(_: ManifestInfo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ManifestInfo>, I>>(base?: I): ManifestInfo {
    return ManifestInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManifestInfo>, I>>(_: I): ManifestInfo {
    const message = createBaseManifestInfo();
    return message;
  },
};

function createBaseBuildInfo(): BuildInfo {
  return { repoUrl: "", commitHash: new Uint8Array(0) };
}

export const BuildInfo: MessageFns<BuildInfo> = {
  encode(message: BuildInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoUrl !== "") {
      writer.uint32(10).string(message.repoUrl);
    }
    if (message.commitHash.length !== 0) {
      writer.uint32(18).bytes(message.commitHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.commitHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildInfo {
    return {
      repoUrl: isSet(object.repoUrl) ? globalThis.String(object.repoUrl) : "",
      commitHash: isSet(object.commitHash) ? bytesFromBase64(object.commitHash) : new Uint8Array(0),
    };
  },

  toJSON(message: BuildInfo): unknown {
    const obj: any = {};
    if (message.repoUrl !== "") {
      obj.repoUrl = message.repoUrl;
    }
    if (message.commitHash.length !== 0) {
      obj.commitHash = base64FromBytes(message.commitHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildInfo>, I>>(base?: I): BuildInfo {
    return BuildInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildInfo>, I>>(object: I): BuildInfo {
    const message = createBaseBuildInfo();
    message.repoUrl = object.repoUrl ?? "";
    message.commitHash = object.commitHash ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
