// source: network.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

var google_protobuf_timestamp_pb = require("google-protobuf/google/protobuf/timestamp_pb.js");
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol("proto.tari.rpc.Address", null, global);
goog.exportSymbol("proto.tari.rpc.AverageLatency", null, global);
goog.exportSymbol("proto.tari.rpc.ConnectivityStatus", null, global);
goog.exportSymbol("proto.tari.rpc.GetIdentityRequest", null, global);
goog.exportSymbol("proto.tari.rpc.GetIdentityResponse", null, global);
goog.exportSymbol("proto.tari.rpc.ListConnectedPeersResponse", null, global);
goog.exportSymbol("proto.tari.rpc.NetworkStatusResponse", null, global);
goog.exportSymbol("proto.tari.rpc.NodeIdentity", null, global);
goog.exportSymbol("proto.tari.rpc.Peer", null, global);
goog.exportSymbol("proto.tari.rpc.SoftwareUpdate", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.NodeIdentity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tari.rpc.NodeIdentity.repeatedFields_, null);
};
goog.inherits(proto.tari.rpc.NodeIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.NodeIdentity.displayName = "proto.tari.rpc.NodeIdentity";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.Peer = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tari.rpc.Peer.repeatedFields_, null);
};
goog.inherits(proto.tari.rpc.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.Peer.displayName = "proto.tari.rpc.Peer";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.NetworkStatusResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.NetworkStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.NetworkStatusResponse.displayName = "proto.tari.rpc.NetworkStatusResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.Address = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.Address.displayName = "proto.tari.rpc.Address";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.AverageLatency = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.AverageLatency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.AverageLatency.displayName = "proto.tari.rpc.AverageLatency";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.ListConnectedPeersResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tari.rpc.ListConnectedPeersResponse.repeatedFields_, null);
};
goog.inherits(proto.tari.rpc.ListConnectedPeersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.ListConnectedPeersResponse.displayName = "proto.tari.rpc.ListConnectedPeersResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.SoftwareUpdate = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.SoftwareUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.SoftwareUpdate.displayName = "proto.tari.rpc.SoftwareUpdate";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetIdentityRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetIdentityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetIdentityRequest.displayName = "proto.tari.rpc.GetIdentityRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetIdentityResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetIdentityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetIdentityResponse.displayName = "proto.tari.rpc.GetIdentityResponse";
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tari.rpc.NodeIdentity.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.NodeIdentity.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.NodeIdentity.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.NodeIdentity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.NodeIdentity.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        publicKey: msg.getPublicKey_asB64(),
        publicAddressesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
        nodeId: msg.getNodeId_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.NodeIdentity}
 */
proto.tari.rpc.NodeIdentity.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.NodeIdentity();
  return proto.tari.rpc.NodeIdentity.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.NodeIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.NodeIdentity}
 */
proto.tari.rpc.NodeIdentity.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPublicKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.addPublicAddresses(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setNodeId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.NodeIdentity.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.NodeIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.NodeIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.NodeIdentity.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getPublicAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(2, f);
  }
  f = message.getNodeId_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.NodeIdentity.prototype.getPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.tari.rpc.NodeIdentity.prototype.getPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicKey()));
};

/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.NodeIdentity.prototype.getPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.NodeIdentity} returns this
 */
proto.tari.rpc.NodeIdentity.prototype.setPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * repeated string public_addresses = 2;
 * @return {!Array<string>}
 */
proto.tari.rpc.NodeIdentity.prototype.getPublicAddressesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.tari.rpc.NodeIdentity} returns this
 */
proto.tari.rpc.NodeIdentity.prototype.setPublicAddressesList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.NodeIdentity} returns this
 */
proto.tari.rpc.NodeIdentity.prototype.addPublicAddresses = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.NodeIdentity} returns this
 */
proto.tari.rpc.NodeIdentity.prototype.clearPublicAddressesList = function () {
  return this.setPublicAddressesList([]);
};

/**
 * optional bytes node_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.NodeIdentity.prototype.getNodeId = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes node_id = 3;
 * This is a type-conversion wrapper around `getNodeId()`
 * @return {string}
 */
proto.tari.rpc.NodeIdentity.prototype.getNodeId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNodeId()));
};

/**
 * optional bytes node_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeId()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.NodeIdentity.prototype.getNodeId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNodeId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.NodeIdentity} returns this
 */
proto.tari.rpc.NodeIdentity.prototype.setNodeId = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tari.rpc.Peer.repeatedFields_ = [3, 11];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.Peer.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.Peer.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.Peer} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.Peer.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        publicKey: msg.getPublicKey_asB64(),
        nodeId: msg.getNodeId_asB64(),
        addressesList: jspb.Message.toObjectList(
          msg.getAddressesList(),
          proto.tari.rpc.Address.toObject,
          includeInstance,
        ),
        lastConnection: jspb.Message.getFieldWithDefault(msg, 4, 0),
        flags: jspb.Message.getFieldWithDefault(msg, 5, 0),
        bannedUntil: jspb.Message.getFieldWithDefault(msg, 6, 0),
        bannedReason: jspb.Message.getFieldWithDefault(msg, 7, ""),
        offlineAt: jspb.Message.getFieldWithDefault(msg, 8, 0),
        features: jspb.Message.getFieldWithDefault(msg, 9, 0),
        supportedProtocolsList: msg.getSupportedProtocolsList_asB64(),
        userAgent: jspb.Message.getFieldWithDefault(msg, 12, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.Peer}
 */
proto.tari.rpc.Peer.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.Peer();
  return proto.tari.rpc.Peer.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.Peer}
 */
proto.tari.rpc.Peer.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPublicKey(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setNodeId(value);
        break;
      case 3:
        var value = new proto.tari.rpc.Address();
        reader.readMessage(value, proto.tari.rpc.Address.deserializeBinaryFromReader);
        msg.addAddresses(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setLastConnection(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setFlags(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBannedUntil(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setBannedReason(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setOfflineAt(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setFeatures(value);
        break;
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addSupportedProtocols(value);
        break;
      case 12:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserAgent(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.Peer.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.Peer.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getNodeId_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.tari.rpc.Address.serializeBinaryToWriter);
  }
  f = message.getLastConnection();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(5, f);
  }
  f = message.getBannedUntil();
  if (f !== 0) {
    writer.writeUint64(6, f);
  }
  f = message.getBannedReason();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getOfflineAt();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
  f = message.getFeatures();
  if (f !== 0) {
    writer.writeUint32(9, f);
  }
  f = message.getSupportedProtocolsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(11, f);
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(12, f);
  }
};

/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Peer.prototype.getPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.tari.rpc.Peer.prototype.getPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicKey()));
};

/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Peer.prototype.getPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes node_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Peer.prototype.getNodeId = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes node_id = 2;
 * This is a type-conversion wrapper around `getNodeId()`
 * @return {string}
 */
proto.tari.rpc.Peer.prototype.getNodeId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNodeId()));
};

/**
 * optional bytes node_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeId()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Peer.prototype.getNodeId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNodeId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setNodeId = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * repeated Address addresses = 3;
 * @return {!Array<!proto.tari.rpc.Address>}
 */
proto.tari.rpc.Peer.prototype.getAddressesList = function () {
  return /** @type{!Array<!proto.tari.rpc.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tari.rpc.Address, 3)
  );
};

/**
 * @param {!Array<!proto.tari.rpc.Address>} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setAddressesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.tari.rpc.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.Address}
 */
proto.tari.rpc.Peer.prototype.addAddresses = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tari.rpc.Address, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.clearAddressesList = function () {
  return this.setAddressesList([]);
};

/**
 * optional uint64 last_connection = 4;
 * @return {number}
 */
proto.tari.rpc.Peer.prototype.getLastConnection = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setLastConnection = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint32 flags = 5;
 * @return {number}
 */
proto.tari.rpc.Peer.prototype.getFlags = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setFlags = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional uint64 banned_until = 6;
 * @return {number}
 */
proto.tari.rpc.Peer.prototype.getBannedUntil = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setBannedUntil = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional string banned_reason = 7;
 * @return {string}
 */
proto.tari.rpc.Peer.prototype.getBannedReason = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setBannedReason = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional uint64 offline_at = 8;
 * @return {number}
 */
proto.tari.rpc.Peer.prototype.getOfflineAt = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setOfflineAt = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional uint32 features = 9;
 * @return {number}
 */
proto.tari.rpc.Peer.prototype.getFeatures = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setFeatures = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * repeated bytes supported_protocols = 11;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.tari.rpc.Peer.prototype.getSupportedProtocolsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 11));
};

/**
 * repeated bytes supported_protocols = 11;
 * This is a type-conversion wrapper around `getSupportedProtocolsList()`
 * @return {!Array<string>}
 */
proto.tari.rpc.Peer.prototype.getSupportedProtocolsList_asB64 = function () {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getSupportedProtocolsList()));
};

/**
 * repeated bytes supported_protocols = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSupportedProtocolsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.tari.rpc.Peer.prototype.getSupportedProtocolsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(this.getSupportedProtocolsList()));
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setSupportedProtocolsList = function (value) {
  return jspb.Message.setField(this, 11, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.addSupportedProtocols = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.clearSupportedProtocolsList = function () {
  return this.setSupportedProtocolsList([]);
};

/**
 * optional string user_agent = 12;
 * @return {string}
 */
proto.tari.rpc.Peer.prototype.getUserAgent = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.Peer} returns this
 */
proto.tari.rpc.Peer.prototype.setUserAgent = function (value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.NetworkStatusResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.NetworkStatusResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.NetworkStatusResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.NetworkStatusResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        avgLatencyMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
        numNodeConnections: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.NetworkStatusResponse}
 */
proto.tari.rpc.NetworkStatusResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.NetworkStatusResponse();
  return proto.tari.rpc.NetworkStatusResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.NetworkStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.NetworkStatusResponse}
 */
proto.tari.rpc.NetworkStatusResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.tari.rpc.ConnectivityStatus} */ (reader.readEnum());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setAvgLatencyMs(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNumNodeConnections(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.NetworkStatusResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.NetworkStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.NetworkStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.NetworkStatusResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getAvgLatencyMs();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getNumNodeConnections();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
};

/**
 * optional ConnectivityStatus status = 1;
 * @return {!proto.tari.rpc.ConnectivityStatus}
 */
proto.tari.rpc.NetworkStatusResponse.prototype.getStatus = function () {
  return /** @type {!proto.tari.rpc.ConnectivityStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.tari.rpc.ConnectivityStatus} value
 * @return {!proto.tari.rpc.NetworkStatusResponse} returns this
 */
proto.tari.rpc.NetworkStatusResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional uint32 avg_latency_ms = 2;
 * @return {number}
 */
proto.tari.rpc.NetworkStatusResponse.prototype.getAvgLatencyMs = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.NetworkStatusResponse} returns this
 */
proto.tari.rpc.NetworkStatusResponse.prototype.setAvgLatencyMs = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint32 num_node_connections = 3;
 * @return {number}
 */
proto.tari.rpc.NetworkStatusResponse.prototype.getNumNodeConnections = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.NetworkStatusResponse} returns this
 */
proto.tari.rpc.NetworkStatusResponse.prototype.setNumNodeConnections = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.Address.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.Address.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.Address} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.Address.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: msg.getAddress_asB64(),
        lastSeen: jspb.Message.getFieldWithDefault(msg, 2, ""),
        connectionAttempts: jspb.Message.getFieldWithDefault(msg, 3, 0),
        avgLatency: (f = msg.getAvgLatency()) && proto.tari.rpc.AverageLatency.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.Address}
 */
proto.tari.rpc.Address.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.Address();
  return proto.tari.rpc.Address.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.Address}
 */
proto.tari.rpc.Address.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setLastSeen(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setConnectionAttempts(value);
        break;
      case 5:
        var value = new proto.tari.rpc.AverageLatency();
        reader.readMessage(value, proto.tari.rpc.AverageLatency.deserializeBinaryFromReader);
        msg.setAvgLatency(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.Address.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.Address.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getLastSeen();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConnectionAttempts();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getAvgLatency();
  if (f != null) {
    writer.writeMessage(5, f, proto.tari.rpc.AverageLatency.serializeBinaryToWriter);
  }
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Address.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.tari.rpc.Address.prototype.getAddress_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAddress()));
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Address.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAddress()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Address} returns this
 */
proto.tari.rpc.Address.prototype.setAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional string last_seen = 2;
 * @return {string}
 */
proto.tari.rpc.Address.prototype.getLastSeen = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.Address} returns this
 */
proto.tari.rpc.Address.prototype.setLastSeen = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint32 connection_attempts = 3;
 * @return {number}
 */
proto.tari.rpc.Address.prototype.getConnectionAttempts = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.Address} returns this
 */
proto.tari.rpc.Address.prototype.setConnectionAttempts = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional AverageLatency avg_latency = 5;
 * @return {?proto.tari.rpc.AverageLatency}
 */
proto.tari.rpc.Address.prototype.getAvgLatency = function () {
  return /** @type{?proto.tari.rpc.AverageLatency} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.AverageLatency, 5)
  );
};

/**
 * @param {?proto.tari.rpc.AverageLatency|undefined} value
 * @return {!proto.tari.rpc.Address} returns this
 */
proto.tari.rpc.Address.prototype.setAvgLatency = function (value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.Address} returns this
 */
proto.tari.rpc.Address.prototype.clearAvgLatency = function () {
  return this.setAvgLatency(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.Address.prototype.hasAvgLatency = function () {
  return jspb.Message.getField(this, 5) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.AverageLatency.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.AverageLatency.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.AverageLatency} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.AverageLatency.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        latency: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.AverageLatency}
 */
proto.tari.rpc.AverageLatency.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.AverageLatency();
  return proto.tari.rpc.AverageLatency.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.AverageLatency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.AverageLatency}
 */
proto.tari.rpc.AverageLatency.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setLatency(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.AverageLatency.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.AverageLatency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.AverageLatency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.AverageLatency.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLatency();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
};

/**
 * optional uint64 latency = 1;
 * @return {number}
 */
proto.tari.rpc.AverageLatency.prototype.getLatency = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.AverageLatency} returns this
 */
proto.tari.rpc.AverageLatency.prototype.setLatency = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tari.rpc.ListConnectedPeersResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.ListConnectedPeersResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.ListConnectedPeersResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.ListConnectedPeersResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.ListConnectedPeersResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        connectedPeersList: jspb.Message.toObjectList(
          msg.getConnectedPeersList(),
          proto.tari.rpc.Peer.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.ListConnectedPeersResponse}
 */
proto.tari.rpc.ListConnectedPeersResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.ListConnectedPeersResponse();
  return proto.tari.rpc.ListConnectedPeersResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.ListConnectedPeersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.ListConnectedPeersResponse}
 */
proto.tari.rpc.ListConnectedPeersResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.Peer();
        reader.readMessage(value, proto.tari.rpc.Peer.deserializeBinaryFromReader);
        msg.addConnectedPeers(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.ListConnectedPeersResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.ListConnectedPeersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.ListConnectedPeersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.ListConnectedPeersResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getConnectedPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.tari.rpc.Peer.serializeBinaryToWriter);
  }
};

/**
 * repeated Peer connected_peers = 1;
 * @return {!Array<!proto.tari.rpc.Peer>}
 */
proto.tari.rpc.ListConnectedPeersResponse.prototype.getConnectedPeersList = function () {
  return /** @type{!Array<!proto.tari.rpc.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tari.rpc.Peer, 1)
  );
};

/**
 * @param {!Array<!proto.tari.rpc.Peer>} value
 * @return {!proto.tari.rpc.ListConnectedPeersResponse} returns this
 */
proto.tari.rpc.ListConnectedPeersResponse.prototype.setConnectedPeersList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.tari.rpc.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.Peer}
 */
proto.tari.rpc.ListConnectedPeersResponse.prototype.addConnectedPeers = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tari.rpc.Peer, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.ListConnectedPeersResponse} returns this
 */
proto.tari.rpc.ListConnectedPeersResponse.prototype.clearConnectedPeersList = function () {
  return this.setConnectedPeersList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.SoftwareUpdate.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.SoftwareUpdate.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.SoftwareUpdate} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.SoftwareUpdate.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        hasUpdate: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        version: jspb.Message.getFieldWithDefault(msg, 2, ""),
        sha: jspb.Message.getFieldWithDefault(msg, 3, ""),
        downloadUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.SoftwareUpdate}
 */
proto.tari.rpc.SoftwareUpdate.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.SoftwareUpdate();
  return proto.tari.rpc.SoftwareUpdate.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.SoftwareUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.SoftwareUpdate}
 */
proto.tari.rpc.SoftwareUpdate.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setHasUpdate(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVersion(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setSha(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setDownloadUrl(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.SoftwareUpdate.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.SoftwareUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.SoftwareUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.SoftwareUpdate.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHasUpdate();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getSha();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getDownloadUrl();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional bool has_update = 1;
 * @return {boolean}
 */
proto.tari.rpc.SoftwareUpdate.prototype.getHasUpdate = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};

/**
 * @param {boolean} value
 * @return {!proto.tari.rpc.SoftwareUpdate} returns this
 */
proto.tari.rpc.SoftwareUpdate.prototype.setHasUpdate = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string version = 2;
 * @return {string}
 */
proto.tari.rpc.SoftwareUpdate.prototype.getVersion = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.SoftwareUpdate} returns this
 */
proto.tari.rpc.SoftwareUpdate.prototype.setVersion = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string sha = 3;
 * @return {string}
 */
proto.tari.rpc.SoftwareUpdate.prototype.getSha = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.SoftwareUpdate} returns this
 */
proto.tari.rpc.SoftwareUpdate.prototype.setSha = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string download_url = 4;
 * @return {string}
 */
proto.tari.rpc.SoftwareUpdate.prototype.getDownloadUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.SoftwareUpdate} returns this
 */
proto.tari.rpc.SoftwareUpdate.prototype.setDownloadUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetIdentityRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetIdentityRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetIdentityRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetIdentityRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetIdentityRequest}
 */
proto.tari.rpc.GetIdentityRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetIdentityRequest();
  return proto.tari.rpc.GetIdentityRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetIdentityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetIdentityRequest}
 */
proto.tari.rpc.GetIdentityRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetIdentityRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetIdentityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetIdentityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetIdentityRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetIdentityResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetIdentityResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetIdentityResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetIdentityResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        publicKey: msg.getPublicKey_asB64(),
        publicAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
        nodeId: msg.getNodeId_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetIdentityResponse}
 */
proto.tari.rpc.GetIdentityResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetIdentityResponse();
  return proto.tari.rpc.GetIdentityResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetIdentityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetIdentityResponse}
 */
proto.tari.rpc.GetIdentityResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPublicKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPublicAddress(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setNodeId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetIdentityResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetIdentityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetIdentityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetIdentityResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getPublicAddress();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getNodeId_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.GetIdentityResponse.prototype.getPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.tari.rpc.GetIdentityResponse.prototype.getPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicKey()));
};

/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetIdentityResponse.prototype.getPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.GetIdentityResponse} returns this
 */
proto.tari.rpc.GetIdentityResponse.prototype.setPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional string public_address = 2;
 * @return {string}
 */
proto.tari.rpc.GetIdentityResponse.prototype.getPublicAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.GetIdentityResponse} returns this
 */
proto.tari.rpc.GetIdentityResponse.prototype.setPublicAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bytes node_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.GetIdentityResponse.prototype.getNodeId = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes node_id = 3;
 * This is a type-conversion wrapper around `getNodeId()`
 * @return {string}
 */
proto.tari.rpc.GetIdentityResponse.prototype.getNodeId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNodeId()));
};

/**
 * optional bytes node_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeId()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetIdentityResponse.prototype.getNodeId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNodeId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.GetIdentityResponse} returns this
 */
proto.tari.rpc.GetIdentityResponse.prototype.setNodeId = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * @enum {number}
 */
proto.tari.rpc.ConnectivityStatus = {
  INITIALIZING: 0,
  ONLINE: 1,
  DEGRADED: 2,
  OFFLINE: 3,
};

goog.object.extend(exports, proto.tari.rpc);
