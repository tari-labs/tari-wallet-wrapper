// source: sidechain_types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

var types_pb = require("./types_pb.js");
goog.object.extend(proto, types_pb);
goog.exportSymbol("proto.tari.rpc.BuildInfo", null, global);
goog.exportSymbol("proto.tari.rpc.ConfidentialOutputData", null, global);
goog.exportSymbol("proto.tari.rpc.FlowInfo", null, global);
goog.exportSymbol("proto.tari.rpc.ManifestInfo", null, global);
goog.exportSymbol("proto.tari.rpc.SideChainFeature", null, global);
goog.exportSymbol("proto.tari.rpc.SideChainFeature.SideChainFeatureCase", null, global);
goog.exportSymbol("proto.tari.rpc.TemplateRegistration", null, global);
goog.exportSymbol("proto.tari.rpc.TemplateType", null, global);
goog.exportSymbol("proto.tari.rpc.TemplateType.TemplateTypeCase", null, global);
goog.exportSymbol("proto.tari.rpc.ValidatorNodeRegistration", null, global);
goog.exportSymbol("proto.tari.rpc.WasmInfo", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.SideChainFeature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tari.rpc.SideChainFeature.oneofGroups_);
};
goog.inherits(proto.tari.rpc.SideChainFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.SideChainFeature.displayName = "proto.tari.rpc.SideChainFeature";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.ValidatorNodeRegistration = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.ValidatorNodeRegistration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.ValidatorNodeRegistration.displayName = "proto.tari.rpc.ValidatorNodeRegistration";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.TemplateRegistration = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.TemplateRegistration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.TemplateRegistration.displayName = "proto.tari.rpc.TemplateRegistration";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.ConfidentialOutputData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.ConfidentialOutputData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.ConfidentialOutputData.displayName = "proto.tari.rpc.ConfidentialOutputData";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.TemplateType = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tari.rpc.TemplateType.oneofGroups_);
};
goog.inherits(proto.tari.rpc.TemplateType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.TemplateType.displayName = "proto.tari.rpc.TemplateType";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.WasmInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.WasmInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.WasmInfo.displayName = "proto.tari.rpc.WasmInfo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.FlowInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.FlowInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.FlowInfo.displayName = "proto.tari.rpc.FlowInfo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.ManifestInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.ManifestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.ManifestInfo.displayName = "proto.tari.rpc.ManifestInfo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.BuildInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.BuildInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.BuildInfo.displayName = "proto.tari.rpc.BuildInfo";
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tari.rpc.SideChainFeature.oneofGroups_ = [[1, 2, 3]];

/**
 * @enum {number}
 */
proto.tari.rpc.SideChainFeature.SideChainFeatureCase = {
  SIDE_CHAIN_FEATURE_NOT_SET: 0,
  VALIDATOR_NODE_REGISTRATION: 1,
  TEMPLATE_REGISTRATION: 2,
  CONFIDENTIAL_OUTPUT: 3,
};

/**
 * @return {proto.tari.rpc.SideChainFeature.SideChainFeatureCase}
 */
proto.tari.rpc.SideChainFeature.prototype.getSideChainFeatureCase = function () {
  return /** @type {proto.tari.rpc.SideChainFeature.SideChainFeatureCase} */ (
    jspb.Message.computeOneofCase(this, proto.tari.rpc.SideChainFeature.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.SideChainFeature.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.SideChainFeature.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.SideChainFeature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.SideChainFeature.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        validatorNodeRegistration:
          (f = msg.getValidatorNodeRegistration()) &&
          proto.tari.rpc.ValidatorNodeRegistration.toObject(includeInstance, f),
        templateRegistration:
          (f = msg.getTemplateRegistration()) && proto.tari.rpc.TemplateRegistration.toObject(includeInstance, f),
        confidentialOutput:
          (f = msg.getConfidentialOutput()) && proto.tari.rpc.ConfidentialOutputData.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.SideChainFeature}
 */
proto.tari.rpc.SideChainFeature.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.SideChainFeature();
  return proto.tari.rpc.SideChainFeature.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.SideChainFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.SideChainFeature}
 */
proto.tari.rpc.SideChainFeature.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.ValidatorNodeRegistration();
        reader.readMessage(value, proto.tari.rpc.ValidatorNodeRegistration.deserializeBinaryFromReader);
        msg.setValidatorNodeRegistration(value);
        break;
      case 2:
        var value = new proto.tari.rpc.TemplateRegistration();
        reader.readMessage(value, proto.tari.rpc.TemplateRegistration.deserializeBinaryFromReader);
        msg.setTemplateRegistration(value);
        break;
      case 3:
        var value = new proto.tari.rpc.ConfidentialOutputData();
        reader.readMessage(value, proto.tari.rpc.ConfidentialOutputData.deserializeBinaryFromReader);
        msg.setConfidentialOutput(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.SideChainFeature.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.SideChainFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.SideChainFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.SideChainFeature.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValidatorNodeRegistration();
  if (f != null) {
    writer.writeMessage(1, f, proto.tari.rpc.ValidatorNodeRegistration.serializeBinaryToWriter);
  }
  f = message.getTemplateRegistration();
  if (f != null) {
    writer.writeMessage(2, f, proto.tari.rpc.TemplateRegistration.serializeBinaryToWriter);
  }
  f = message.getConfidentialOutput();
  if (f != null) {
    writer.writeMessage(3, f, proto.tari.rpc.ConfidentialOutputData.serializeBinaryToWriter);
  }
};

/**
 * optional ValidatorNodeRegistration validator_node_registration = 1;
 * @return {?proto.tari.rpc.ValidatorNodeRegistration}
 */
proto.tari.rpc.SideChainFeature.prototype.getValidatorNodeRegistration = function () {
  return /** @type{?proto.tari.rpc.ValidatorNodeRegistration} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.ValidatorNodeRegistration, 1)
  );
};

/**
 * @param {?proto.tari.rpc.ValidatorNodeRegistration|undefined} value
 * @return {!proto.tari.rpc.SideChainFeature} returns this
 */
proto.tari.rpc.SideChainFeature.prototype.setValidatorNodeRegistration = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.tari.rpc.SideChainFeature.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.SideChainFeature} returns this
 */
proto.tari.rpc.SideChainFeature.prototype.clearValidatorNodeRegistration = function () {
  return this.setValidatorNodeRegistration(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.SideChainFeature.prototype.hasValidatorNodeRegistration = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional TemplateRegistration template_registration = 2;
 * @return {?proto.tari.rpc.TemplateRegistration}
 */
proto.tari.rpc.SideChainFeature.prototype.getTemplateRegistration = function () {
  return /** @type{?proto.tari.rpc.TemplateRegistration} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.TemplateRegistration, 2)
  );
};

/**
 * @param {?proto.tari.rpc.TemplateRegistration|undefined} value
 * @return {!proto.tari.rpc.SideChainFeature} returns this
 */
proto.tari.rpc.SideChainFeature.prototype.setTemplateRegistration = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tari.rpc.SideChainFeature.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.SideChainFeature} returns this
 */
proto.tari.rpc.SideChainFeature.prototype.clearTemplateRegistration = function () {
  return this.setTemplateRegistration(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.SideChainFeature.prototype.hasTemplateRegistration = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ConfidentialOutputData confidential_output = 3;
 * @return {?proto.tari.rpc.ConfidentialOutputData}
 */
proto.tari.rpc.SideChainFeature.prototype.getConfidentialOutput = function () {
  return /** @type{?proto.tari.rpc.ConfidentialOutputData} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.ConfidentialOutputData, 3)
  );
};

/**
 * @param {?proto.tari.rpc.ConfidentialOutputData|undefined} value
 * @return {!proto.tari.rpc.SideChainFeature} returns this
 */
proto.tari.rpc.SideChainFeature.prototype.setConfidentialOutput = function (value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tari.rpc.SideChainFeature.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.SideChainFeature} returns this
 */
proto.tari.rpc.SideChainFeature.prototype.clearConfidentialOutput = function () {
  return this.setConfidentialOutput(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.SideChainFeature.prototype.hasConfidentialOutput = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.ValidatorNodeRegistration.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.ValidatorNodeRegistration.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.ValidatorNodeRegistration} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.ValidatorNodeRegistration.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        publicKey: msg.getPublicKey_asB64(),
        signature: (f = msg.getSignature()) && types_pb.Signature.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.ValidatorNodeRegistration}
 */
proto.tari.rpc.ValidatorNodeRegistration.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.ValidatorNodeRegistration();
  return proto.tari.rpc.ValidatorNodeRegistration.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.ValidatorNodeRegistration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.ValidatorNodeRegistration}
 */
proto.tari.rpc.ValidatorNodeRegistration.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPublicKey(value);
        break;
      case 2:
        var value = new types_pb.Signature();
        reader.readMessage(value, types_pb.Signature.deserializeBinaryFromReader);
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.ValidatorNodeRegistration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.ValidatorNodeRegistration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.ValidatorNodeRegistration.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(2, f, types_pb.Signature.serializeBinaryToWriter);
  }
};

/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.getPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.getPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicKey()));
};

/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.getPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.ValidatorNodeRegistration} returns this
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.setPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional Signature signature = 2;
 * @return {?proto.tari.rpc.Signature}
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.getSignature = function () {
  return /** @type{?proto.tari.rpc.Signature} */ (jspb.Message.getWrapperField(this, types_pb.Signature, 2));
};

/**
 * @param {?proto.tari.rpc.Signature|undefined} value
 * @return {!proto.tari.rpc.ValidatorNodeRegistration} returns this
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.setSignature = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.ValidatorNodeRegistration} returns this
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.clearSignature = function () {
  return this.setSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.ValidatorNodeRegistration.prototype.hasSignature = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.TemplateRegistration.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.TemplateRegistration.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.TemplateRegistration} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.TemplateRegistration.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        authorPublicKey: msg.getAuthorPublicKey_asB64(),
        authorSignature: (f = msg.getAuthorSignature()) && types_pb.Signature.toObject(includeInstance, f),
        templateName: jspb.Message.getFieldWithDefault(msg, 3, ""),
        templateVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
        templateType: (f = msg.getTemplateType()) && proto.tari.rpc.TemplateType.toObject(includeInstance, f),
        buildInfo: (f = msg.getBuildInfo()) && proto.tari.rpc.BuildInfo.toObject(includeInstance, f),
        binarySha: msg.getBinarySha_asB64(),
        binaryUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.TemplateRegistration}
 */
proto.tari.rpc.TemplateRegistration.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.TemplateRegistration();
  return proto.tari.rpc.TemplateRegistration.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.TemplateRegistration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.TemplateRegistration}
 */
proto.tari.rpc.TemplateRegistration.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAuthorPublicKey(value);
        break;
      case 2:
        var value = new types_pb.Signature();
        reader.readMessage(value, types_pb.Signature.deserializeBinaryFromReader);
        msg.setAuthorSignature(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTemplateName(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTemplateVersion(value);
        break;
      case 5:
        var value = new proto.tari.rpc.TemplateType();
        reader.readMessage(value, proto.tari.rpc.TemplateType.deserializeBinaryFromReader);
        msg.setTemplateType(value);
        break;
      case 6:
        var value = new proto.tari.rpc.BuildInfo();
        reader.readMessage(value, proto.tari.rpc.BuildInfo.deserializeBinaryFromReader);
        msg.setBuildInfo(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBinarySha(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setBinaryUrl(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.TemplateRegistration.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.TemplateRegistration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.TemplateRegistration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.TemplateRegistration.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAuthorPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getAuthorSignature();
  if (f != null) {
    writer.writeMessage(2, f, types_pb.Signature.serializeBinaryToWriter);
  }
  f = message.getTemplateName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getTemplateVersion();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
  f = message.getTemplateType();
  if (f != null) {
    writer.writeMessage(5, f, proto.tari.rpc.TemplateType.serializeBinaryToWriter);
  }
  f = message.getBuildInfo();
  if (f != null) {
    writer.writeMessage(6, f, proto.tari.rpc.BuildInfo.serializeBinaryToWriter);
  }
  f = message.getBinarySha_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
  f = message.getBinaryUrl();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
};

/**
 * optional bytes author_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TemplateRegistration.prototype.getAuthorPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes author_public_key = 1;
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {string}
 */
proto.tari.rpc.TemplateRegistration.prototype.getAuthorPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAuthorPublicKey()));
};

/**
 * optional bytes author_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TemplateRegistration.prototype.getAuthorPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAuthorPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.setAuthorPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional Signature author_signature = 2;
 * @return {?proto.tari.rpc.Signature}
 */
proto.tari.rpc.TemplateRegistration.prototype.getAuthorSignature = function () {
  return /** @type{?proto.tari.rpc.Signature} */ (jspb.Message.getWrapperField(this, types_pb.Signature, 2));
};

/**
 * @param {?proto.tari.rpc.Signature|undefined} value
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.setAuthorSignature = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.clearAuthorSignature = function () {
  return this.setAuthorSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TemplateRegistration.prototype.hasAuthorSignature = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string template_name = 3;
 * @return {string}
 */
proto.tari.rpc.TemplateRegistration.prototype.getTemplateName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.setTemplateName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional uint32 template_version = 4;
 * @return {number}
 */
proto.tari.rpc.TemplateRegistration.prototype.getTemplateVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.setTemplateVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional TemplateType template_type = 5;
 * @return {?proto.tari.rpc.TemplateType}
 */
proto.tari.rpc.TemplateRegistration.prototype.getTemplateType = function () {
  return /** @type{?proto.tari.rpc.TemplateType} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.TemplateType, 5)
  );
};

/**
 * @param {?proto.tari.rpc.TemplateType|undefined} value
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.setTemplateType = function (value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.clearTemplateType = function () {
  return this.setTemplateType(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TemplateRegistration.prototype.hasTemplateType = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional BuildInfo build_info = 6;
 * @return {?proto.tari.rpc.BuildInfo}
 */
proto.tari.rpc.TemplateRegistration.prototype.getBuildInfo = function () {
  return /** @type{?proto.tari.rpc.BuildInfo} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.BuildInfo, 6));
};

/**
 * @param {?proto.tari.rpc.BuildInfo|undefined} value
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.setBuildInfo = function (value) {
  return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.clearBuildInfo = function () {
  return this.setBuildInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TemplateRegistration.prototype.hasBuildInfo = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional bytes binary_sha = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TemplateRegistration.prototype.getBinarySha = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * optional bytes binary_sha = 7;
 * This is a type-conversion wrapper around `getBinarySha()`
 * @return {string}
 */
proto.tari.rpc.TemplateRegistration.prototype.getBinarySha_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBinarySha()));
};

/**
 * optional bytes binary_sha = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinarySha()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TemplateRegistration.prototype.getBinarySha_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBinarySha()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.setBinarySha = function (value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};

/**
 * optional string binary_url = 8;
 * @return {string}
 */
proto.tari.rpc.TemplateRegistration.prototype.getBinaryUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.TemplateRegistration} returns this
 */
proto.tari.rpc.TemplateRegistration.prototype.setBinaryUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.ConfidentialOutputData.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.ConfidentialOutputData.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.ConfidentialOutputData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.ConfidentialOutputData.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        claimPublicKey: msg.getClaimPublicKey_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.ConfidentialOutputData}
 */
proto.tari.rpc.ConfidentialOutputData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.ConfidentialOutputData();
  return proto.tari.rpc.ConfidentialOutputData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.ConfidentialOutputData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.ConfidentialOutputData}
 */
proto.tari.rpc.ConfidentialOutputData.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setClaimPublicKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.ConfidentialOutputData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.ConfidentialOutputData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.ConfidentialOutputData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.ConfidentialOutputData.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getClaimPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes claim_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.ConfidentialOutputData.prototype.getClaimPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes claim_public_key = 1;
 * This is a type-conversion wrapper around `getClaimPublicKey()`
 * @return {string}
 */
proto.tari.rpc.ConfidentialOutputData.prototype.getClaimPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getClaimPublicKey()));
};

/**
 * optional bytes claim_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.ConfidentialOutputData.prototype.getClaimPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getClaimPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.ConfidentialOutputData} returns this
 */
proto.tari.rpc.ConfidentialOutputData.prototype.setClaimPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tari.rpc.TemplateType.oneofGroups_ = [[1, 2, 3]];

/**
 * @enum {number}
 */
proto.tari.rpc.TemplateType.TemplateTypeCase = {
  TEMPLATE_TYPE_NOT_SET: 0,
  WASM: 1,
  FLOW: 2,
  MANIFEST: 3,
};

/**
 * @return {proto.tari.rpc.TemplateType.TemplateTypeCase}
 */
proto.tari.rpc.TemplateType.prototype.getTemplateTypeCase = function () {
  return /** @type {proto.tari.rpc.TemplateType.TemplateTypeCase} */ (
    jspb.Message.computeOneofCase(this, proto.tari.rpc.TemplateType.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.TemplateType.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.TemplateType.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.TemplateType} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.TemplateType.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        wasm: (f = msg.getWasm()) && proto.tari.rpc.WasmInfo.toObject(includeInstance, f),
        flow: (f = msg.getFlow()) && proto.tari.rpc.FlowInfo.toObject(includeInstance, f),
        manifest: (f = msg.getManifest()) && proto.tari.rpc.ManifestInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.TemplateType}
 */
proto.tari.rpc.TemplateType.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.TemplateType();
  return proto.tari.rpc.TemplateType.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.TemplateType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.TemplateType}
 */
proto.tari.rpc.TemplateType.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.WasmInfo();
        reader.readMessage(value, proto.tari.rpc.WasmInfo.deserializeBinaryFromReader);
        msg.setWasm(value);
        break;
      case 2:
        var value = new proto.tari.rpc.FlowInfo();
        reader.readMessage(value, proto.tari.rpc.FlowInfo.deserializeBinaryFromReader);
        msg.setFlow(value);
        break;
      case 3:
        var value = new proto.tari.rpc.ManifestInfo();
        reader.readMessage(value, proto.tari.rpc.ManifestInfo.deserializeBinaryFromReader);
        msg.setManifest(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.TemplateType.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.TemplateType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.TemplateType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.TemplateType.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getWasm();
  if (f != null) {
    writer.writeMessage(1, f, proto.tari.rpc.WasmInfo.serializeBinaryToWriter);
  }
  f = message.getFlow();
  if (f != null) {
    writer.writeMessage(2, f, proto.tari.rpc.FlowInfo.serializeBinaryToWriter);
  }
  f = message.getManifest();
  if (f != null) {
    writer.writeMessage(3, f, proto.tari.rpc.ManifestInfo.serializeBinaryToWriter);
  }
};

/**
 * optional WasmInfo wasm = 1;
 * @return {?proto.tari.rpc.WasmInfo}
 */
proto.tari.rpc.TemplateType.prototype.getWasm = function () {
  return /** @type{?proto.tari.rpc.WasmInfo} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.WasmInfo, 1));
};

/**
 * @param {?proto.tari.rpc.WasmInfo|undefined} value
 * @return {!proto.tari.rpc.TemplateType} returns this
 */
proto.tari.rpc.TemplateType.prototype.setWasm = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.tari.rpc.TemplateType.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TemplateType} returns this
 */
proto.tari.rpc.TemplateType.prototype.clearWasm = function () {
  return this.setWasm(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TemplateType.prototype.hasWasm = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional FlowInfo flow = 2;
 * @return {?proto.tari.rpc.FlowInfo}
 */
proto.tari.rpc.TemplateType.prototype.getFlow = function () {
  return /** @type{?proto.tari.rpc.FlowInfo} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.FlowInfo, 2));
};

/**
 * @param {?proto.tari.rpc.FlowInfo|undefined} value
 * @return {!proto.tari.rpc.TemplateType} returns this
 */
proto.tari.rpc.TemplateType.prototype.setFlow = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tari.rpc.TemplateType.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TemplateType} returns this
 */
proto.tari.rpc.TemplateType.prototype.clearFlow = function () {
  return this.setFlow(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TemplateType.prototype.hasFlow = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ManifestInfo manifest = 3;
 * @return {?proto.tari.rpc.ManifestInfo}
 */
proto.tari.rpc.TemplateType.prototype.getManifest = function () {
  return /** @type{?proto.tari.rpc.ManifestInfo} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.ManifestInfo, 3)
  );
};

/**
 * @param {?proto.tari.rpc.ManifestInfo|undefined} value
 * @return {!proto.tari.rpc.TemplateType} returns this
 */
proto.tari.rpc.TemplateType.prototype.setManifest = function (value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tari.rpc.TemplateType.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TemplateType} returns this
 */
proto.tari.rpc.TemplateType.prototype.clearManifest = function () {
  return this.setManifest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TemplateType.prototype.hasManifest = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.WasmInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.WasmInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.WasmInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.WasmInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        abiVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.WasmInfo}
 */
proto.tari.rpc.WasmInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.WasmInfo();
  return proto.tari.rpc.WasmInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.WasmInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.WasmInfo}
 */
proto.tari.rpc.WasmInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setAbiVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.WasmInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.WasmInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.WasmInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.WasmInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAbiVersion();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
};

/**
 * optional uint32 abi_version = 1;
 * @return {number}
 */
proto.tari.rpc.WasmInfo.prototype.getAbiVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.WasmInfo} returns this
 */
proto.tari.rpc.WasmInfo.prototype.setAbiVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.FlowInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.FlowInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.FlowInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.FlowInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.FlowInfo}
 */
proto.tari.rpc.FlowInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.FlowInfo();
  return proto.tari.rpc.FlowInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.FlowInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.FlowInfo}
 */
proto.tari.rpc.FlowInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.FlowInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.FlowInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.FlowInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.FlowInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.ManifestInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.ManifestInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.ManifestInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.ManifestInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.ManifestInfo}
 */
proto.tari.rpc.ManifestInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.ManifestInfo();
  return proto.tari.rpc.ManifestInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.ManifestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.ManifestInfo}
 */
proto.tari.rpc.ManifestInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.ManifestInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.ManifestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.ManifestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.ManifestInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.BuildInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.BuildInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.BuildInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.BuildInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        repoUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
        commitHash: msg.getCommitHash_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.BuildInfo}
 */
proto.tari.rpc.BuildInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.BuildInfo();
  return proto.tari.rpc.BuildInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.BuildInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.BuildInfo}
 */
proto.tari.rpc.BuildInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setRepoUrl(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCommitHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.BuildInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.BuildInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.BuildInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.BuildInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRepoUrl();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional string repo_url = 1;
 * @return {string}
 */
proto.tari.rpc.BuildInfo.prototype.getRepoUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.BuildInfo} returns this
 */
proto.tari.rpc.BuildInfo.prototype.setRepoUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bytes commit_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BuildInfo.prototype.getCommitHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes commit_hash = 2;
 * This is a type-conversion wrapper around `getCommitHash()`
 * @return {string}
 */
proto.tari.rpc.BuildInfo.prototype.getCommitHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCommitHash()));
};

/**
 * optional bytes commit_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommitHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BuildInfo.prototype.getCommitHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCommitHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BuildInfo} returns this
 */
proto.tari.rpc.BuildInfo.prototype.setCommitHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

goog.object.extend(exports, proto.tari.rpc);
