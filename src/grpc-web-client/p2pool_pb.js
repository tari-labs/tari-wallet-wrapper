// source: p2pool.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

var base_node_pb = require("./base_node_pb.js");
goog.object.extend(proto, base_node_pb);
var block_pb = require("./block_pb.js");
goog.object.extend(proto, block_pb);
goog.exportSymbol("proto.tari.rpc.GetNewBlockRequest", null, global);
goog.exportSymbol("proto.tari.rpc.GetNewBlockResponse", null, global);
goog.exportSymbol("proto.tari.rpc.GetTipInfoRequest", null, global);
goog.exportSymbol("proto.tari.rpc.GetTipInfoResponse", null, global);
goog.exportSymbol("proto.tari.rpc.SubmitBlockRequest", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetTipInfoRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetTipInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetTipInfoRequest.displayName = "proto.tari.rpc.GetTipInfoRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetTipInfoResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetTipInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetTipInfoResponse.displayName = "proto.tari.rpc.GetTipInfoResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetNewBlockRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetNewBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetNewBlockRequest.displayName = "proto.tari.rpc.GetNewBlockRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetNewBlockResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetNewBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetNewBlockResponse.displayName = "proto.tari.rpc.GetNewBlockResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.SubmitBlockRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.SubmitBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.SubmitBlockRequest.displayName = "proto.tari.rpc.SubmitBlockRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetTipInfoRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetTipInfoRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetTipInfoRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetTipInfoRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetTipInfoRequest}
 */
proto.tari.rpc.GetTipInfoRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetTipInfoRequest();
  return proto.tari.rpc.GetTipInfoRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetTipInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetTipInfoRequest}
 */
proto.tari.rpc.GetTipInfoRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTipInfoRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetTipInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetTipInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetTipInfoRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetTipInfoResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetTipInfoResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetTipInfoResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetTipInfoResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        nodeHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
        nodeTipHash: msg.getNodeTipHash_asB64(),
        p2poolRxHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
        p2poolRxTipHash: msg.getP2poolRxTipHash_asB64(),
        p2poolShaHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
        p2poolShaTipHash: msg.getP2poolShaTipHash_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetTipInfoResponse}
 */
proto.tari.rpc.GetTipInfoResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetTipInfoResponse();
  return proto.tari.rpc.GetTipInfoResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetTipInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetTipInfoResponse}
 */
proto.tari.rpc.GetTipInfoResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNodeHeight(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setNodeTipHash(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setP2poolRxHeight(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setP2poolRxTipHash(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setP2poolShaHeight(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setP2poolShaTipHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetTipInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetTipInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetTipInfoResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getNodeHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getNodeTipHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getP2poolRxHeight();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getP2poolRxTipHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getP2poolShaHeight();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getP2poolShaTipHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
};

/**
 * optional uint64 node_height = 1;
 * @return {number}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getNodeHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.GetTipInfoResponse} returns this
 */
proto.tari.rpc.GetTipInfoResponse.prototype.setNodeHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes node_tip_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getNodeTipHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes node_tip_hash = 2;
 * This is a type-conversion wrapper around `getNodeTipHash()`
 * @return {string}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getNodeTipHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNodeTipHash()));
};

/**
 * optional bytes node_tip_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeTipHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getNodeTipHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNodeTipHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.GetTipInfoResponse} returns this
 */
proto.tari.rpc.GetTipInfoResponse.prototype.setNodeTipHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional uint64 p2pool_rx_height = 3;
 * @return {number}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getP2poolRxHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.GetTipInfoResponse} returns this
 */
proto.tari.rpc.GetTipInfoResponse.prototype.setP2poolRxHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes p2pool_rx_tip_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getP2poolRxTipHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes p2pool_rx_tip_hash = 4;
 * This is a type-conversion wrapper around `getP2poolRxTipHash()`
 * @return {string}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getP2poolRxTipHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getP2poolRxTipHash()));
};

/**
 * optional bytes p2pool_rx_tip_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP2poolRxTipHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getP2poolRxTipHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getP2poolRxTipHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.GetTipInfoResponse} returns this
 */
proto.tari.rpc.GetTipInfoResponse.prototype.setP2poolRxTipHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional uint64 p2pool_sha_height = 5;
 * @return {number}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getP2poolShaHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.GetTipInfoResponse} returns this
 */
proto.tari.rpc.GetTipInfoResponse.prototype.setP2poolShaHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional bytes p2pool_sha_tip_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getP2poolShaTipHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/**
 * optional bytes p2pool_sha_tip_hash = 6;
 * This is a type-conversion wrapper around `getP2poolShaTipHash()`
 * @return {string}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getP2poolShaTipHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getP2poolShaTipHash()));
};

/**
 * optional bytes p2pool_sha_tip_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getP2poolShaTipHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTipInfoResponse.prototype.getP2poolShaTipHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getP2poolShaTipHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.GetTipInfoResponse} returns this
 */
proto.tari.rpc.GetTipInfoResponse.prototype.setP2poolShaTipHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetNewBlockRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetNewBlockRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetNewBlockRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetNewBlockRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        pow: (f = msg.getPow()) && block_pb.PowAlgo.toObject(includeInstance, f),
        coinbaseExtra: jspb.Message.getFieldWithDefault(msg, 2, ""),
        walletPaymentAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetNewBlockRequest}
 */
proto.tari.rpc.GetNewBlockRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetNewBlockRequest();
  return proto.tari.rpc.GetNewBlockRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetNewBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetNewBlockRequest}
 */
proto.tari.rpc.GetNewBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new block_pb.PowAlgo();
        reader.readMessage(value, block_pb.PowAlgo.deserializeBinaryFromReader);
        msg.setPow(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setCoinbaseExtra(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setWalletPaymentAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetNewBlockRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetNewBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetNewBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetNewBlockRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPow();
  if (f != null) {
    writer.writeMessage(1, f, block_pb.PowAlgo.serializeBinaryToWriter);
  }
  f = message.getCoinbaseExtra();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getWalletPaymentAddress();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional PowAlgo pow = 1;
 * @return {?proto.tari.rpc.PowAlgo}
 */
proto.tari.rpc.GetNewBlockRequest.prototype.getPow = function () {
  return /** @type{?proto.tari.rpc.PowAlgo} */ (jspb.Message.getWrapperField(this, block_pb.PowAlgo, 1));
};

/**
 * @param {?proto.tari.rpc.PowAlgo|undefined} value
 * @return {!proto.tari.rpc.GetNewBlockRequest} returns this
 */
proto.tari.rpc.GetNewBlockRequest.prototype.setPow = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.GetNewBlockRequest} returns this
 */
proto.tari.rpc.GetNewBlockRequest.prototype.clearPow = function () {
  return this.setPow(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.GetNewBlockRequest.prototype.hasPow = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string coinbase_extra = 2;
 * @return {string}
 */
proto.tari.rpc.GetNewBlockRequest.prototype.getCoinbaseExtra = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.GetNewBlockRequest} returns this
 */
proto.tari.rpc.GetNewBlockRequest.prototype.setCoinbaseExtra = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string wallet_payment_address = 3;
 * @return {string}
 */
proto.tari.rpc.GetNewBlockRequest.prototype.getWalletPaymentAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.GetNewBlockRequest} returns this
 */
proto.tari.rpc.GetNewBlockRequest.prototype.setWalletPaymentAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetNewBlockResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetNewBlockResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetNewBlockResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetNewBlockResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        block: (f = msg.getBlock()) && base_node_pb.GetNewBlockResult.toObject(includeInstance, f),
        targetDifficulty: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetNewBlockResponse}
 */
proto.tari.rpc.GetNewBlockResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetNewBlockResponse();
  return proto.tari.rpc.GetNewBlockResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetNewBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetNewBlockResponse}
 */
proto.tari.rpc.GetNewBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new base_node_pb.GetNewBlockResult();
        reader.readMessage(value, base_node_pb.GetNewBlockResult.deserializeBinaryFromReader);
        msg.setBlock(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTargetDifficulty(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetNewBlockResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetNewBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetNewBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetNewBlockResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(1, f, base_node_pb.GetNewBlockResult.serializeBinaryToWriter);
  }
  f = message.getTargetDifficulty();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional GetNewBlockResult block = 1;
 * @return {?proto.tari.rpc.GetNewBlockResult}
 */
proto.tari.rpc.GetNewBlockResponse.prototype.getBlock = function () {
  return /** @type{?proto.tari.rpc.GetNewBlockResult} */ (
    jspb.Message.getWrapperField(this, base_node_pb.GetNewBlockResult, 1)
  );
};

/**
 * @param {?proto.tari.rpc.GetNewBlockResult|undefined} value
 * @return {!proto.tari.rpc.GetNewBlockResponse} returns this
 */
proto.tari.rpc.GetNewBlockResponse.prototype.setBlock = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.GetNewBlockResponse} returns this
 */
proto.tari.rpc.GetNewBlockResponse.prototype.clearBlock = function () {
  return this.setBlock(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.GetNewBlockResponse.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional uint64 target_difficulty = 2;
 * @return {number}
 */
proto.tari.rpc.GetNewBlockResponse.prototype.getTargetDifficulty = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.GetNewBlockResponse} returns this
 */
proto.tari.rpc.GetNewBlockResponse.prototype.setTargetDifficulty = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.SubmitBlockRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.SubmitBlockRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.SubmitBlockRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.SubmitBlockRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        block: (f = msg.getBlock()) && block_pb.Block.toObject(includeInstance, f),
        walletPaymentAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.SubmitBlockRequest}
 */
proto.tari.rpc.SubmitBlockRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.SubmitBlockRequest();
  return proto.tari.rpc.SubmitBlockRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.SubmitBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.SubmitBlockRequest}
 */
proto.tari.rpc.SubmitBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new block_pb.Block();
        reader.readMessage(value, block_pb.Block.deserializeBinaryFromReader);
        msg.setBlock(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setWalletPaymentAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.SubmitBlockRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.SubmitBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.SubmitBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.SubmitBlockRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(1, f, block_pb.Block.serializeBinaryToWriter);
  }
  f = message.getWalletPaymentAddress();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional Block block = 1;
 * @return {?proto.tari.rpc.Block}
 */
proto.tari.rpc.SubmitBlockRequest.prototype.getBlock = function () {
  return /** @type{?proto.tari.rpc.Block} */ (jspb.Message.getWrapperField(this, block_pb.Block, 1));
};

/**
 * @param {?proto.tari.rpc.Block|undefined} value
 * @return {!proto.tari.rpc.SubmitBlockRequest} returns this
 */
proto.tari.rpc.SubmitBlockRequest.prototype.setBlock = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.SubmitBlockRequest} returns this
 */
proto.tari.rpc.SubmitBlockRequest.prototype.clearBlock = function () {
  return this.setBlock(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.SubmitBlockRequest.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string wallet_payment_address = 2;
 * @return {string}
 */
proto.tari.rpc.SubmitBlockRequest.prototype.getWalletPaymentAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.SubmitBlockRequest} returns this
 */
proto.tari.rpc.SubmitBlockRequest.prototype.setWalletPaymentAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

goog.object.extend(exports, proto.tari.rpc);
