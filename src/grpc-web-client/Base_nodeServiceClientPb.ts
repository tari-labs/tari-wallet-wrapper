/**
 * @fileoverview gRPC-Web generated client stub for tari.rpc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: base_node.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from "grpc-web";

import * as block_pb from "./block_pb"; // proto import: "block.proto"
import * as base_node_pb from "./base_node_pb"; // proto import: "base_node.proto"
import * as types_pb from "./types_pb"; // proto import: "types.proto"
import * as network_pb from "./network_pb"; // proto import: "network.proto"

export class BaseNodeClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any },
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "binary";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorListHeaders = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/ListHeaders",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.ListHeadersRequest,
    base_node_pb.BlockHeaderResponse,
    (request: base_node_pb.ListHeadersRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.BlockHeaderResponse.deserializeBinary,
  );

  listHeaders(
    request: base_node_pb.ListHeadersRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.BlockHeaderResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/ListHeaders",
      request,
      metadata || {},
      this.methodDescriptorListHeaders,
    );
  }

  methodDescriptorGetHeaderByHash = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetHeaderByHash",
    grpcWeb.MethodType.UNARY,
    base_node_pb.GetHeaderByHashRequest,
    base_node_pb.BlockHeaderResponse,
    (request: base_node_pb.GetHeaderByHashRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.BlockHeaderResponse.deserializeBinary,
  );

  getHeaderByHash(
    request: base_node_pb.GetHeaderByHashRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.BlockHeaderResponse>;

  getHeaderByHash(
    request: base_node_pb.GetHeaderByHashRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.BlockHeaderResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.BlockHeaderResponse>;

  getHeaderByHash(
    request: base_node_pb.GetHeaderByHashRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.BlockHeaderResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetHeaderByHash",
        request,
        metadata || {},
        this.methodDescriptorGetHeaderByHash,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetHeaderByHash",
      request,
      metadata || {},
      this.methodDescriptorGetHeaderByHash,
    );
  }

  methodDescriptorGetBlocks = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetBlocks",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.GetBlocksRequest,
    block_pb.HistoricalBlock,
    (request: base_node_pb.GetBlocksRequest) => {
      return request.serializeBinary();
    },
    block_pb.HistoricalBlock.deserializeBinary,
  );

  getBlocks(
    request: base_node_pb.GetBlocksRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<block_pb.HistoricalBlock> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/GetBlocks",
      request,
      metadata || {},
      this.methodDescriptorGetBlocks,
    );
  }

  methodDescriptorGetBlockTiming = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetBlockTiming",
    grpcWeb.MethodType.UNARY,
    base_node_pb.HeightRequest,
    base_node_pb.BlockTimingResponse,
    (request: base_node_pb.HeightRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.BlockTimingResponse.deserializeBinary,
  );

  getBlockTiming(
    request: base_node_pb.HeightRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.BlockTimingResponse>;

  getBlockTiming(
    request: base_node_pb.HeightRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.BlockTimingResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.BlockTimingResponse>;

  getBlockTiming(
    request: base_node_pb.HeightRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.BlockTimingResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetBlockTiming",
        request,
        metadata || {},
        this.methodDescriptorGetBlockTiming,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetBlockTiming",
      request,
      metadata || {},
      this.methodDescriptorGetBlockTiming,
    );
  }

  methodDescriptorGetConstants = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetConstants",
    grpcWeb.MethodType.UNARY,
    types_pb.BlockHeight,
    types_pb.ConsensusConstants,
    (request: types_pb.BlockHeight) => {
      return request.serializeBinary();
    },
    types_pb.ConsensusConstants.deserializeBinary,
  );

  getConstants(request: types_pb.BlockHeight, metadata?: grpcWeb.Metadata | null): Promise<types_pb.ConsensusConstants>;

  getConstants(
    request: types_pb.BlockHeight,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: types_pb.ConsensusConstants) => void,
  ): grpcWeb.ClientReadableStream<types_pb.ConsensusConstants>;

  getConstants(
    request: types_pb.BlockHeight,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: types_pb.ConsensusConstants) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetConstants",
        request,
        metadata || {},
        this.methodDescriptorGetConstants,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetConstants",
      request,
      metadata || {},
      this.methodDescriptorGetConstants,
    );
  }

  methodDescriptorGetBlockSize = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetBlockSize",
    grpcWeb.MethodType.UNARY,
    base_node_pb.BlockGroupRequest,
    base_node_pb.BlockGroupResponse,
    (request: base_node_pb.BlockGroupRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.BlockGroupResponse.deserializeBinary,
  );

  getBlockSize(
    request: base_node_pb.BlockGroupRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.BlockGroupResponse>;

  getBlockSize(
    request: base_node_pb.BlockGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.BlockGroupResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.BlockGroupResponse>;

  getBlockSize(
    request: base_node_pb.BlockGroupRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.BlockGroupResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetBlockSize",
        request,
        metadata || {},
        this.methodDescriptorGetBlockSize,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetBlockSize",
      request,
      metadata || {},
      this.methodDescriptorGetBlockSize,
    );
  }

  methodDescriptorGetBlockFees = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetBlockFees",
    grpcWeb.MethodType.UNARY,
    base_node_pb.BlockGroupRequest,
    base_node_pb.BlockGroupResponse,
    (request: base_node_pb.BlockGroupRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.BlockGroupResponse.deserializeBinary,
  );

  getBlockFees(
    request: base_node_pb.BlockGroupRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.BlockGroupResponse>;

  getBlockFees(
    request: base_node_pb.BlockGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.BlockGroupResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.BlockGroupResponse>;

  getBlockFees(
    request: base_node_pb.BlockGroupRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.BlockGroupResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetBlockFees",
        request,
        metadata || {},
        this.methodDescriptorGetBlockFees,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetBlockFees",
      request,
      metadata || {},
      this.methodDescriptorGetBlockFees,
    );
  }

  methodDescriptorGetVersion = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetVersion",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    base_node_pb.StringValue,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    base_node_pb.StringValue.deserializeBinary,
  );

  getVersion(request: types_pb.Empty, metadata?: grpcWeb.Metadata | null): Promise<base_node_pb.StringValue>;

  getVersion(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.StringValue) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.StringValue>;

  getVersion(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.StringValue) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetVersion",
        request,
        metadata || {},
        this.methodDescriptorGetVersion,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetVersion",
      request,
      metadata || {},
      this.methodDescriptorGetVersion,
    );
  }

  methodDescriptorCheckForUpdates = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/CheckForUpdates",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    network_pb.SoftwareUpdate,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    network_pb.SoftwareUpdate.deserializeBinary,
  );

  checkForUpdates(request: types_pb.Empty, metadata?: grpcWeb.Metadata | null): Promise<network_pb.SoftwareUpdate>;

  checkForUpdates(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.SoftwareUpdate) => void,
  ): grpcWeb.ClientReadableStream<network_pb.SoftwareUpdate>;

  checkForUpdates(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.SoftwareUpdate) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/CheckForUpdates",
        request,
        metadata || {},
        this.methodDescriptorCheckForUpdates,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/CheckForUpdates",
      request,
      metadata || {},
      this.methodDescriptorCheckForUpdates,
    );
  }

  methodDescriptorGetTokensInCirculation = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetTokensInCirculation",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.GetBlocksRequest,
    base_node_pb.ValueAtHeightResponse,
    (request: base_node_pb.GetBlocksRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.ValueAtHeightResponse.deserializeBinary,
  );

  getTokensInCirculation(
    request: base_node_pb.GetBlocksRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.ValueAtHeightResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/GetTokensInCirculation",
      request,
      metadata || {},
      this.methodDescriptorGetTokensInCirculation,
    );
  }

  methodDescriptorGetNetworkDifficulty = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetNetworkDifficulty",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.HeightRequest,
    base_node_pb.NetworkDifficultyResponse,
    (request: base_node_pb.HeightRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.NetworkDifficultyResponse.deserializeBinary,
  );

  getNetworkDifficulty(
    request: base_node_pb.HeightRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.NetworkDifficultyResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/GetNetworkDifficulty",
      request,
      metadata || {},
      this.methodDescriptorGetNetworkDifficulty,
    );
  }

  methodDescriptorGetNewBlockTemplate = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetNewBlockTemplate",
    grpcWeb.MethodType.UNARY,
    base_node_pb.NewBlockTemplateRequest,
    base_node_pb.NewBlockTemplateResponse,
    (request: base_node_pb.NewBlockTemplateRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.NewBlockTemplateResponse.deserializeBinary,
  );

  getNewBlockTemplate(
    request: base_node_pb.NewBlockTemplateRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.NewBlockTemplateResponse>;

  getNewBlockTemplate(
    request: base_node_pb.NewBlockTemplateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.NewBlockTemplateResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.NewBlockTemplateResponse>;

  getNewBlockTemplate(
    request: base_node_pb.NewBlockTemplateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.NewBlockTemplateResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetNewBlockTemplate",
        request,
        metadata || {},
        this.methodDescriptorGetNewBlockTemplate,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetNewBlockTemplate",
      request,
      metadata || {},
      this.methodDescriptorGetNewBlockTemplate,
    );
  }

  methodDescriptorGetNewBlock = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetNewBlock",
    grpcWeb.MethodType.UNARY,
    block_pb.NewBlockTemplate,
    base_node_pb.GetNewBlockResult,
    (request: block_pb.NewBlockTemplate) => {
      return request.serializeBinary();
    },
    base_node_pb.GetNewBlockResult.deserializeBinary,
  );

  getNewBlock(
    request: block_pb.NewBlockTemplate,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.GetNewBlockResult>;

  getNewBlock(
    request: block_pb.NewBlockTemplate,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.GetNewBlockResult) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetNewBlockResult>;

  getNewBlock(
    request: block_pb.NewBlockTemplate,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.GetNewBlockResult) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetNewBlock",
        request,
        metadata || {},
        this.methodDescriptorGetNewBlock,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetNewBlock",
      request,
      metadata || {},
      this.methodDescriptorGetNewBlock,
    );
  }

  methodDescriptorGetNewBlockWithCoinbases = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetNewBlockWithCoinbases",
    grpcWeb.MethodType.UNARY,
    base_node_pb.GetNewBlockWithCoinbasesRequest,
    base_node_pb.GetNewBlockResult,
    (request: base_node_pb.GetNewBlockWithCoinbasesRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetNewBlockResult.deserializeBinary,
  );

  getNewBlockWithCoinbases(
    request: base_node_pb.GetNewBlockWithCoinbasesRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.GetNewBlockResult>;

  getNewBlockWithCoinbases(
    request: base_node_pb.GetNewBlockWithCoinbasesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.GetNewBlockResult) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetNewBlockResult>;

  getNewBlockWithCoinbases(
    request: base_node_pb.GetNewBlockWithCoinbasesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.GetNewBlockResult) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetNewBlockWithCoinbases",
        request,
        metadata || {},
        this.methodDescriptorGetNewBlockWithCoinbases,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetNewBlockWithCoinbases",
      request,
      metadata || {},
      this.methodDescriptorGetNewBlockWithCoinbases,
    );
  }

  methodDescriptorGetNewBlockTemplateWithCoinbases = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetNewBlockTemplateWithCoinbases",
    grpcWeb.MethodType.UNARY,
    base_node_pb.GetNewBlockTemplateWithCoinbasesRequest,
    base_node_pb.GetNewBlockResult,
    (request: base_node_pb.GetNewBlockTemplateWithCoinbasesRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetNewBlockResult.deserializeBinary,
  );

  getNewBlockTemplateWithCoinbases(
    request: base_node_pb.GetNewBlockTemplateWithCoinbasesRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.GetNewBlockResult>;

  getNewBlockTemplateWithCoinbases(
    request: base_node_pb.GetNewBlockTemplateWithCoinbasesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.GetNewBlockResult) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetNewBlockResult>;

  getNewBlockTemplateWithCoinbases(
    request: base_node_pb.GetNewBlockTemplateWithCoinbasesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.GetNewBlockResult) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetNewBlockTemplateWithCoinbases",
        request,
        metadata || {},
        this.methodDescriptorGetNewBlockTemplateWithCoinbases,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetNewBlockTemplateWithCoinbases",
      request,
      metadata || {},
      this.methodDescriptorGetNewBlockTemplateWithCoinbases,
    );
  }

  methodDescriptorGetNewBlockBlob = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetNewBlockBlob",
    grpcWeb.MethodType.UNARY,
    block_pb.NewBlockTemplate,
    base_node_pb.GetNewBlockBlobResult,
    (request: block_pb.NewBlockTemplate) => {
      return request.serializeBinary();
    },
    base_node_pb.GetNewBlockBlobResult.deserializeBinary,
  );

  getNewBlockBlob(
    request: block_pb.NewBlockTemplate,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.GetNewBlockBlobResult>;

  getNewBlockBlob(
    request: block_pb.NewBlockTemplate,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.GetNewBlockBlobResult) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetNewBlockBlobResult>;

  getNewBlockBlob(
    request: block_pb.NewBlockTemplate,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.GetNewBlockBlobResult) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetNewBlockBlob",
        request,
        metadata || {},
        this.methodDescriptorGetNewBlockBlob,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetNewBlockBlob",
      request,
      metadata || {},
      this.methodDescriptorGetNewBlockBlob,
    );
  }

  methodDescriptorSubmitBlock = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/SubmitBlock",
    grpcWeb.MethodType.UNARY,
    block_pb.Block,
    base_node_pb.SubmitBlockResponse,
    (request: block_pb.Block) => {
      return request.serializeBinary();
    },
    base_node_pb.SubmitBlockResponse.deserializeBinary,
  );

  submitBlock(request: block_pb.Block, metadata?: grpcWeb.Metadata | null): Promise<base_node_pb.SubmitBlockResponse>;

  submitBlock(
    request: block_pb.Block,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.SubmitBlockResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.SubmitBlockResponse>;

  submitBlock(
    request: block_pb.Block,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.SubmitBlockResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/SubmitBlock",
        request,
        metadata || {},
        this.methodDescriptorSubmitBlock,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/SubmitBlock",
      request,
      metadata || {},
      this.methodDescriptorSubmitBlock,
    );
  }

  methodDescriptorSubmitBlockBlob = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/SubmitBlockBlob",
    grpcWeb.MethodType.UNARY,
    base_node_pb.BlockBlobRequest,
    base_node_pb.SubmitBlockResponse,
    (request: base_node_pb.BlockBlobRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.SubmitBlockResponse.deserializeBinary,
  );

  submitBlockBlob(
    request: base_node_pb.BlockBlobRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.SubmitBlockResponse>;

  submitBlockBlob(
    request: base_node_pb.BlockBlobRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.SubmitBlockResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.SubmitBlockResponse>;

  submitBlockBlob(
    request: base_node_pb.BlockBlobRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.SubmitBlockResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/SubmitBlockBlob",
        request,
        metadata || {},
        this.methodDescriptorSubmitBlockBlob,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/SubmitBlockBlob",
      request,
      metadata || {},
      this.methodDescriptorSubmitBlockBlob,
    );
  }

  methodDescriptorSubmitTransaction = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/SubmitTransaction",
    grpcWeb.MethodType.UNARY,
    base_node_pb.SubmitTransactionRequest,
    base_node_pb.SubmitTransactionResponse,
    (request: base_node_pb.SubmitTransactionRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.SubmitTransactionResponse.deserializeBinary,
  );

  submitTransaction(
    request: base_node_pb.SubmitTransactionRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.SubmitTransactionResponse>;

  submitTransaction(
    request: base_node_pb.SubmitTransactionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.SubmitTransactionResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.SubmitTransactionResponse>;

  submitTransaction(
    request: base_node_pb.SubmitTransactionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.SubmitTransactionResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/SubmitTransaction",
        request,
        metadata || {},
        this.methodDescriptorSubmitTransaction,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/SubmitTransaction",
      request,
      metadata || {},
      this.methodDescriptorSubmitTransaction,
    );
  }

  methodDescriptorGetSyncInfo = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetSyncInfo",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    base_node_pb.SyncInfoResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    base_node_pb.SyncInfoResponse.deserializeBinary,
  );

  getSyncInfo(request: types_pb.Empty, metadata?: grpcWeb.Metadata | null): Promise<base_node_pb.SyncInfoResponse>;

  getSyncInfo(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.SyncInfoResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.SyncInfoResponse>;

  getSyncInfo(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.SyncInfoResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetSyncInfo",
        request,
        metadata || {},
        this.methodDescriptorGetSyncInfo,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetSyncInfo",
      request,
      metadata || {},
      this.methodDescriptorGetSyncInfo,
    );
  }

  methodDescriptorGetSyncProgress = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetSyncProgress",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    base_node_pb.SyncProgressResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    base_node_pb.SyncProgressResponse.deserializeBinary,
  );

  getSyncProgress(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.SyncProgressResponse>;

  getSyncProgress(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.SyncProgressResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.SyncProgressResponse>;

  getSyncProgress(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.SyncProgressResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetSyncProgress",
        request,
        metadata || {},
        this.methodDescriptorGetSyncProgress,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetSyncProgress",
      request,
      metadata || {},
      this.methodDescriptorGetSyncProgress,
    );
  }

  methodDescriptorGetTipInfo = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetTipInfo",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    base_node_pb.TipInfoResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    base_node_pb.TipInfoResponse.deserializeBinary,
  );

  getTipInfo(request: types_pb.Empty, metadata?: grpcWeb.Metadata | null): Promise<base_node_pb.TipInfoResponse>;

  getTipInfo(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.TipInfoResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.TipInfoResponse>;

  getTipInfo(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.TipInfoResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetTipInfo",
        request,
        metadata || {},
        this.methodDescriptorGetTipInfo,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetTipInfo",
      request,
      metadata || {},
      this.methodDescriptorGetTipInfo,
    );
  }

  methodDescriptorSearchKernels = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/SearchKernels",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.SearchKernelsRequest,
    block_pb.HistoricalBlock,
    (request: base_node_pb.SearchKernelsRequest) => {
      return request.serializeBinary();
    },
    block_pb.HistoricalBlock.deserializeBinary,
  );

  searchKernels(
    request: base_node_pb.SearchKernelsRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<block_pb.HistoricalBlock> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/SearchKernels",
      request,
      metadata || {},
      this.methodDescriptorSearchKernels,
    );
  }

  methodDescriptorSearchUtxos = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/SearchUtxos",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.SearchUtxosRequest,
    block_pb.HistoricalBlock,
    (request: base_node_pb.SearchUtxosRequest) => {
      return request.serializeBinary();
    },
    block_pb.HistoricalBlock.deserializeBinary,
  );

  searchUtxos(
    request: base_node_pb.SearchUtxosRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<block_pb.HistoricalBlock> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/SearchUtxos",
      request,
      metadata || {},
      this.methodDescriptorSearchUtxos,
    );
  }

  methodDescriptorFetchMatchingUtxos = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/FetchMatchingUtxos",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.FetchMatchingUtxosRequest,
    base_node_pb.FetchMatchingUtxosResponse,
    (request: base_node_pb.FetchMatchingUtxosRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.FetchMatchingUtxosResponse.deserializeBinary,
  );

  fetchMatchingUtxos(
    request: base_node_pb.FetchMatchingUtxosRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.FetchMatchingUtxosResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/FetchMatchingUtxos",
      request,
      metadata || {},
      this.methodDescriptorFetchMatchingUtxos,
    );
  }

  methodDescriptorGetPeers = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetPeers",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.GetPeersRequest,
    base_node_pb.GetPeersResponse,
    (request: base_node_pb.GetPeersRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetPeersResponse.deserializeBinary,
  );

  getPeers(
    request: base_node_pb.GetPeersRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetPeersResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/GetPeers",
      request,
      metadata || {},
      this.methodDescriptorGetPeers,
    );
  }

  methodDescriptorGetMempoolTransactions = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetMempoolTransactions",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.GetMempoolTransactionsRequest,
    base_node_pb.GetMempoolTransactionsResponse,
    (request: base_node_pb.GetMempoolTransactionsRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetMempoolTransactionsResponse.deserializeBinary,
  );

  getMempoolTransactions(
    request: base_node_pb.GetMempoolTransactionsRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetMempoolTransactionsResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/GetMempoolTransactions",
      request,
      metadata || {},
      this.methodDescriptorGetMempoolTransactions,
    );
  }

  methodDescriptorTransactionState = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/TransactionState",
    grpcWeb.MethodType.UNARY,
    base_node_pb.TransactionStateRequest,
    base_node_pb.TransactionStateResponse,
    (request: base_node_pb.TransactionStateRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.TransactionStateResponse.deserializeBinary,
  );

  transactionState(
    request: base_node_pb.TransactionStateRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.TransactionStateResponse>;

  transactionState(
    request: base_node_pb.TransactionStateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.TransactionStateResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.TransactionStateResponse>;

  transactionState(
    request: base_node_pb.TransactionStateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.TransactionStateResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/TransactionState",
        request,
        metadata || {},
        this.methodDescriptorTransactionState,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/TransactionState",
      request,
      metadata || {},
      this.methodDescriptorTransactionState,
    );
  }

  methodDescriptorIdentify = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/Identify",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    network_pb.NodeIdentity,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    network_pb.NodeIdentity.deserializeBinary,
  );

  identify(request: types_pb.Empty, metadata?: grpcWeb.Metadata | null): Promise<network_pb.NodeIdentity>;

  identify(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.NodeIdentity) => void,
  ): grpcWeb.ClientReadableStream<network_pb.NodeIdentity>;

  identify(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.NodeIdentity) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/Identify",
        request,
        metadata || {},
        this.methodDescriptorIdentify,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/Identify",
      request,
      metadata || {},
      this.methodDescriptorIdentify,
    );
  }

  methodDescriptorGetNetworkStatus = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetNetworkStatus",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    network_pb.NetworkStatusResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    network_pb.NetworkStatusResponse.deserializeBinary,
  );

  getNetworkStatus(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<network_pb.NetworkStatusResponse>;

  getNetworkStatus(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.NetworkStatusResponse) => void,
  ): grpcWeb.ClientReadableStream<network_pb.NetworkStatusResponse>;

  getNetworkStatus(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.NetworkStatusResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetNetworkStatus",
        request,
        metadata || {},
        this.methodDescriptorGetNetworkStatus,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetNetworkStatus",
      request,
      metadata || {},
      this.methodDescriptorGetNetworkStatus,
    );
  }

  methodDescriptorListConnectedPeers = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/ListConnectedPeers",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    network_pb.ListConnectedPeersResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    network_pb.ListConnectedPeersResponse.deserializeBinary,
  );

  listConnectedPeers(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<network_pb.ListConnectedPeersResponse>;

  listConnectedPeers(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.ListConnectedPeersResponse) => void,
  ): grpcWeb.ClientReadableStream<network_pb.ListConnectedPeersResponse>;

  listConnectedPeers(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.ListConnectedPeersResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/ListConnectedPeers",
        request,
        metadata || {},
        this.methodDescriptorListConnectedPeers,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/ListConnectedPeers",
      request,
      metadata || {},
      this.methodDescriptorListConnectedPeers,
    );
  }

  methodDescriptorGetMempoolStats = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetMempoolStats",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    base_node_pb.MempoolStatsResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    base_node_pb.MempoolStatsResponse.deserializeBinary,
  );

  getMempoolStats(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.MempoolStatsResponse>;

  getMempoolStats(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.MempoolStatsResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.MempoolStatsResponse>;

  getMempoolStats(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.MempoolStatsResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetMempoolStats",
        request,
        metadata || {},
        this.methodDescriptorGetMempoolStats,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetMempoolStats",
      request,
      metadata || {},
      this.methodDescriptorGetMempoolStats,
    );
  }

  methodDescriptorGetActiveValidatorNodes = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetActiveValidatorNodes",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.GetActiveValidatorNodesRequest,
    base_node_pb.GetActiveValidatorNodesResponse,
    (request: base_node_pb.GetActiveValidatorNodesRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetActiveValidatorNodesResponse.deserializeBinary,
  );

  getActiveValidatorNodes(
    request: base_node_pb.GetActiveValidatorNodesRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetActiveValidatorNodesResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/GetActiveValidatorNodes",
      request,
      metadata || {},
      this.methodDescriptorGetActiveValidatorNodes,
    );
  }

  methodDescriptorGetShardKey = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetShardKey",
    grpcWeb.MethodType.UNARY,
    base_node_pb.GetShardKeyRequest,
    base_node_pb.GetShardKeyResponse,
    (request: base_node_pb.GetShardKeyRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetShardKeyResponse.deserializeBinary,
  );

  getShardKey(
    request: base_node_pb.GetShardKeyRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.GetShardKeyResponse>;

  getShardKey(
    request: base_node_pb.GetShardKeyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.GetShardKeyResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetShardKeyResponse>;

  getShardKey(
    request: base_node_pb.GetShardKeyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.GetShardKeyResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetShardKey",
        request,
        metadata || {},
        this.methodDescriptorGetShardKey,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetShardKey",
      request,
      metadata || {},
      this.methodDescriptorGetShardKey,
    );
  }

  methodDescriptorGetTemplateRegistrations = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetTemplateRegistrations",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.GetTemplateRegistrationsRequest,
    base_node_pb.GetTemplateRegistrationResponse,
    (request: base_node_pb.GetTemplateRegistrationsRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetTemplateRegistrationResponse.deserializeBinary,
  );

  getTemplateRegistrations(
    request: base_node_pb.GetTemplateRegistrationsRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetTemplateRegistrationResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/GetTemplateRegistrations",
      request,
      metadata || {},
      this.methodDescriptorGetTemplateRegistrations,
    );
  }

  methodDescriptorGetSideChainUtxos = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetSideChainUtxos",
    grpcWeb.MethodType.SERVER_STREAMING,
    base_node_pb.GetSideChainUtxosRequest,
    base_node_pb.GetSideChainUtxosResponse,
    (request: base_node_pb.GetSideChainUtxosRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetSideChainUtxosResponse.deserializeBinary,
  );

  getSideChainUtxos(
    request: base_node_pb.GetSideChainUtxosRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetSideChainUtxosResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.BaseNode/GetSideChainUtxos",
      request,
      metadata || {},
      this.methodDescriptorGetSideChainUtxos,
    );
  }

  methodDescriptorGetNetworkState = new grpcWeb.MethodDescriptor(
    "/tari.rpc.BaseNode/GetNetworkState",
    grpcWeb.MethodType.UNARY,
    base_node_pb.GetNetworkStateRequest,
    base_node_pb.GetNetworkStateResponse,
    (request: base_node_pb.GetNetworkStateRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.GetNetworkStateResponse.deserializeBinary,
  );

  getNetworkState(
    request: base_node_pb.GetNetworkStateRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.GetNetworkStateResponse>;

  getNetworkState(
    request: base_node_pb.GetNetworkStateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.GetNetworkStateResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.GetNetworkStateResponse>;

  getNetworkState(
    request: base_node_pb.GetNetworkStateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.GetNetworkStateResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.BaseNode/GetNetworkState",
        request,
        metadata || {},
        this.methodDescriptorGetNetworkState,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.BaseNode/GetNetworkState",
      request,
      metadata || {},
      this.methodDescriptorGetNetworkState,
    );
  }
}
