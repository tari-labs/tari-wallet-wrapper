/**
 * @fileoverview gRPC-Web generated client stub for tari.rpc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: p2pool.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from "grpc-web";

import * as p2pool_pb from "./p2pool_pb"; // proto import: "p2pool.proto"
import * as base_node_pb from "./base_node_pb"; // proto import: "base_node.proto"

export class ShaP2PoolClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any },
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "binary";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetTipInfo = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ShaP2Pool/GetTipInfo",
    grpcWeb.MethodType.UNARY,
    p2pool_pb.GetTipInfoRequest,
    p2pool_pb.GetTipInfoResponse,
    (request: p2pool_pb.GetTipInfoRequest) => {
      return request.serializeBinary();
    },
    p2pool_pb.GetTipInfoResponse.deserializeBinary,
  );

  getTipInfo(
    request: p2pool_pb.GetTipInfoRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<p2pool_pb.GetTipInfoResponse>;

  getTipInfo(
    request: p2pool_pb.GetTipInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: p2pool_pb.GetTipInfoResponse) => void,
  ): grpcWeb.ClientReadableStream<p2pool_pb.GetTipInfoResponse>;

  getTipInfo(
    request: p2pool_pb.GetTipInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: p2pool_pb.GetTipInfoResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ShaP2Pool/GetTipInfo",
        request,
        metadata || {},
        this.methodDescriptorGetTipInfo,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ShaP2Pool/GetTipInfo",
      request,
      metadata || {},
      this.methodDescriptorGetTipInfo,
    );
  }

  methodDescriptorGetNewBlock = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ShaP2Pool/GetNewBlock",
    grpcWeb.MethodType.UNARY,
    p2pool_pb.GetNewBlockRequest,
    p2pool_pb.GetNewBlockResponse,
    (request: p2pool_pb.GetNewBlockRequest) => {
      return request.serializeBinary();
    },
    p2pool_pb.GetNewBlockResponse.deserializeBinary,
  );

  getNewBlock(
    request: p2pool_pb.GetNewBlockRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<p2pool_pb.GetNewBlockResponse>;

  getNewBlock(
    request: p2pool_pb.GetNewBlockRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: p2pool_pb.GetNewBlockResponse) => void,
  ): grpcWeb.ClientReadableStream<p2pool_pb.GetNewBlockResponse>;

  getNewBlock(
    request: p2pool_pb.GetNewBlockRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: p2pool_pb.GetNewBlockResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ShaP2Pool/GetNewBlock",
        request,
        metadata || {},
        this.methodDescriptorGetNewBlock,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ShaP2Pool/GetNewBlock",
      request,
      metadata || {},
      this.methodDescriptorGetNewBlock,
    );
  }

  methodDescriptorSubmitBlock = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ShaP2Pool/SubmitBlock",
    grpcWeb.MethodType.UNARY,
    p2pool_pb.SubmitBlockRequest,
    base_node_pb.SubmitBlockResponse,
    (request: p2pool_pb.SubmitBlockRequest) => {
      return request.serializeBinary();
    },
    base_node_pb.SubmitBlockResponse.deserializeBinary,
  );

  submitBlock(
    request: p2pool_pb.SubmitBlockRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<base_node_pb.SubmitBlockResponse>;

  submitBlock(
    request: p2pool_pb.SubmitBlockRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: base_node_pb.SubmitBlockResponse) => void,
  ): grpcWeb.ClientReadableStream<base_node_pb.SubmitBlockResponse>;

  submitBlock(
    request: p2pool_pb.SubmitBlockRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: base_node_pb.SubmitBlockResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ShaP2Pool/SubmitBlock",
        request,
        metadata || {},
        this.methodDescriptorSubmitBlock,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ShaP2Pool/SubmitBlock",
      request,
      metadata || {},
      this.methodDescriptorSubmitBlock,
    );
  }
}
