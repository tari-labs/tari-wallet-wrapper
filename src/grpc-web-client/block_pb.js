// source: block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

var transaction_pb = require("./transaction_pb.js");
goog.object.extend(proto, transaction_pb);
goog.exportSymbol("proto.tari.rpc.Block", null, global);
goog.exportSymbol("proto.tari.rpc.BlockHeader", null, global);
goog.exportSymbol("proto.tari.rpc.HistoricalBlock", null, global);
goog.exportSymbol("proto.tari.rpc.NewBlockHeaderTemplate", null, global);
goog.exportSymbol("proto.tari.rpc.NewBlockTemplate", null, global);
goog.exportSymbol("proto.tari.rpc.PowAlgo", null, global);
goog.exportSymbol("proto.tari.rpc.PowAlgo.PowAlgos", null, global);
goog.exportSymbol("proto.tari.rpc.ProofOfWork", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.BlockHeader = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.BlockHeader.displayName = "proto.tari.rpc.BlockHeader";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.ProofOfWork = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.ProofOfWork, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.ProofOfWork.displayName = "proto.tari.rpc.ProofOfWork";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.PowAlgo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.PowAlgo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.PowAlgo.displayName = "proto.tari.rpc.PowAlgo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.Block = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.Block.displayName = "proto.tari.rpc.Block";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.HistoricalBlock = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.HistoricalBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.HistoricalBlock.displayName = "proto.tari.rpc.HistoricalBlock";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.NewBlockHeaderTemplate = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.NewBlockHeaderTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.NewBlockHeaderTemplate.displayName = "proto.tari.rpc.NewBlockHeaderTemplate";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.NewBlockTemplate = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.NewBlockTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.NewBlockTemplate.displayName = "proto.tari.rpc.NewBlockTemplate";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.BlockHeader.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.BlockHeader.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.BlockHeader} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.BlockHeader.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        hash: msg.getHash_asB64(),
        version: jspb.Message.getFieldWithDefault(msg, 2, 0),
        height: jspb.Message.getFieldWithDefault(msg, 3, 0),
        prevHash: msg.getPrevHash_asB64(),
        timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
        outputMr: msg.getOutputMr_asB64(),
        blockOutputMr: msg.getBlockOutputMr_asB64(),
        kernelMr: msg.getKernelMr_asB64(),
        inputMr: msg.getInputMr_asB64(),
        totalKernelOffset: msg.getTotalKernelOffset_asB64(),
        nonce: jspb.Message.getFieldWithDefault(msg, 11, 0),
        pow: (f = msg.getPow()) && proto.tari.rpc.ProofOfWork.toObject(includeInstance, f),
        kernelMmrSize: jspb.Message.getFieldWithDefault(msg, 13, 0),
        outputMmrSize: jspb.Message.getFieldWithDefault(msg, 14, 0),
        totalScriptOffset: msg.getTotalScriptOffset_asB64(),
        validatorNodeMr: msg.getValidatorNodeMr_asB64(),
        validatorNodeSize: jspb.Message.getFieldWithDefault(msg, 17, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.BlockHeader}
 */
proto.tari.rpc.BlockHeader.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.BlockHeader();
  return proto.tari.rpc.BlockHeader.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.BlockHeader}
 */
proto.tari.rpc.BlockHeader.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVersion(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPrevHash(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTimestamp(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setOutputMr(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBlockOutputMr(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setKernelMr(value);
        break;
      case 9:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setInputMr(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTotalKernelOffset(value);
        break;
      case 11:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNonce(value);
        break;
      case 12:
        var value = new proto.tari.rpc.ProofOfWork();
        reader.readMessage(value, proto.tari.rpc.ProofOfWork.deserializeBinaryFromReader);
        msg.setPow(value);
        break;
      case 13:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setKernelMmrSize(value);
        break;
      case 14:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setOutputMmrSize(value);
        break;
      case 15:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTotalScriptOffset(value);
        break;
      case 16:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValidatorNodeMr(value);
        break;
      case 17:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setValidatorNodeSize(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.BlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.BlockHeader.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getPrevHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getOutputMr_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getBlockOutputMr_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
  f = message.getKernelMr_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = message.getInputMr_asU8();
  if (f.length > 0) {
    writer.writeBytes(9, f);
  }
  f = message.getTotalKernelOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(11, f);
  }
  f = message.getPow();
  if (f != null) {
    writer.writeMessage(12, f, proto.tari.rpc.ProofOfWork.serializeBinaryToWriter);
  }
  f = message.getKernelMmrSize();
  if (f !== 0) {
    writer.writeUint64(13, f);
  }
  f = message.getOutputMmrSize();
  if (f !== 0) {
    writer.writeUint64(14, f);
  }
  f = message.getTotalScriptOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(15, f);
  }
  f = message.getValidatorNodeMr_asU8();
  if (f.length > 0) {
    writer.writeBytes(16, f);
  }
  f = message.getValidatorNodeSize();
  if (f !== 0) {
    writer.writeUint64(17, f);
  }
};

/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional uint32 version = 2;
 * @return {number}
 */
proto.tari.rpc.BlockHeader.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 height = 3;
 * @return {number}
 */
proto.tari.rpc.BlockHeader.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes prev_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getPrevHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes prev_hash = 4;
 * This is a type-conversion wrapper around `getPrevHash()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getPrevHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPrevHash()));
};

/**
 * optional bytes prev_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getPrevHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPrevHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setPrevHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.tari.rpc.BlockHeader.prototype.getTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional bytes output_mr = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getOutputMr = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/**
 * optional bytes output_mr = 6;
 * This is a type-conversion wrapper around `getOutputMr()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getOutputMr_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOutputMr()));
};

/**
 * optional bytes output_mr = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputMr()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getOutputMr_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOutputMr()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setOutputMr = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * optional bytes block_output_mr = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getBlockOutputMr = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * optional bytes block_output_mr = 7;
 * This is a type-conversion wrapper around `getBlockOutputMr()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getBlockOutputMr_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockOutputMr()));
};

/**
 * optional bytes block_output_mr = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockOutputMr()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getBlockOutputMr_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockOutputMr()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setBlockOutputMr = function (value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};

/**
 * optional bytes kernel_mr = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getKernelMr = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/**
 * optional bytes kernel_mr = 8;
 * This is a type-conversion wrapper around `getKernelMr()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getKernelMr_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getKernelMr()));
};

/**
 * optional bytes kernel_mr = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKernelMr()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getKernelMr_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getKernelMr()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setKernelMr = function (value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};

/**
 * optional bytes input_mr = 9;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getInputMr = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};

/**
 * optional bytes input_mr = 9;
 * This is a type-conversion wrapper around `getInputMr()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getInputMr_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getInputMr()));
};

/**
 * optional bytes input_mr = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputMr()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getInputMr_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getInputMr()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setInputMr = function (value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};

/**
 * optional bytes total_kernel_offset = 10;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getTotalKernelOffset = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};

/**
 * optional bytes total_kernel_offset = 10;
 * This is a type-conversion wrapper around `getTotalKernelOffset()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getTotalKernelOffset_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTotalKernelOffset()));
};

/**
 * optional bytes total_kernel_offset = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalKernelOffset()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getTotalKernelOffset_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTotalKernelOffset()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setTotalKernelOffset = function (value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};

/**
 * optional uint64 nonce = 11;
 * @return {number}
 */
proto.tari.rpc.BlockHeader.prototype.getNonce = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setNonce = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional ProofOfWork pow = 12;
 * @return {?proto.tari.rpc.ProofOfWork}
 */
proto.tari.rpc.BlockHeader.prototype.getPow = function () {
  return /** @type{?proto.tari.rpc.ProofOfWork} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.ProofOfWork, 12));
};

/**
 * @param {?proto.tari.rpc.ProofOfWork|undefined} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setPow = function (value) {
  return jspb.Message.setWrapperField(this, 12, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.clearPow = function () {
  return this.setPow(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.BlockHeader.prototype.hasPow = function () {
  return jspb.Message.getField(this, 12) != null;
};

/**
 * optional uint64 kernel_mmr_size = 13;
 * @return {number}
 */
proto.tari.rpc.BlockHeader.prototype.getKernelMmrSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setKernelMmrSize = function (value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};

/**
 * optional uint64 output_mmr_size = 14;
 * @return {number}
 */
proto.tari.rpc.BlockHeader.prototype.getOutputMmrSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setOutputMmrSize = function (value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};

/**
 * optional bytes total_script_offset = 15;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getTotalScriptOffset = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};

/**
 * optional bytes total_script_offset = 15;
 * This is a type-conversion wrapper around `getTotalScriptOffset()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getTotalScriptOffset_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTotalScriptOffset()));
};

/**
 * optional bytes total_script_offset = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalScriptOffset()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getTotalScriptOffset_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTotalScriptOffset()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setTotalScriptOffset = function (value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};

/**
 * optional bytes validator_node_mr = 16;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.BlockHeader.prototype.getValidatorNodeMr = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};

/**
 * optional bytes validator_node_mr = 16;
 * This is a type-conversion wrapper around `getValidatorNodeMr()`
 * @return {string}
 */
proto.tari.rpc.BlockHeader.prototype.getValidatorNodeMr_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValidatorNodeMr()));
};

/**
 * optional bytes validator_node_mr = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorNodeMr()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeader.prototype.getValidatorNodeMr_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValidatorNodeMr()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setValidatorNodeMr = function (value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};

/**
 * optional uint64 validator_node_size = 17;
 * @return {number}
 */
proto.tari.rpc.BlockHeader.prototype.getValidatorNodeSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.BlockHeader} returns this
 */
proto.tari.rpc.BlockHeader.prototype.setValidatorNodeSize = function (value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.ProofOfWork.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.ProofOfWork.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.ProofOfWork} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.ProofOfWork.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        powAlgo: jspb.Message.getFieldWithDefault(msg, 1, 0),
        powData: msg.getPowData_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.ProofOfWork}
 */
proto.tari.rpc.ProofOfWork.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.ProofOfWork();
  return proto.tari.rpc.ProofOfWork.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.ProofOfWork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.ProofOfWork}
 */
proto.tari.rpc.ProofOfWork.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setPowAlgo(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPowData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.ProofOfWork.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.ProofOfWork.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.ProofOfWork} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.ProofOfWork.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPowAlgo();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getPowData_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional uint64 pow_algo = 1;
 * @return {number}
 */
proto.tari.rpc.ProofOfWork.prototype.getPowAlgo = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ProofOfWork} returns this
 */
proto.tari.rpc.ProofOfWork.prototype.setPowAlgo = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes pow_data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.ProofOfWork.prototype.getPowData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes pow_data = 4;
 * This is a type-conversion wrapper around `getPowData()`
 * @return {string}
 */
proto.tari.rpc.ProofOfWork.prototype.getPowData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPowData()));
};

/**
 * optional bytes pow_data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPowData()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.ProofOfWork.prototype.getPowData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPowData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.ProofOfWork} returns this
 */
proto.tari.rpc.ProofOfWork.prototype.setPowData = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.PowAlgo.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.PowAlgo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.PowAlgo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.PowAlgo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        powAlgo: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.PowAlgo}
 */
proto.tari.rpc.PowAlgo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.PowAlgo();
  return proto.tari.rpc.PowAlgo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.PowAlgo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.PowAlgo}
 */
proto.tari.rpc.PowAlgo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.tari.rpc.PowAlgo.PowAlgos} */ (reader.readEnum());
        msg.setPowAlgo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.PowAlgo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.PowAlgo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.PowAlgo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.PowAlgo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPowAlgo();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
};

/**
 * @enum {number}
 */
proto.tari.rpc.PowAlgo.PowAlgos = {
  POW_ALGOS_RANDOMX: 0,
  POW_ALGOS_SHA3X: 1,
};

/**
 * optional PowAlgos pow_algo = 1;
 * @return {!proto.tari.rpc.PowAlgo.PowAlgos}
 */
proto.tari.rpc.PowAlgo.prototype.getPowAlgo = function () {
  return /** @type {!proto.tari.rpc.PowAlgo.PowAlgos} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.tari.rpc.PowAlgo.PowAlgos} value
 * @return {!proto.tari.rpc.PowAlgo} returns this
 */
proto.tari.rpc.PowAlgo.prototype.setPowAlgo = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.Block.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.Block.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.Block} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.Block.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        header: (f = msg.getHeader()) && proto.tari.rpc.BlockHeader.toObject(includeInstance, f),
        body: (f = msg.getBody()) && transaction_pb.AggregateBody.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.Block}
 */
proto.tari.rpc.Block.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.Block();
  return proto.tari.rpc.Block.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.Block}
 */
proto.tari.rpc.Block.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.BlockHeader();
        reader.readMessage(value, proto.tari.rpc.BlockHeader.deserializeBinaryFromReader);
        msg.setHeader(value);
        break;
      case 2:
        var value = new transaction_pb.AggregateBody();
        reader.readMessage(value, transaction_pb.AggregateBody.deserializeBinaryFromReader);
        msg.setBody(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.Block.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.Block.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(1, f, proto.tari.rpc.BlockHeader.serializeBinaryToWriter);
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(2, f, transaction_pb.AggregateBody.serializeBinaryToWriter);
  }
};

/**
 * optional BlockHeader header = 1;
 * @return {?proto.tari.rpc.BlockHeader}
 */
proto.tari.rpc.Block.prototype.getHeader = function () {
  return /** @type{?proto.tari.rpc.BlockHeader} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.BlockHeader, 1));
};

/**
 * @param {?proto.tari.rpc.BlockHeader|undefined} value
 * @return {!proto.tari.rpc.Block} returns this
 */
proto.tari.rpc.Block.prototype.setHeader = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.Block} returns this
 */
proto.tari.rpc.Block.prototype.clearHeader = function () {
  return this.setHeader(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.Block.prototype.hasHeader = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional AggregateBody body = 2;
 * @return {?proto.tari.rpc.AggregateBody}
 */
proto.tari.rpc.Block.prototype.getBody = function () {
  return /** @type{?proto.tari.rpc.AggregateBody} */ (
    jspb.Message.getWrapperField(this, transaction_pb.AggregateBody, 2)
  );
};

/**
 * @param {?proto.tari.rpc.AggregateBody|undefined} value
 * @return {!proto.tari.rpc.Block} returns this
 */
proto.tari.rpc.Block.prototype.setBody = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.Block} returns this
 */
proto.tari.rpc.Block.prototype.clearBody = function () {
  return this.setBody(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.Block.prototype.hasBody = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.HistoricalBlock.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.HistoricalBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.HistoricalBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.HistoricalBlock.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        confirmations: jspb.Message.getFieldWithDefault(msg, 1, 0),
        block: (f = msg.getBlock()) && proto.tari.rpc.Block.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.HistoricalBlock}
 */
proto.tari.rpc.HistoricalBlock.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.HistoricalBlock();
  return proto.tari.rpc.HistoricalBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.HistoricalBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.HistoricalBlock}
 */
proto.tari.rpc.HistoricalBlock.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setConfirmations(value);
        break;
      case 2:
        var value = new proto.tari.rpc.Block();
        reader.readMessage(value, proto.tari.rpc.Block.deserializeBinaryFromReader);
        msg.setBlock(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.HistoricalBlock.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.HistoricalBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.HistoricalBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.HistoricalBlock.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(2, f, proto.tari.rpc.Block.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 confirmations = 1;
 * @return {number}
 */
proto.tari.rpc.HistoricalBlock.prototype.getConfirmations = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.HistoricalBlock} returns this
 */
proto.tari.rpc.HistoricalBlock.prototype.setConfirmations = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional Block block = 2;
 * @return {?proto.tari.rpc.Block}
 */
proto.tari.rpc.HistoricalBlock.prototype.getBlock = function () {
  return /** @type{?proto.tari.rpc.Block} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.Block, 2));
};

/**
 * @param {?proto.tari.rpc.Block|undefined} value
 * @return {!proto.tari.rpc.HistoricalBlock} returns this
 */
proto.tari.rpc.HistoricalBlock.prototype.setBlock = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.HistoricalBlock} returns this
 */
proto.tari.rpc.HistoricalBlock.prototype.clearBlock = function () {
  return this.setBlock(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.HistoricalBlock.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.NewBlockHeaderTemplate.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.NewBlockHeaderTemplate.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.NewBlockHeaderTemplate} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.NewBlockHeaderTemplate.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        version: jspb.Message.getFieldWithDefault(msg, 1, 0),
        height: jspb.Message.getFieldWithDefault(msg, 2, 0),
        prevHash: msg.getPrevHash_asB64(),
        totalKernelOffset: msg.getTotalKernelOffset_asB64(),
        pow: (f = msg.getPow()) && proto.tari.rpc.ProofOfWork.toObject(includeInstance, f),
        totalScriptOffset: msg.getTotalScriptOffset_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate}
 */
proto.tari.rpc.NewBlockHeaderTemplate.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.NewBlockHeaderTemplate();
  return proto.tari.rpc.NewBlockHeaderTemplate.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.NewBlockHeaderTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate}
 */
proto.tari.rpc.NewBlockHeaderTemplate.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPrevHash(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTotalKernelOffset(value);
        break;
      case 5:
        var value = new proto.tari.rpc.ProofOfWork();
        reader.readMessage(value, proto.tari.rpc.ProofOfWork.deserializeBinaryFromReader);
        msg.setPow(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTotalScriptOffset(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.NewBlockHeaderTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.NewBlockHeaderTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.NewBlockHeaderTemplate.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getPrevHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getTotalKernelOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getPow();
  if (f != null) {
    writer.writeMessage(5, f, proto.tari.rpc.ProofOfWork.serializeBinaryToWriter);
  }
  f = message.getTotalScriptOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
};

/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate} returns this
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate} returns this
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.setHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional bytes prev_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getPrevHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes prev_hash = 3;
 * This is a type-conversion wrapper around `getPrevHash()`
 * @return {string}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getPrevHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPrevHash()));
};

/**
 * optional bytes prev_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getPrevHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPrevHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate} returns this
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.setPrevHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes total_kernel_offset = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getTotalKernelOffset = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes total_kernel_offset = 4;
 * This is a type-conversion wrapper around `getTotalKernelOffset()`
 * @return {string}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getTotalKernelOffset_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTotalKernelOffset()));
};

/**
 * optional bytes total_kernel_offset = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalKernelOffset()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getTotalKernelOffset_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTotalKernelOffset()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate} returns this
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.setTotalKernelOffset = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional ProofOfWork pow = 5;
 * @return {?proto.tari.rpc.ProofOfWork}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getPow = function () {
  return /** @type{?proto.tari.rpc.ProofOfWork} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.ProofOfWork, 5));
};

/**
 * @param {?proto.tari.rpc.ProofOfWork|undefined} value
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate} returns this
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.setPow = function (value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate} returns this
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.clearPow = function () {
  return this.setPow(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.hasPow = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional bytes total_script_offset = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getTotalScriptOffset = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * optional bytes total_script_offset = 7;
 * This is a type-conversion wrapper around `getTotalScriptOffset()`
 * @return {string}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getTotalScriptOffset_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTotalScriptOffset()));
};

/**
 * optional bytes total_script_offset = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalScriptOffset()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.getTotalScriptOffset_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTotalScriptOffset()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.NewBlockHeaderTemplate} returns this
 */
proto.tari.rpc.NewBlockHeaderTemplate.prototype.setTotalScriptOffset = function (value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.NewBlockTemplate.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.NewBlockTemplate.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.NewBlockTemplate} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.NewBlockTemplate.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        header: (f = msg.getHeader()) && proto.tari.rpc.NewBlockHeaderTemplate.toObject(includeInstance, f),
        body: (f = msg.getBody()) && transaction_pb.AggregateBody.toObject(includeInstance, f),
        isMempoolInSync: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.NewBlockTemplate}
 */
proto.tari.rpc.NewBlockTemplate.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.NewBlockTemplate();
  return proto.tari.rpc.NewBlockTemplate.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.NewBlockTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.NewBlockTemplate}
 */
proto.tari.rpc.NewBlockTemplate.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.NewBlockHeaderTemplate();
        reader.readMessage(value, proto.tari.rpc.NewBlockHeaderTemplate.deserializeBinaryFromReader);
        msg.setHeader(value);
        break;
      case 2:
        var value = new transaction_pb.AggregateBody();
        reader.readMessage(value, transaction_pb.AggregateBody.deserializeBinaryFromReader);
        msg.setBody(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsMempoolInSync(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.NewBlockTemplate.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.NewBlockTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.NewBlockTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.NewBlockTemplate.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(1, f, proto.tari.rpc.NewBlockHeaderTemplate.serializeBinaryToWriter);
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(2, f, transaction_pb.AggregateBody.serializeBinaryToWriter);
  }
  f = message.getIsMempoolInSync();
  if (f) {
    writer.writeBool(3, f);
  }
};

/**
 * optional NewBlockHeaderTemplate header = 1;
 * @return {?proto.tari.rpc.NewBlockHeaderTemplate}
 */
proto.tari.rpc.NewBlockTemplate.prototype.getHeader = function () {
  return /** @type{?proto.tari.rpc.NewBlockHeaderTemplate} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.NewBlockHeaderTemplate, 1)
  );
};

/**
 * @param {?proto.tari.rpc.NewBlockHeaderTemplate|undefined} value
 * @return {!proto.tari.rpc.NewBlockTemplate} returns this
 */
proto.tari.rpc.NewBlockTemplate.prototype.setHeader = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.NewBlockTemplate} returns this
 */
proto.tari.rpc.NewBlockTemplate.prototype.clearHeader = function () {
  return this.setHeader(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.NewBlockTemplate.prototype.hasHeader = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional AggregateBody body = 2;
 * @return {?proto.tari.rpc.AggregateBody}
 */
proto.tari.rpc.NewBlockTemplate.prototype.getBody = function () {
  return /** @type{?proto.tari.rpc.AggregateBody} */ (
    jspb.Message.getWrapperField(this, transaction_pb.AggregateBody, 2)
  );
};

/**
 * @param {?proto.tari.rpc.AggregateBody|undefined} value
 * @return {!proto.tari.rpc.NewBlockTemplate} returns this
 */
proto.tari.rpc.NewBlockTemplate.prototype.setBody = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.NewBlockTemplate} returns this
 */
proto.tari.rpc.NewBlockTemplate.prototype.clearBody = function () {
  return this.setBody(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.NewBlockTemplate.prototype.hasBody = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional bool is_mempool_in_sync = 3;
 * @return {boolean}
 */
proto.tari.rpc.NewBlockTemplate.prototype.getIsMempoolInSync = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.tari.rpc.NewBlockTemplate} returns this
 */
proto.tari.rpc.NewBlockTemplate.prototype.setIsMempoolInSync = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

goog.object.extend(exports, proto.tari.rpc);
