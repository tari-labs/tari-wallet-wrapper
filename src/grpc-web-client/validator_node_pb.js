// source: validator_node.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

var types_pb = require("./types_pb.js");
goog.object.extend(proto, types_pb);
var network_pb = require("./network_pb.js");
goog.object.extend(proto, network_pb);
var transaction_pb = require("./transaction_pb.js");
goog.object.extend(proto, transaction_pb);
goog.exportSymbol("proto.tari.rpc.Authority", null, global);
goog.exportSymbol("proto.tari.rpc.GetConstitutionRequestsRequest", null, global);
goog.exportSymbol("proto.tari.rpc.GetMetadataRequest", null, global);
goog.exportSymbol("proto.tari.rpc.GetMetadataResponse", null, global);
goog.exportSymbol("proto.tari.rpc.GetTokenDataRequest", null, global);
goog.exportSymbol("proto.tari.rpc.GetTokenDataResponse", null, global);
goog.exportSymbol("proto.tari.rpc.InvokeMethodRequest", null, global);
goog.exportSymbol("proto.tari.rpc.InvokeMethodResponse", null, global);
goog.exportSymbol("proto.tari.rpc.InvokeReadMethodRequest", null, global);
goog.exportSymbol("proto.tari.rpc.InvokeReadMethodResponse", null, global);
goog.exportSymbol("proto.tari.rpc.PublishContractAcceptanceRequest", null, global);
goog.exportSymbol("proto.tari.rpc.PublishContractAcceptanceResponse", null, global);
goog.exportSymbol("proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest", null, global);
goog.exportSymbol("proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse", null, global);
goog.exportSymbol("proto.tari.rpc.SidechainMetadata", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetConstitutionRequestsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetConstitutionRequestsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetConstitutionRequestsRequest.displayName = "proto.tari.rpc.GetConstitutionRequestsRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetMetadataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetMetadataRequest.displayName = "proto.tari.rpc.GetMetadataRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.PublishContractAcceptanceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.PublishContractAcceptanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.PublishContractAcceptanceRequest.displayName = "proto.tari.rpc.PublishContractAcceptanceRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.PublishContractAcceptanceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.PublishContractAcceptanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.PublishContractAcceptanceResponse.displayName = "proto.tari.rpc.PublishContractAcceptanceResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.displayName =
    "proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.displayName =
    "proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetMetadataResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tari.rpc.GetMetadataResponse.repeatedFields_, null);
};
goog.inherits(proto.tari.rpc.GetMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetMetadataResponse.displayName = "proto.tari.rpc.GetMetadataResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.SidechainMetadata = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.SidechainMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.SidechainMetadata.displayName = "proto.tari.rpc.SidechainMetadata";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetTokenDataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetTokenDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetTokenDataRequest.displayName = "proto.tari.rpc.GetTokenDataRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.GetTokenDataResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.GetTokenDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.GetTokenDataResponse.displayName = "proto.tari.rpc.GetTokenDataResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.InvokeReadMethodRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.InvokeReadMethodRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.InvokeReadMethodRequest.displayName = "proto.tari.rpc.InvokeReadMethodRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.InvokeReadMethodResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.InvokeReadMethodResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.InvokeReadMethodResponse.displayName = "proto.tari.rpc.InvokeReadMethodResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.Authority = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.Authority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.Authority.displayName = "proto.tari.rpc.Authority";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.InvokeMethodRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.InvokeMethodRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.InvokeMethodRequest.displayName = "proto.tari.rpc.InvokeMethodRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.InvokeMethodResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.InvokeMethodResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.InvokeMethodResponse.displayName = "proto.tari.rpc.InvokeMethodResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetConstitutionRequestsRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetConstitutionRequestsRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetConstitutionRequestsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetConstitutionRequestsRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetConstitutionRequestsRequest}
 */
proto.tari.rpc.GetConstitutionRequestsRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetConstitutionRequestsRequest();
  return proto.tari.rpc.GetConstitutionRequestsRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetConstitutionRequestsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetConstitutionRequestsRequest}
 */
proto.tari.rpc.GetConstitutionRequestsRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetConstitutionRequestsRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetConstitutionRequestsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetConstitutionRequestsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetConstitutionRequestsRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetMetadataRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetMetadataRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetMetadataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetMetadataRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetMetadataRequest}
 */
proto.tari.rpc.GetMetadataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetMetadataRequest();
  return proto.tari.rpc.GetMetadataRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetMetadataRequest}
 */
proto.tari.rpc.GetMetadataRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetMetadataRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetMetadataRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.PublishContractAcceptanceRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.PublishContractAcceptanceRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.PublishContractAcceptanceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.PublishContractAcceptanceRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        contractId: msg.getContractId_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.PublishContractAcceptanceRequest}
 */
proto.tari.rpc.PublishContractAcceptanceRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.PublishContractAcceptanceRequest();
  return proto.tari.rpc.PublishContractAcceptanceRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.PublishContractAcceptanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.PublishContractAcceptanceRequest}
 */
proto.tari.rpc.PublishContractAcceptanceRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setContractId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.PublishContractAcceptanceRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.PublishContractAcceptanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.PublishContractAcceptanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.PublishContractAcceptanceRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.PublishContractAcceptanceRequest.prototype.getContractId = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.tari.rpc.PublishContractAcceptanceRequest.prototype.getContractId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractId()));
};

/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.PublishContractAcceptanceRequest.prototype.getContractId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.PublishContractAcceptanceRequest} returns this
 */
proto.tari.rpc.PublishContractAcceptanceRequest.prototype.setContractId = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.PublishContractAcceptanceResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.PublishContractAcceptanceResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.PublishContractAcceptanceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.PublishContractAcceptanceResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ""),
        txId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.PublishContractAcceptanceResponse}
 */
proto.tari.rpc.PublishContractAcceptanceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.PublishContractAcceptanceResponse();
  return proto.tari.rpc.PublishContractAcceptanceResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.PublishContractAcceptanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.PublishContractAcceptanceResponse}
 */
proto.tari.rpc.PublishContractAcceptanceResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTxId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.PublishContractAcceptanceResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.PublishContractAcceptanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.PublishContractAcceptanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.PublishContractAcceptanceResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTxId();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.tari.rpc.PublishContractAcceptanceResponse.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.PublishContractAcceptanceResponse} returns this
 */
proto.tari.rpc.PublishContractAcceptanceResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 tx_id = 2;
 * @return {number}
 */
proto.tari.rpc.PublishContractAcceptanceResponse.prototype.getTxId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.PublishContractAcceptanceResponse} returns this
 */
proto.tari.rpc.PublishContractAcceptanceResponse.prototype.setTxId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        contractId: msg.getContractId_asB64(),
        proposalId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest();
  return proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setContractId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setProposalId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getProposalId();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.prototype.getContractId = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.prototype.getContractId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractId()));
};

/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.prototype.getContractId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest} returns this
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.prototype.setContractId = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional uint64 proposal_id = 2;
 * @return {number}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.prototype.getProposalId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest} returns this
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceRequest.prototype.setProposalId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ""),
        txId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse();
  return proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTxId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTxId();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse} returns this
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 tx_id = 2;
 * @return {number}
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.prototype.getTxId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse} returns this
 */
proto.tari.rpc.PublishContractUpdateProposalAcceptanceResponse.prototype.setTxId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tari.rpc.GetMetadataResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetMetadataResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetMetadataResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetMetadataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetMetadataResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sidechainsList: jspb.Message.toObjectList(
          msg.getSidechainsList(),
          proto.tari.rpc.SidechainMetadata.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetMetadataResponse}
 */
proto.tari.rpc.GetMetadataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetMetadataResponse();
  return proto.tari.rpc.GetMetadataResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetMetadataResponse}
 */
proto.tari.rpc.GetMetadataResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.SidechainMetadata();
        reader.readMessage(value, proto.tari.rpc.SidechainMetadata.deserializeBinaryFromReader);
        msg.addSidechains(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetMetadataResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetMetadataResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSidechainsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.tari.rpc.SidechainMetadata.serializeBinaryToWriter);
  }
};

/**
 * repeated SidechainMetadata sidechains = 1;
 * @return {!Array<!proto.tari.rpc.SidechainMetadata>}
 */
proto.tari.rpc.GetMetadataResponse.prototype.getSidechainsList = function () {
  return /** @type{!Array<!proto.tari.rpc.SidechainMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tari.rpc.SidechainMetadata, 1)
  );
};

/**
 * @param {!Array<!proto.tari.rpc.SidechainMetadata>} value
 * @return {!proto.tari.rpc.GetMetadataResponse} returns this
 */
proto.tari.rpc.GetMetadataResponse.prototype.setSidechainsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.tari.rpc.SidechainMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.SidechainMetadata}
 */
proto.tari.rpc.GetMetadataResponse.prototype.addSidechains = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tari.rpc.SidechainMetadata, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.GetMetadataResponse} returns this
 */
proto.tari.rpc.GetMetadataResponse.prototype.clearSidechainsList = function () {
  return this.setSidechainsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.SidechainMetadata.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.SidechainMetadata.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.SidechainMetadata} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.SidechainMetadata.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        assetPublicKey: msg.getAssetPublicKey_asB64(),
        committedHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
        committedHash: msg.getCommittedHash_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.SidechainMetadata}
 */
proto.tari.rpc.SidechainMetadata.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.SidechainMetadata();
  return proto.tari.rpc.SidechainMetadata.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.SidechainMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.SidechainMetadata}
 */
proto.tari.rpc.SidechainMetadata.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAssetPublicKey(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setCommittedHeight(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCommittedHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.SidechainMetadata.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.SidechainMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.SidechainMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.SidechainMetadata.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAssetPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getCommittedHeight();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getCommittedHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * optional bytes asset_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.SidechainMetadata.prototype.getAssetPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes asset_public_key = 1;
 * This is a type-conversion wrapper around `getAssetPublicKey()`
 * @return {string}
 */
proto.tari.rpc.SidechainMetadata.prototype.getAssetPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAssetPublicKey()));
};

/**
 * optional bytes asset_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.SidechainMetadata.prototype.getAssetPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAssetPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.SidechainMetadata} returns this
 */
proto.tari.rpc.SidechainMetadata.prototype.setAssetPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional uint64 committed_height = 2;
 * @return {number}
 */
proto.tari.rpc.SidechainMetadata.prototype.getCommittedHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.SidechainMetadata} returns this
 */
proto.tari.rpc.SidechainMetadata.prototype.setCommittedHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional bytes committed_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.SidechainMetadata.prototype.getCommittedHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes committed_hash = 3;
 * This is a type-conversion wrapper around `getCommittedHash()`
 * @return {string}
 */
proto.tari.rpc.SidechainMetadata.prototype.getCommittedHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCommittedHash()));
};

/**
 * optional bytes committed_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommittedHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.SidechainMetadata.prototype.getCommittedHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCommittedHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.SidechainMetadata} returns this
 */
proto.tari.rpc.SidechainMetadata.prototype.setCommittedHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetTokenDataRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetTokenDataRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetTokenDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetTokenDataRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        assetPubKey: msg.getAssetPubKey_asB64(),
        uniqueId: msg.getUniqueId_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetTokenDataRequest}
 */
proto.tari.rpc.GetTokenDataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetTokenDataRequest();
  return proto.tari.rpc.GetTokenDataRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetTokenDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetTokenDataRequest}
 */
proto.tari.rpc.GetTokenDataRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAssetPubKey(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setUniqueId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTokenDataRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetTokenDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetTokenDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetTokenDataRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAssetPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getUniqueId_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional bytes asset_pub_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.GetTokenDataRequest.prototype.getAssetPubKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes asset_pub_key = 1;
 * This is a type-conversion wrapper around `getAssetPubKey()`
 * @return {string}
 */
proto.tari.rpc.GetTokenDataRequest.prototype.getAssetPubKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAssetPubKey()));
};

/**
 * optional bytes asset_pub_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetPubKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTokenDataRequest.prototype.getAssetPubKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAssetPubKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.GetTokenDataRequest} returns this
 */
proto.tari.rpc.GetTokenDataRequest.prototype.setAssetPubKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes unique_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.GetTokenDataRequest.prototype.getUniqueId = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes unique_id = 2;
 * This is a type-conversion wrapper around `getUniqueId()`
 * @return {string}
 */
proto.tari.rpc.GetTokenDataRequest.prototype.getUniqueId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getUniqueId()));
};

/**
 * optional bytes unique_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUniqueId()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTokenDataRequest.prototype.getUniqueId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getUniqueId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.GetTokenDataRequest} returns this
 */
proto.tari.rpc.GetTokenDataRequest.prototype.setUniqueId = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.GetTokenDataResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.GetTokenDataResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.GetTokenDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.GetTokenDataResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.GetTokenDataResponse}
 */
proto.tari.rpc.GetTokenDataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.GetTokenDataResponse();
  return proto.tari.rpc.GetTokenDataResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.GetTokenDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.GetTokenDataResponse}
 */
proto.tari.rpc.GetTokenDataResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.GetTokenDataResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.GetTokenDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.GetTokenDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.GetTokenDataResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.InvokeReadMethodRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.InvokeReadMethodRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.InvokeReadMethodRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.InvokeReadMethodRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        contractId: msg.getContractId_asB64(),
        templateId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        method: jspb.Message.getFieldWithDefault(msg, 3, ""),
        args: msg.getArgs_asB64(),
        sender: msg.getSender_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.InvokeReadMethodRequest}
 */
proto.tari.rpc.InvokeReadMethodRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.InvokeReadMethodRequest();
  return proto.tari.rpc.InvokeReadMethodRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.InvokeReadMethodRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.InvokeReadMethodRequest}
 */
proto.tari.rpc.InvokeReadMethodRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setContractId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTemplateId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setMethod(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setArgs(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSender(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.InvokeReadMethodRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.InvokeReadMethodRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.InvokeReadMethodRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getTemplateId();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getArgs_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getContractId = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getContractId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractId()));
};

/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getContractId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.InvokeReadMethodRequest} returns this
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.setContractId = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional uint32 template_id = 2;
 * @return {number}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getTemplateId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.InvokeReadMethodRequest} returns this
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.setTemplateId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string method = 3;
 * @return {string}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getMethod = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.InvokeReadMethodRequest} returns this
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.setMethod = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bytes args = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getArgs = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes args = 4;
 * This is a type-conversion wrapper around `getArgs()`
 * @return {string}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getArgs_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getArgs()));
};

/**
 * optional bytes args = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgs()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getArgs_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getArgs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.InvokeReadMethodRequest} returns this
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.setArgs = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes sender = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getSender = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * optional bytes sender = 5;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getSender_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSender()));
};

/**
 * optional bytes sender = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.getSender_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSender()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.InvokeReadMethodRequest} returns this
 */
proto.tari.rpc.InvokeReadMethodRequest.prototype.setSender = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.InvokeReadMethodResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.InvokeReadMethodResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.InvokeReadMethodResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.InvokeReadMethodResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        result: msg.getResult_asB64(),
        authority: (f = msg.getAuthority()) && proto.tari.rpc.Authority.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.InvokeReadMethodResponse}
 */
proto.tari.rpc.InvokeReadMethodResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.InvokeReadMethodResponse();
  return proto.tari.rpc.InvokeReadMethodResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.InvokeReadMethodResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.InvokeReadMethodResponse}
 */
proto.tari.rpc.InvokeReadMethodResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setResult(value);
        break;
      case 2:
        var value = new proto.tari.rpc.Authority();
        reader.readMessage(value, proto.tari.rpc.Authority.deserializeBinaryFromReader);
        msg.setAuthority(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.InvokeReadMethodResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.InvokeReadMethodResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.InvokeReadMethodResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getResult_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getAuthority();
  if (f != null) {
    writer.writeMessage(2, f, proto.tari.rpc.Authority.serializeBinaryToWriter);
  }
};

/**
 * optional bytes result = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.getResult = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes result = 1;
 * This is a type-conversion wrapper around `getResult()`
 * @return {string}
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.getResult_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getResult()));
};

/**
 * optional bytes result = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResult()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.getResult_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getResult()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.InvokeReadMethodResponse} returns this
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.setResult = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional Authority authority = 2;
 * @return {?proto.tari.rpc.Authority}
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.getAuthority = function () {
  return /** @type{?proto.tari.rpc.Authority} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.Authority, 2));
};

/**
 * @param {?proto.tari.rpc.Authority|undefined} value
 * @return {!proto.tari.rpc.InvokeReadMethodResponse} returns this
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.setAuthority = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.InvokeReadMethodResponse} returns this
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.clearAuthority = function () {
  return this.setAuthority(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.InvokeReadMethodResponse.prototype.hasAuthority = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.Authority.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.Authority.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.Authority} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.Authority.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        nodePublicKey: msg.getNodePublicKey_asB64(),
        signature: msg.getSignature_asB64(),
        proxiedBy: msg.getProxiedBy_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.Authority}
 */
proto.tari.rpc.Authority.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.Authority();
  return proto.tari.rpc.Authority.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.Authority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.Authority}
 */
proto.tari.rpc.Authority.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setNodePublicKey(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setProxiedBy(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.Authority.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.Authority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.Authority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.Authority.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getNodePublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getProxiedBy_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * optional bytes node_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Authority.prototype.getNodePublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes node_public_key = 1;
 * This is a type-conversion wrapper around `getNodePublicKey()`
 * @return {string}
 */
proto.tari.rpc.Authority.prototype.getNodePublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNodePublicKey()));
};

/**
 * optional bytes node_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodePublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Authority.prototype.getNodePublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNodePublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Authority} returns this
 */
proto.tari.rpc.Authority.prototype.setNodePublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Authority.prototype.getSignature = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.tari.rpc.Authority.prototype.getSignature_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Authority.prototype.getSignature_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSignature()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Authority} returns this
 */
proto.tari.rpc.Authority.prototype.setSignature = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes proxied_by = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Authority.prototype.getProxiedBy = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes proxied_by = 3;
 * This is a type-conversion wrapper around `getProxiedBy()`
 * @return {string}
 */
proto.tari.rpc.Authority.prototype.getProxiedBy_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getProxiedBy()));
};

/**
 * optional bytes proxied_by = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProxiedBy()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Authority.prototype.getProxiedBy_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getProxiedBy()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Authority} returns this
 */
proto.tari.rpc.Authority.prototype.setProxiedBy = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.InvokeMethodRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.InvokeMethodRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.InvokeMethodRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.InvokeMethodRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        contractId: msg.getContractId_asB64(),
        templateId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        method: jspb.Message.getFieldWithDefault(msg, 3, ""),
        args: msg.getArgs_asB64(),
        sender: msg.getSender_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.InvokeMethodRequest}
 */
proto.tari.rpc.InvokeMethodRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.InvokeMethodRequest();
  return proto.tari.rpc.InvokeMethodRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.InvokeMethodRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.InvokeMethodRequest}
 */
proto.tari.rpc.InvokeMethodRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setContractId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTemplateId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setMethod(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setArgs(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSender(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.InvokeMethodRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.InvokeMethodRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.InvokeMethodRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getContractId_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getTemplateId();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getArgs_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * optional bytes contract_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getContractId = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes contract_id = 1;
 * This is a type-conversion wrapper around `getContractId()`
 * @return {string}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getContractId_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContractId()));
};

/**
 * optional bytes contract_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractId()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getContractId_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContractId()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.InvokeMethodRequest} returns this
 */
proto.tari.rpc.InvokeMethodRequest.prototype.setContractId = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional uint32 template_id = 2;
 * @return {number}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getTemplateId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.InvokeMethodRequest} returns this
 */
proto.tari.rpc.InvokeMethodRequest.prototype.setTemplateId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string method = 3;
 * @return {string}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getMethod = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.InvokeMethodRequest} returns this
 */
proto.tari.rpc.InvokeMethodRequest.prototype.setMethod = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bytes args = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getArgs = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes args = 4;
 * This is a type-conversion wrapper around `getArgs()`
 * @return {string}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getArgs_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getArgs()));
};

/**
 * optional bytes args = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgs()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getArgs_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getArgs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.InvokeMethodRequest} returns this
 */
proto.tari.rpc.InvokeMethodRequest.prototype.setArgs = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes sender = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getSender = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * optional bytes sender = 5;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getSender_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSender()));
};

/**
 * optional bytes sender = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeMethodRequest.prototype.getSender_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSender()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.InvokeMethodRequest} returns this
 */
proto.tari.rpc.InvokeMethodRequest.prototype.setSender = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.InvokeMethodResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.InvokeMethodResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.InvokeMethodResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.InvokeMethodResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, ""),
        result: msg.getResult_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.InvokeMethodResponse}
 */
proto.tari.rpc.InvokeMethodResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.InvokeMethodResponse();
  return proto.tari.rpc.InvokeMethodResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.InvokeMethodResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.InvokeMethodResponse}
 */
proto.tari.rpc.InvokeMethodResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setResult(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeMethodResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.InvokeMethodResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.InvokeMethodResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.InvokeMethodResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getResult_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional string status = 1;
 * @return {string}
 */
proto.tari.rpc.InvokeMethodResponse.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.tari.rpc.InvokeMethodResponse} returns this
 */
proto.tari.rpc.InvokeMethodResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bytes result = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.InvokeMethodResponse.prototype.getResult = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes result = 2;
 * This is a type-conversion wrapper around `getResult()`
 * @return {string}
 */
proto.tari.rpc.InvokeMethodResponse.prototype.getResult_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getResult()));
};

/**
 * optional bytes result = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResult()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.InvokeMethodResponse.prototype.getResult_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getResult()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.InvokeMethodResponse} returns this
 */
proto.tari.rpc.InvokeMethodResponse.prototype.setResult = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

goog.object.extend(exports, proto.tari.rpc);
