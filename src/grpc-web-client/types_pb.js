// source: types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

goog.exportSymbol("proto.tari.rpc.BlockHeight", null, global);
goog.exportSymbol("proto.tari.rpc.ComAndPubSignature", null, global);
goog.exportSymbol("proto.tari.rpc.CommitmentSignature", null, global);
goog.exportSymbol("proto.tari.rpc.ConsensusConstants", null, global);
goog.exportSymbol("proto.tari.rpc.Empty", null, global);
goog.exportSymbol("proto.tari.rpc.OutputType", null, global);
goog.exportSymbol("proto.tari.rpc.OutputsVersion", null, global);
goog.exportSymbol("proto.tari.rpc.PermittedRangeProofs", null, global);
goog.exportSymbol("proto.tari.rpc.PowAlgorithmConstants", null, global);
goog.exportSymbol("proto.tari.rpc.Range", null, global);
goog.exportSymbol("proto.tari.rpc.RangeProof", null, global);
goog.exportSymbol("proto.tari.rpc.RangeProofType", null, global);
goog.exportSymbol("proto.tari.rpc.Signature", null, global);
goog.exportSymbol("proto.tari.rpc.WeightParams", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.Range = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.Range.displayName = "proto.tari.rpc.Range";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.Empty.displayName = "proto.tari.rpc.Empty";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.BlockHeight = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.BlockHeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.BlockHeight.displayName = "proto.tari.rpc.BlockHeight";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.Signature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.Signature.displayName = "proto.tari.rpc.Signature";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.ComAndPubSignature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.ComAndPubSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.ComAndPubSignature.displayName = "proto.tari.rpc.ComAndPubSignature";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.CommitmentSignature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.CommitmentSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.CommitmentSignature.displayName = "proto.tari.rpc.CommitmentSignature";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.PowAlgorithmConstants = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.PowAlgorithmConstants, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.PowAlgorithmConstants.displayName = "proto.tari.rpc.PowAlgorithmConstants";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.WeightParams = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.WeightParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.WeightParams.displayName = "proto.tari.rpc.WeightParams";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.OutputsVersion = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.OutputsVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.OutputsVersion.displayName = "proto.tari.rpc.OutputsVersion";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.PermittedRangeProofs = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tari.rpc.PermittedRangeProofs.repeatedFields_, null);
};
goog.inherits(proto.tari.rpc.PermittedRangeProofs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.PermittedRangeProofs.displayName = "proto.tari.rpc.PermittedRangeProofs";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.RangeProof = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.RangeProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.RangeProof.displayName = "proto.tari.rpc.RangeProof";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.ConsensusConstants = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tari.rpc.ConsensusConstants.repeatedFields_, null);
};
goog.inherits(proto.tari.rpc.ConsensusConstants, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.ConsensusConstants.displayName = "proto.tari.rpc.ConsensusConstants";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.Range.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.Range.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.Range} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.Range.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        min: jspb.Message.getFieldWithDefault(msg, 1, 0),
        max: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.Range}
 */
proto.tari.rpc.Range.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.Range();
  return proto.tari.rpc.Range.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.Range}
 */
proto.tari.rpc.Range.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMin(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMax(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.Range.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.Range.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.Range.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional uint64 min = 1;
 * @return {number}
 */
proto.tari.rpc.Range.prototype.getMin = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.Range} returns this
 */
proto.tari.rpc.Range.prototype.setMin = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 max = 2;
 * @return {number}
 */
proto.tari.rpc.Range.prototype.getMax = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.Range} returns this
 */
proto.tari.rpc.Range.prototype.setMax = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.Empty.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.Empty.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.Empty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.Empty.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.Empty}
 */
proto.tari.rpc.Empty.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.Empty();
  return proto.tari.rpc.Empty.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.Empty}
 */
proto.tari.rpc.Empty.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.Empty.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.Empty.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.BlockHeight.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.BlockHeight.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.BlockHeight} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.BlockHeight.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.BlockHeight}
 */
proto.tari.rpc.BlockHeight.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.BlockHeight();
  return proto.tari.rpc.BlockHeight.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.BlockHeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.BlockHeight}
 */
proto.tari.rpc.BlockHeight.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockHeight(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.BlockHeight.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.BlockHeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.BlockHeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.BlockHeight.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
};

/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.tari.rpc.BlockHeight.prototype.getBlockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.BlockHeight} returns this
 */
proto.tari.rpc.BlockHeight.prototype.setBlockHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.Signature.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.Signature.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.Signature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.Signature.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        publicNonce: msg.getPublicNonce_asB64(),
        signature: msg.getSignature_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.Signature}
 */
proto.tari.rpc.Signature.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.Signature();
  return proto.tari.rpc.Signature.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.Signature}
 */
proto.tari.rpc.Signature.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPublicNonce(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.Signature.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.Signature.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPublicNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional bytes public_nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Signature.prototype.getPublicNonce = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes public_nonce = 1;
 * This is a type-conversion wrapper around `getPublicNonce()`
 * @return {string}
 */
proto.tari.rpc.Signature.prototype.getPublicNonce_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicNonce()));
};

/**
 * optional bytes public_nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicNonce()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Signature.prototype.getPublicNonce_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPublicNonce()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Signature} returns this
 */
proto.tari.rpc.Signature.prototype.setPublicNonce = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Signature.prototype.getSignature = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.tari.rpc.Signature.prototype.getSignature_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Signature.prototype.getSignature_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSignature()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Signature} returns this
 */
proto.tari.rpc.Signature.prototype.setSignature = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.ComAndPubSignature.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.ComAndPubSignature.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.ComAndPubSignature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.ComAndPubSignature.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        ephemeralCommitment: msg.getEphemeralCommitment_asB64(),
        ephemeralPubkey: msg.getEphemeralPubkey_asB64(),
        uA: msg.getUA_asB64(),
        uX: msg.getUX_asB64(),
        uY: msg.getUY_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.ComAndPubSignature}
 */
proto.tari.rpc.ComAndPubSignature.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.ComAndPubSignature();
  return proto.tari.rpc.ComAndPubSignature.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.ComAndPubSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.ComAndPubSignature}
 */
proto.tari.rpc.ComAndPubSignature.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEphemeralCommitment(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEphemeralPubkey(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setUA(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setUX(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setUY(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.ComAndPubSignature.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.ComAndPubSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.ComAndPubSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.ComAndPubSignature.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEphemeralCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getEphemeralPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getUA_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getUX_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getUY_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * optional bytes ephemeral_commitment = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getEphemeralCommitment = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes ephemeral_commitment = 1;
 * This is a type-conversion wrapper around `getEphemeralCommitment()`
 * @return {string}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getEphemeralCommitment_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEphemeralCommitment()));
};

/**
 * optional bytes ephemeral_commitment = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEphemeralCommitment()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getEphemeralCommitment_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEphemeralCommitment()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.ComAndPubSignature} returns this
 */
proto.tari.rpc.ComAndPubSignature.prototype.setEphemeralCommitment = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes ephemeral_pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getEphemeralPubkey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes ephemeral_pubkey = 2;
 * This is a type-conversion wrapper around `getEphemeralPubkey()`
 * @return {string}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getEphemeralPubkey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEphemeralPubkey()));
};

/**
 * optional bytes ephemeral_pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEphemeralPubkey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getEphemeralPubkey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEphemeralPubkey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.ComAndPubSignature} returns this
 */
proto.tari.rpc.ComAndPubSignature.prototype.setEphemeralPubkey = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes u_a = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUA = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes u_a = 3;
 * This is a type-conversion wrapper around `getUA()`
 * @return {string}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUA_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getUA()));
};

/**
 * optional bytes u_a = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUA()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUA_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getUA()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.ComAndPubSignature} returns this
 */
proto.tari.rpc.ComAndPubSignature.prototype.setUA = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes u_x = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUX = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes u_x = 4;
 * This is a type-conversion wrapper around `getUX()`
 * @return {string}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUX_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getUX()));
};

/**
 * optional bytes u_x = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUX()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUX_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getUX()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.ComAndPubSignature} returns this
 */
proto.tari.rpc.ComAndPubSignature.prototype.setUX = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes u_y = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUY = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * optional bytes u_y = 5;
 * This is a type-conversion wrapper around `getUY()`
 * @return {string}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUY_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getUY()));
};

/**
 * optional bytes u_y = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUY()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.ComAndPubSignature.prototype.getUY_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getUY()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.ComAndPubSignature} returns this
 */
proto.tari.rpc.ComAndPubSignature.prototype.setUY = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.CommitmentSignature.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.CommitmentSignature.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.CommitmentSignature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.CommitmentSignature.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        publicNonce: msg.getPublicNonce_asB64(),
        u: msg.getU_asB64(),
        v: msg.getV_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.CommitmentSignature}
 */
proto.tari.rpc.CommitmentSignature.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.CommitmentSignature();
  return proto.tari.rpc.CommitmentSignature.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.CommitmentSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.CommitmentSignature}
 */
proto.tari.rpc.CommitmentSignature.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPublicNonce(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setU(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setV(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.CommitmentSignature.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.CommitmentSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.CommitmentSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.CommitmentSignature.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPublicNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getU_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * optional bytes public_nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.CommitmentSignature.prototype.getPublicNonce = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes public_nonce = 1;
 * This is a type-conversion wrapper around `getPublicNonce()`
 * @return {string}
 */
proto.tari.rpc.CommitmentSignature.prototype.getPublicNonce_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicNonce()));
};

/**
 * optional bytes public_nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicNonce()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.CommitmentSignature.prototype.getPublicNonce_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPublicNonce()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.CommitmentSignature} returns this
 */
proto.tari.rpc.CommitmentSignature.prototype.setPublicNonce = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes u = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.CommitmentSignature.prototype.getU = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes u = 2;
 * This is a type-conversion wrapper around `getU()`
 * @return {string}
 */
proto.tari.rpc.CommitmentSignature.prototype.getU_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getU()));
};

/**
 * optional bytes u = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getU()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.CommitmentSignature.prototype.getU_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getU()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.CommitmentSignature} returns this
 */
proto.tari.rpc.CommitmentSignature.prototype.setU = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes v = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.CommitmentSignature.prototype.getV = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes v = 3;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.tari.rpc.CommitmentSignature.prototype.getV_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getV()));
};

/**
 * optional bytes v = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.CommitmentSignature.prototype.getV_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getV()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.CommitmentSignature} returns this
 */
proto.tari.rpc.CommitmentSignature.prototype.setV = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.PowAlgorithmConstants.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.PowAlgorithmConstants.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.PowAlgorithmConstants} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.PowAlgorithmConstants.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        minDifficulty: jspb.Message.getFieldWithDefault(msg, 2, 0),
        maxDifficulty: jspb.Message.getFieldWithDefault(msg, 3, 0),
        targetTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.PowAlgorithmConstants}
 */
proto.tari.rpc.PowAlgorithmConstants.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.PowAlgorithmConstants();
  return proto.tari.rpc.PowAlgorithmConstants.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.PowAlgorithmConstants} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.PowAlgorithmConstants}
 */
proto.tari.rpc.PowAlgorithmConstants.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMinDifficulty(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaxDifficulty(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTargetTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.PowAlgorithmConstants.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.PowAlgorithmConstants.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.PowAlgorithmConstants} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.PowAlgorithmConstants.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMinDifficulty();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getMaxDifficulty();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getTargetTime();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
};

/**
 * optional uint64 min_difficulty = 2;
 * @return {number}
 */
proto.tari.rpc.PowAlgorithmConstants.prototype.getMinDifficulty = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.PowAlgorithmConstants} returns this
 */
proto.tari.rpc.PowAlgorithmConstants.prototype.setMinDifficulty = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 max_difficulty = 3;
 * @return {number}
 */
proto.tari.rpc.PowAlgorithmConstants.prototype.getMaxDifficulty = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.PowAlgorithmConstants} returns this
 */
proto.tari.rpc.PowAlgorithmConstants.prototype.setMaxDifficulty = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 target_time = 4;
 * @return {number}
 */
proto.tari.rpc.PowAlgorithmConstants.prototype.getTargetTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.PowAlgorithmConstants} returns this
 */
proto.tari.rpc.PowAlgorithmConstants.prototype.setTargetTime = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.WeightParams.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.WeightParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.WeightParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.WeightParams.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        kernelWeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
        inputWeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
        outputWeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
        featuresAndScriptsBytesPerGram: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.WeightParams}
 */
proto.tari.rpc.WeightParams.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.WeightParams();
  return proto.tari.rpc.WeightParams.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.WeightParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.WeightParams}
 */
proto.tari.rpc.WeightParams.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setKernelWeight(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setInputWeight(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setOutputWeight(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setFeaturesAndScriptsBytesPerGram(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.WeightParams.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.WeightParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.WeightParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.WeightParams.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getKernelWeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getInputWeight();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getOutputWeight();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getFeaturesAndScriptsBytesPerGram();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
};

/**
 * optional uint64 kernel_weight = 1;
 * @return {number}
 */
proto.tari.rpc.WeightParams.prototype.getKernelWeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.WeightParams} returns this
 */
proto.tari.rpc.WeightParams.prototype.setKernelWeight = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 input_weight = 2;
 * @return {number}
 */
proto.tari.rpc.WeightParams.prototype.getInputWeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.WeightParams} returns this
 */
proto.tari.rpc.WeightParams.prototype.setInputWeight = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 output_weight = 3;
 * @return {number}
 */
proto.tari.rpc.WeightParams.prototype.getOutputWeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.WeightParams} returns this
 */
proto.tari.rpc.WeightParams.prototype.setOutputWeight = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 features_and_scripts_bytes_per_gram = 4;
 * @return {number}
 */
proto.tari.rpc.WeightParams.prototype.getFeaturesAndScriptsBytesPerGram = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.WeightParams} returns this
 */
proto.tari.rpc.WeightParams.prototype.setFeaturesAndScriptsBytesPerGram = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.OutputsVersion.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.OutputsVersion.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.OutputsVersion} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.OutputsVersion.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        outputs: (f = msg.getOutputs()) && proto.tari.rpc.Range.toObject(includeInstance, f),
        features: (f = msg.getFeatures()) && proto.tari.rpc.Range.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.OutputsVersion}
 */
proto.tari.rpc.OutputsVersion.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.OutputsVersion();
  return proto.tari.rpc.OutputsVersion.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.OutputsVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.OutputsVersion}
 */
proto.tari.rpc.OutputsVersion.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.Range();
        reader.readMessage(value, proto.tari.rpc.Range.deserializeBinaryFromReader);
        msg.setOutputs(value);
        break;
      case 2:
        var value = new proto.tari.rpc.Range();
        reader.readMessage(value, proto.tari.rpc.Range.deserializeBinaryFromReader);
        msg.setFeatures(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.OutputsVersion.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.OutputsVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.OutputsVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.OutputsVersion.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOutputs();
  if (f != null) {
    writer.writeMessage(1, f, proto.tari.rpc.Range.serializeBinaryToWriter);
  }
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(2, f, proto.tari.rpc.Range.serializeBinaryToWriter);
  }
};

/**
 * optional Range outputs = 1;
 * @return {?proto.tari.rpc.Range}
 */
proto.tari.rpc.OutputsVersion.prototype.getOutputs = function () {
  return /** @type{?proto.tari.rpc.Range} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.Range, 1));
};

/**
 * @param {?proto.tari.rpc.Range|undefined} value
 * @return {!proto.tari.rpc.OutputsVersion} returns this
 */
proto.tari.rpc.OutputsVersion.prototype.setOutputs = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.OutputsVersion} returns this
 */
proto.tari.rpc.OutputsVersion.prototype.clearOutputs = function () {
  return this.setOutputs(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.OutputsVersion.prototype.hasOutputs = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Range features = 2;
 * @return {?proto.tari.rpc.Range}
 */
proto.tari.rpc.OutputsVersion.prototype.getFeatures = function () {
  return /** @type{?proto.tari.rpc.Range} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.Range, 2));
};

/**
 * @param {?proto.tari.rpc.Range|undefined} value
 * @return {!proto.tari.rpc.OutputsVersion} returns this
 */
proto.tari.rpc.OutputsVersion.prototype.setFeatures = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.OutputsVersion} returns this
 */
proto.tari.rpc.OutputsVersion.prototype.clearFeatures = function () {
  return this.setFeatures(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.OutputsVersion.prototype.hasFeatures = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tari.rpc.PermittedRangeProofs.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.PermittedRangeProofs.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.PermittedRangeProofs.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.PermittedRangeProofs} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.PermittedRangeProofs.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        outputType: jspb.Message.getFieldWithDefault(msg, 1, 0),
        rangeProofTypesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.PermittedRangeProofs}
 */
proto.tari.rpc.PermittedRangeProofs.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.PermittedRangeProofs();
  return proto.tari.rpc.PermittedRangeProofs.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.PermittedRangeProofs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.PermittedRangeProofs}
 */
proto.tari.rpc.PermittedRangeProofs.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.tari.rpc.OutputType} */ (reader.readEnum());
        msg.setOutputType(value);
        break;
      case 2:
        var values = /** @type {!Array<!proto.tari.rpc.RangeProofType>} */ (
          reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]
        );
        for (var i = 0; i < values.length; i++) {
          msg.addRangeProofTypes(values[i]);
        }
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.PermittedRangeProofs.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.PermittedRangeProofs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.PermittedRangeProofs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.PermittedRangeProofs.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOutputType();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getRangeProofTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(2, f);
  }
};

/**
 * optional OutputType output_type = 1;
 * @return {!proto.tari.rpc.OutputType}
 */
proto.tari.rpc.PermittedRangeProofs.prototype.getOutputType = function () {
  return /** @type {!proto.tari.rpc.OutputType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.tari.rpc.OutputType} value
 * @return {!proto.tari.rpc.PermittedRangeProofs} returns this
 */
proto.tari.rpc.PermittedRangeProofs.prototype.setOutputType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * repeated RangeProofType range_proof_types = 2;
 * @return {!Array<!proto.tari.rpc.RangeProofType>}
 */
proto.tari.rpc.PermittedRangeProofs.prototype.getRangeProofTypesList = function () {
  return /** @type {!Array<!proto.tari.rpc.RangeProofType>} */ (jspb.Message.getRepeatedField(this, 2));
};

/**
 * @param {!Array<!proto.tari.rpc.RangeProofType>} value
 * @return {!proto.tari.rpc.PermittedRangeProofs} returns this
 */
proto.tari.rpc.PermittedRangeProofs.prototype.setRangeProofTypesList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!proto.tari.rpc.RangeProofType} value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.PermittedRangeProofs} returns this
 */
proto.tari.rpc.PermittedRangeProofs.prototype.addRangeProofTypes = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.PermittedRangeProofs} returns this
 */
proto.tari.rpc.PermittedRangeProofs.prototype.clearRangeProofTypesList = function () {
  return this.setRangeProofTypesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.RangeProof.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.RangeProof.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.RangeProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.RangeProof.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        proofBytes: msg.getProofBytes_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.RangeProof}
 */
proto.tari.rpc.RangeProof.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.RangeProof();
  return proto.tari.rpc.RangeProof.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.RangeProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.RangeProof}
 */
proto.tari.rpc.RangeProof.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setProofBytes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.RangeProof.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.RangeProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.RangeProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.RangeProof.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getProofBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes proof_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.RangeProof.prototype.getProofBytes = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes proof_bytes = 1;
 * This is a type-conversion wrapper around `getProofBytes()`
 * @return {string}
 */
proto.tari.rpc.RangeProof.prototype.getProofBytes_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getProofBytes()));
};

/**
 * optional bytes proof_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofBytes()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.RangeProof.prototype.getProofBytes_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getProofBytes()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.RangeProof} returns this
 */
proto.tari.rpc.RangeProof.prototype.setProofBytes = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tari.rpc.ConsensusConstants.repeatedFields_ = [11, 29, 34];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.ConsensusConstants.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.ConsensusConstants.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.ConsensusConstants} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.ConsensusConstants.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        coinbaseMinMaturity: jspb.Message.getFieldWithDefault(msg, 1, 0),
        blockchainVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
        futureTimeLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
        difficultyBlockWindow: jspb.Message.getFieldWithDefault(msg, 5, 0),
        maxBlockTransactionWeight: jspb.Message.getFieldWithDefault(msg, 7, 0),
        powAlgoCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
        medianTimestampCount: jspb.Message.getFieldWithDefault(msg, 9, 0),
        emissionInitial: jspb.Message.getFieldWithDefault(msg, 10, 0),
        emissionDecayList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
        emissionTail: jspb.Message.getFieldWithDefault(msg, 12, 0),
        minSha3xPowDifficulty: jspb.Message.getFieldWithDefault(msg, 13, 0),
        blockWeightInputs: jspb.Message.getFieldWithDefault(msg, 14, 0),
        blockWeightOutputs: jspb.Message.getFieldWithDefault(msg, 15, 0),
        blockWeightKernels: jspb.Message.getFieldWithDefault(msg, 16, 0),
        preMineValue: jspb.Message.getFieldWithDefault(msg, 17, 0),
        maxScriptByteSize: jspb.Message.getFieldWithDefault(msg, 18, 0),
        validatorNodeValidityPeriod: jspb.Message.getFieldWithDefault(msg, 19, 0),
        effectiveFromHeight: jspb.Message.getFieldWithDefault(msg, 20, 0),
        validBlockchainVersionRange:
          (f = msg.getValidBlockchainVersionRange()) && proto.tari.rpc.Range.toObject(includeInstance, f),
        maxRandomxSeedHeight: jspb.Message.getFieldWithDefault(msg, 22, 0),
        proofOfWorkMap: (f = msg.getProofOfWorkMap())
          ? f.toObject(includeInstance, proto.tari.rpc.PowAlgorithmConstants.toObject)
          : [],
        transactionWeight: (f = msg.getTransactionWeight()) && proto.tari.rpc.WeightParams.toObject(includeInstance, f),
        inputVersionRange: (f = msg.getInputVersionRange()) && proto.tari.rpc.Range.toObject(includeInstance, f),
        outputVersionRange:
          (f = msg.getOutputVersionRange()) && proto.tari.rpc.OutputsVersion.toObject(includeInstance, f),
        kernelVersionRange: (f = msg.getKernelVersionRange()) && proto.tari.rpc.Range.toObject(includeInstance, f),
        permittedOutputTypesList: (f = jspb.Message.getRepeatedField(msg, 29)) == null ? undefined : f,
        epochLength: jspb.Message.getFieldWithDefault(msg, 30, 0),
        validatorNodeRegistrationMinDepositAmount: jspb.Message.getFieldWithDefault(msg, 31, 0),
        validatorNodeRegistrationMinLockHeight: jspb.Message.getFieldWithDefault(msg, 32, 0),
        validatorNodeRegistrationShuffleIntervalEpoch: jspb.Message.getFieldWithDefault(msg, 33, 0),
        permittedRangeProofTypesList: jspb.Message.toObjectList(
          msg.getPermittedRangeProofTypesList(),
          proto.tari.rpc.PermittedRangeProofs.toObject,
          includeInstance,
        ),
        inflationBips: jspb.Message.getFieldWithDefault(msg, 35, 0),
        tailEpochLength: jspb.Message.getFieldWithDefault(msg, 36, 0),
        maxBlockCoinbaseCount: jspb.Message.getFieldWithDefault(msg, 37, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.ConsensusConstants}
 */
proto.tari.rpc.ConsensusConstants.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.ConsensusConstants();
  return proto.tari.rpc.ConsensusConstants.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.ConsensusConstants} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.ConsensusConstants}
 */
proto.tari.rpc.ConsensusConstants.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setCoinbaseMinMaturity(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setBlockchainVersion(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setFutureTimeLimit(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setDifficultyBlockWindow(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaxBlockTransactionWeight(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setPowAlgoCount(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMedianTimestampCount(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setEmissionInitial(value);
        break;
      case 11:
        var values = /** @type {!Array<number>} */ (
          reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]
        );
        for (var i = 0; i < values.length; i++) {
          msg.addEmissionDecay(values[i]);
        }
        break;
      case 12:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setEmissionTail(value);
        break;
      case 13:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMinSha3xPowDifficulty(value);
        break;
      case 14:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockWeightInputs(value);
        break;
      case 15:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockWeightOutputs(value);
        break;
      case 16:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockWeightKernels(value);
        break;
      case 17:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setPreMineValue(value);
        break;
      case 18:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaxScriptByteSize(value);
        break;
      case 19:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setValidatorNodeValidityPeriod(value);
        break;
      case 20:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setEffectiveFromHeight(value);
        break;
      case 21:
        var value = new proto.tari.rpc.Range();
        reader.readMessage(value, proto.tari.rpc.Range.deserializeBinaryFromReader);
        msg.setValidBlockchainVersionRange(value);
        break;
      case 22:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaxRandomxSeedHeight(value);
        break;
      case 23:
        var value = msg.getProofOfWorkMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readUint32,
            jspb.BinaryReader.prototype.readMessage,
            proto.tari.rpc.PowAlgorithmConstants.deserializeBinaryFromReader,
            0,
            new proto.tari.rpc.PowAlgorithmConstants(),
          );
        });
        break;
      case 24:
        var value = new proto.tari.rpc.WeightParams();
        reader.readMessage(value, proto.tari.rpc.WeightParams.deserializeBinaryFromReader);
        msg.setTransactionWeight(value);
        break;
      case 26:
        var value = new proto.tari.rpc.Range();
        reader.readMessage(value, proto.tari.rpc.Range.deserializeBinaryFromReader);
        msg.setInputVersionRange(value);
        break;
      case 27:
        var value = new proto.tari.rpc.OutputsVersion();
        reader.readMessage(value, proto.tari.rpc.OutputsVersion.deserializeBinaryFromReader);
        msg.setOutputVersionRange(value);
        break;
      case 28:
        var value = new proto.tari.rpc.Range();
        reader.readMessage(value, proto.tari.rpc.Range.deserializeBinaryFromReader);
        msg.setKernelVersionRange(value);
        break;
      case 29:
        var values = /** @type {!Array<!proto.tari.rpc.OutputType>} */ (
          reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]
        );
        for (var i = 0; i < values.length; i++) {
          msg.addPermittedOutputTypes(values[i]);
        }
        break;
      case 30:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setEpochLength(value);
        break;
      case 31:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setValidatorNodeRegistrationMinDepositAmount(value);
        break;
      case 32:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setValidatorNodeRegistrationMinLockHeight(value);
        break;
      case 33:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setValidatorNodeRegistrationShuffleIntervalEpoch(value);
        break;
      case 34:
        var value = new proto.tari.rpc.PermittedRangeProofs();
        reader.readMessage(value, proto.tari.rpc.PermittedRangeProofs.deserializeBinaryFromReader);
        msg.addPermittedRangeProofTypes(value);
        break;
      case 35:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setInflationBips(value);
        break;
      case 36:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTailEpochLength(value);
        break;
      case 37:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaxBlockCoinbaseCount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.ConsensusConstants.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.ConsensusConstants.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.ConsensusConstants} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.ConsensusConstants.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCoinbaseMinMaturity();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getBlockchainVersion();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getFutureTimeLimit();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getDifficultyBlockWindow();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getMaxBlockTransactionWeight();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getPowAlgoCount();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
  f = message.getMedianTimestampCount();
  if (f !== 0) {
    writer.writeUint64(9, f);
  }
  f = message.getEmissionInitial();
  if (f !== 0) {
    writer.writeUint64(10, f);
  }
  f = message.getEmissionDecayList();
  if (f.length > 0) {
    writer.writePackedUint64(11, f);
  }
  f = message.getEmissionTail();
  if (f !== 0) {
    writer.writeUint64(12, f);
  }
  f = message.getMinSha3xPowDifficulty();
  if (f !== 0) {
    writer.writeUint64(13, f);
  }
  f = message.getBlockWeightInputs();
  if (f !== 0) {
    writer.writeUint64(14, f);
  }
  f = message.getBlockWeightOutputs();
  if (f !== 0) {
    writer.writeUint64(15, f);
  }
  f = message.getBlockWeightKernels();
  if (f !== 0) {
    writer.writeUint64(16, f);
  }
  f = message.getPreMineValue();
  if (f !== 0) {
    writer.writeUint64(17, f);
  }
  f = message.getMaxScriptByteSize();
  if (f !== 0) {
    writer.writeUint64(18, f);
  }
  f = message.getValidatorNodeValidityPeriod();
  if (f !== 0) {
    writer.writeUint64(19, f);
  }
  f = message.getEffectiveFromHeight();
  if (f !== 0) {
    writer.writeUint64(20, f);
  }
  f = message.getValidBlockchainVersionRange();
  if (f != null) {
    writer.writeMessage(21, f, proto.tari.rpc.Range.serializeBinaryToWriter);
  }
  f = message.getMaxRandomxSeedHeight();
  if (f !== 0) {
    writer.writeUint64(22, f);
  }
  f = message.getProofOfWorkMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      23,
      writer,
      jspb.BinaryWriter.prototype.writeUint32,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.tari.rpc.PowAlgorithmConstants.serializeBinaryToWriter,
    );
  }
  f = message.getTransactionWeight();
  if (f != null) {
    writer.writeMessage(24, f, proto.tari.rpc.WeightParams.serializeBinaryToWriter);
  }
  f = message.getInputVersionRange();
  if (f != null) {
    writer.writeMessage(26, f, proto.tari.rpc.Range.serializeBinaryToWriter);
  }
  f = message.getOutputVersionRange();
  if (f != null) {
    writer.writeMessage(27, f, proto.tari.rpc.OutputsVersion.serializeBinaryToWriter);
  }
  f = message.getKernelVersionRange();
  if (f != null) {
    writer.writeMessage(28, f, proto.tari.rpc.Range.serializeBinaryToWriter);
  }
  f = message.getPermittedOutputTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(29, f);
  }
  f = message.getEpochLength();
  if (f !== 0) {
    writer.writeUint64(30, f);
  }
  f = message.getValidatorNodeRegistrationMinDepositAmount();
  if (f !== 0) {
    writer.writeUint64(31, f);
  }
  f = message.getValidatorNodeRegistrationMinLockHeight();
  if (f !== 0) {
    writer.writeUint64(32, f);
  }
  f = message.getValidatorNodeRegistrationShuffleIntervalEpoch();
  if (f !== 0) {
    writer.writeUint64(33, f);
  }
  f = message.getPermittedRangeProofTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(34, f, proto.tari.rpc.PermittedRangeProofs.serializeBinaryToWriter);
  }
  f = message.getInflationBips();
  if (f !== 0) {
    writer.writeUint64(35, f);
  }
  f = message.getTailEpochLength();
  if (f !== 0) {
    writer.writeUint64(36, f);
  }
  f = message.getMaxBlockCoinbaseCount();
  if (f !== 0) {
    writer.writeUint64(37, f);
  }
};

/**
 * optional uint64 coinbase_min_maturity = 1;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getCoinbaseMinMaturity = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setCoinbaseMinMaturity = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 blockchain_version = 2;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getBlockchainVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setBlockchainVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 future_time_limit = 3;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getFutureTimeLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setFutureTimeLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 difficulty_block_window = 5;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getDifficultyBlockWindow = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setDifficultyBlockWindow = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional uint64 max_block_transaction_weight = 7;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getMaxBlockTransactionWeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setMaxBlockTransactionWeight = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional uint64 pow_algo_count = 8;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getPowAlgoCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setPowAlgoCount = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional uint64 median_timestamp_count = 9;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getMedianTimestampCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setMedianTimestampCount = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional uint64 emission_initial = 10;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getEmissionInitial = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setEmissionInitial = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * repeated uint64 emission_decay = 11;
 * @return {!Array<number>}
 */
proto.tari.rpc.ConsensusConstants.prototype.getEmissionDecayList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 11));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setEmissionDecayList = function (value) {
  return jspb.Message.setField(this, 11, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.addEmissionDecay = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearEmissionDecayList = function () {
  return this.setEmissionDecayList([]);
};

/**
 * optional uint64 emission_tail = 12;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getEmissionTail = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setEmissionTail = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};

/**
 * optional uint64 min_sha3x_pow_difficulty = 13;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getMinSha3xPowDifficulty = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setMinSha3xPowDifficulty = function (value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};

/**
 * optional uint64 block_weight_inputs = 14;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getBlockWeightInputs = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setBlockWeightInputs = function (value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};

/**
 * optional uint64 block_weight_outputs = 15;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getBlockWeightOutputs = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setBlockWeightOutputs = function (value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};

/**
 * optional uint64 block_weight_kernels = 16;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getBlockWeightKernels = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setBlockWeightKernels = function (value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};

/**
 * optional uint64 pre_mine_value = 17;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getPreMineValue = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setPreMineValue = function (value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};

/**
 * optional uint64 max_script_byte_size = 18;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getMaxScriptByteSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setMaxScriptByteSize = function (value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};

/**
 * optional uint64 validator_node_validity_period = 19;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getValidatorNodeValidityPeriod = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setValidatorNodeValidityPeriod = function (value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};

/**
 * optional uint64 effective_from_height = 20;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getEffectiveFromHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setEffectiveFromHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};

/**
 * optional Range valid_blockchain_version_range = 21;
 * @return {?proto.tari.rpc.Range}
 */
proto.tari.rpc.ConsensusConstants.prototype.getValidBlockchainVersionRange = function () {
  return /** @type{?proto.tari.rpc.Range} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.Range, 21));
};

/**
 * @param {?proto.tari.rpc.Range|undefined} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setValidBlockchainVersionRange = function (value) {
  return jspb.Message.setWrapperField(this, 21, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearValidBlockchainVersionRange = function () {
  return this.setValidBlockchainVersionRange(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.ConsensusConstants.prototype.hasValidBlockchainVersionRange = function () {
  return jspb.Message.getField(this, 21) != null;
};

/**
 * optional uint64 max_randomx_seed_height = 22;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getMaxRandomxSeedHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setMaxRandomxSeedHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};

/**
 * map<uint32, PowAlgorithmConstants> proof_of_work = 23;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.tari.rpc.PowAlgorithmConstants>}
 */
proto.tari.rpc.ConsensusConstants.prototype.getProofOfWorkMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.tari.rpc.PowAlgorithmConstants>} */ (
    jspb.Message.getMapField(this, 23, opt_noLazyCreate, proto.tari.rpc.PowAlgorithmConstants)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearProofOfWorkMap = function () {
  this.getProofOfWorkMap().clear();
  return this;
};

/**
 * optional WeightParams transaction_weight = 24;
 * @return {?proto.tari.rpc.WeightParams}
 */
proto.tari.rpc.ConsensusConstants.prototype.getTransactionWeight = function () {
  return /** @type{?proto.tari.rpc.WeightParams} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.WeightParams, 24)
  );
};

/**
 * @param {?proto.tari.rpc.WeightParams|undefined} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setTransactionWeight = function (value) {
  return jspb.Message.setWrapperField(this, 24, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearTransactionWeight = function () {
  return this.setTransactionWeight(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.ConsensusConstants.prototype.hasTransactionWeight = function () {
  return jspb.Message.getField(this, 24) != null;
};

/**
 * optional Range input_version_range = 26;
 * @return {?proto.tari.rpc.Range}
 */
proto.tari.rpc.ConsensusConstants.prototype.getInputVersionRange = function () {
  return /** @type{?proto.tari.rpc.Range} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.Range, 26));
};

/**
 * @param {?proto.tari.rpc.Range|undefined} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setInputVersionRange = function (value) {
  return jspb.Message.setWrapperField(this, 26, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearInputVersionRange = function () {
  return this.setInputVersionRange(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.ConsensusConstants.prototype.hasInputVersionRange = function () {
  return jspb.Message.getField(this, 26) != null;
};

/**
 * optional OutputsVersion output_version_range = 27;
 * @return {?proto.tari.rpc.OutputsVersion}
 */
proto.tari.rpc.ConsensusConstants.prototype.getOutputVersionRange = function () {
  return /** @type{?proto.tari.rpc.OutputsVersion} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.OutputsVersion, 27)
  );
};

/**
 * @param {?proto.tari.rpc.OutputsVersion|undefined} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setOutputVersionRange = function (value) {
  return jspb.Message.setWrapperField(this, 27, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearOutputVersionRange = function () {
  return this.setOutputVersionRange(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.ConsensusConstants.prototype.hasOutputVersionRange = function () {
  return jspb.Message.getField(this, 27) != null;
};

/**
 * optional Range kernel_version_range = 28;
 * @return {?proto.tari.rpc.Range}
 */
proto.tari.rpc.ConsensusConstants.prototype.getKernelVersionRange = function () {
  return /** @type{?proto.tari.rpc.Range} */ (jspb.Message.getWrapperField(this, proto.tari.rpc.Range, 28));
};

/**
 * @param {?proto.tari.rpc.Range|undefined} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setKernelVersionRange = function (value) {
  return jspb.Message.setWrapperField(this, 28, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearKernelVersionRange = function () {
  return this.setKernelVersionRange(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.ConsensusConstants.prototype.hasKernelVersionRange = function () {
  return jspb.Message.getField(this, 28) != null;
};

/**
 * repeated OutputType permitted_output_types = 29;
 * @return {!Array<!proto.tari.rpc.OutputType>}
 */
proto.tari.rpc.ConsensusConstants.prototype.getPermittedOutputTypesList = function () {
  return /** @type {!Array<!proto.tari.rpc.OutputType>} */ (jspb.Message.getRepeatedField(this, 29));
};

/**
 * @param {!Array<!proto.tari.rpc.OutputType>} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setPermittedOutputTypesList = function (value) {
  return jspb.Message.setField(this, 29, value || []);
};

/**
 * @param {!proto.tari.rpc.OutputType} value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.addPermittedOutputTypes = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 29, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearPermittedOutputTypesList = function () {
  return this.setPermittedOutputTypesList([]);
};

/**
 * optional uint64 epoch_length = 30;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getEpochLength = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setEpochLength = function (value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};

/**
 * optional uint64 validator_node_registration_min_deposit_amount = 31;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getValidatorNodeRegistrationMinDepositAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setValidatorNodeRegistrationMinDepositAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};

/**
 * optional uint64 validator_node_registration_min_lock_height = 32;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getValidatorNodeRegistrationMinLockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setValidatorNodeRegistrationMinLockHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 32, value);
};

/**
 * optional uint64 validator_node_registration_shuffle_interval_epoch = 33;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getValidatorNodeRegistrationShuffleIntervalEpoch = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setValidatorNodeRegistrationShuffleIntervalEpoch = function (value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};

/**
 * repeated PermittedRangeProofs permitted_range_proof_types = 34;
 * @return {!Array<!proto.tari.rpc.PermittedRangeProofs>}
 */
proto.tari.rpc.ConsensusConstants.prototype.getPermittedRangeProofTypesList = function () {
  return /** @type{!Array<!proto.tari.rpc.PermittedRangeProofs>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tari.rpc.PermittedRangeProofs, 34)
  );
};

/**
 * @param {!Array<!proto.tari.rpc.PermittedRangeProofs>} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setPermittedRangeProofTypesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 34, value);
};

/**
 * @param {!proto.tari.rpc.PermittedRangeProofs=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.PermittedRangeProofs}
 */
proto.tari.rpc.ConsensusConstants.prototype.addPermittedRangeProofTypes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 34, opt_value, proto.tari.rpc.PermittedRangeProofs, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.clearPermittedRangeProofTypesList = function () {
  return this.setPermittedRangeProofTypesList([]);
};

/**
 * optional uint64 inflation_bips = 35;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getInflationBips = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setInflationBips = function (value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};

/**
 * optional uint64 tail_epoch_length = 36;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getTailEpochLength = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setTailEpochLength = function (value) {
  return jspb.Message.setProto3IntField(this, 36, value);
};

/**
 * optional uint64 max_block_coinbase_count = 37;
 * @return {number}
 */
proto.tari.rpc.ConsensusConstants.prototype.getMaxBlockCoinbaseCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 37, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.ConsensusConstants} returns this
 */
proto.tari.rpc.ConsensusConstants.prototype.setMaxBlockCoinbaseCount = function (value) {
  return jspb.Message.setProto3IntField(this, 37, value);
};

/**
 * @enum {number}
 */
proto.tari.rpc.OutputType = {
  STANDARD: 0,
  COINBASE: 1,
  BURN: 2,
  VALIDATOR_NODE_REGISTRATION: 3,
  CODE_TEMPLATE_REGISTRATION: 4,
};

/**
 * @enum {number}
 */
proto.tari.rpc.RangeProofType = {
  BULLETPROOF_PLUS: 0,
  REVEALED_VALUE: 1,
};

goog.object.extend(exports, proto.tari.rpc);
