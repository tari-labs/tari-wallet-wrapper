/**
 * @fileoverview gRPC-Web generated client stub for tari.rpc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: wallet.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from "grpc-web";

import * as wallet_pb from "./wallet_pb"; // proto import: "wallet.proto"
import * as types_pb from "./types_pb"; // proto import: "types.proto"
import * as network_pb from "./network_pb"; // proto import: "network.proto"

export class WalletClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any },
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "binary";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetVersion = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetVersion",
    grpcWeb.MethodType.UNARY,
    wallet_pb.GetVersionRequest,
    wallet_pb.GetVersionResponse,
    (request: wallet_pb.GetVersionRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.GetVersionResponse.deserializeBinary,
  );

  getVersion(
    request: wallet_pb.GetVersionRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.GetVersionResponse>;

  getVersion(
    request: wallet_pb.GetVersionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.GetVersionResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.GetVersionResponse>;

  getVersion(
    request: wallet_pb.GetVersionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.GetVersionResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/GetVersion",
        request,
        metadata || {},
        this.methodDescriptorGetVersion,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/GetVersion",
      request,
      metadata || {},
      this.methodDescriptorGetVersion,
    );
  }

  methodDescriptorGetState = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetState",
    grpcWeb.MethodType.UNARY,
    wallet_pb.GetStateRequest,
    wallet_pb.GetStateResponse,
    (request: wallet_pb.GetStateRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.GetStateResponse.deserializeBinary,
  );

  getState(request: wallet_pb.GetStateRequest, metadata?: grpcWeb.Metadata | null): Promise<wallet_pb.GetStateResponse>;

  getState(
    request: wallet_pb.GetStateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.GetStateResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.GetStateResponse>;

  getState(
    request: wallet_pb.GetStateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.GetStateResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/GetState",
        request,
        metadata || {},
        this.methodDescriptorGetState,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/GetState",
      request,
      metadata || {},
      this.methodDescriptorGetState,
    );
  }

  methodDescriptorCheckConnectivity = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/CheckConnectivity",
    grpcWeb.MethodType.UNARY,
    wallet_pb.GetConnectivityRequest,
    wallet_pb.CheckConnectivityResponse,
    (request: wallet_pb.GetConnectivityRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.CheckConnectivityResponse.deserializeBinary,
  );

  checkConnectivity(
    request: wallet_pb.GetConnectivityRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.CheckConnectivityResponse>;

  checkConnectivity(
    request: wallet_pb.GetConnectivityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.CheckConnectivityResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.CheckConnectivityResponse>;

  checkConnectivity(
    request: wallet_pb.GetConnectivityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.CheckConnectivityResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/CheckConnectivity",
        request,
        metadata || {},
        this.methodDescriptorCheckConnectivity,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/CheckConnectivity",
      request,
      metadata || {},
      this.methodDescriptorCheckConnectivity,
    );
  }

  methodDescriptorCheckForUpdates = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/CheckForUpdates",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    network_pb.SoftwareUpdate,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    network_pb.SoftwareUpdate.deserializeBinary,
  );

  checkForUpdates(request: types_pb.Empty, metadata?: grpcWeb.Metadata | null): Promise<network_pb.SoftwareUpdate>;

  checkForUpdates(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.SoftwareUpdate) => void,
  ): grpcWeb.ClientReadableStream<network_pb.SoftwareUpdate>;

  checkForUpdates(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.SoftwareUpdate) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/CheckForUpdates",
        request,
        metadata || {},
        this.methodDescriptorCheckForUpdates,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/CheckForUpdates",
      request,
      metadata || {},
      this.methodDescriptorCheckForUpdates,
    );
  }

  methodDescriptorIdentify = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/Identify",
    grpcWeb.MethodType.UNARY,
    network_pb.GetIdentityRequest,
    network_pb.GetIdentityResponse,
    (request: network_pb.GetIdentityRequest) => {
      return request.serializeBinary();
    },
    network_pb.GetIdentityResponse.deserializeBinary,
  );

  identify(
    request: network_pb.GetIdentityRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<network_pb.GetIdentityResponse>;

  identify(
    request: network_pb.GetIdentityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.GetIdentityResponse) => void,
  ): grpcWeb.ClientReadableStream<network_pb.GetIdentityResponse>;

  identify(
    request: network_pb.GetIdentityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.GetIdentityResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/Identify",
        request,
        metadata || {},
        this.methodDescriptorIdentify,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/Identify",
      request,
      metadata || {},
      this.methodDescriptorIdentify,
    );
  }

  methodDescriptorGetAddress = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetAddress",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    wallet_pb.GetAddressResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    wallet_pb.GetAddressResponse.deserializeBinary,
  );

  getAddress(request: types_pb.Empty, metadata?: grpcWeb.Metadata | null): Promise<wallet_pb.GetAddressResponse>;

  getAddress(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.GetAddressResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.GetAddressResponse>;

  getAddress(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.GetAddressResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/GetAddress",
        request,
        metadata || {},
        this.methodDescriptorGetAddress,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/GetAddress",
      request,
      metadata || {},
      this.methodDescriptorGetAddress,
    );
  }

  methodDescriptorGetCompleteAddress = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetCompleteAddress",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    wallet_pb.GetCompleteAddressResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    wallet_pb.GetCompleteAddressResponse.deserializeBinary,
  );

  getCompleteAddress(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.GetCompleteAddressResponse>;

  getCompleteAddress(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.GetCompleteAddressResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.GetCompleteAddressResponse>;

  getCompleteAddress(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.GetCompleteAddressResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/GetCompleteAddress",
        request,
        metadata || {},
        this.methodDescriptorGetCompleteAddress,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/GetCompleteAddress",
      request,
      metadata || {},
      this.methodDescriptorGetCompleteAddress,
    );
  }

  methodDescriptorTransfer = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/Transfer",
    grpcWeb.MethodType.UNARY,
    wallet_pb.TransferRequest,
    wallet_pb.TransferResponse,
    (request: wallet_pb.TransferRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.TransferResponse.deserializeBinary,
  );

  transfer(request: wallet_pb.TransferRequest, metadata?: grpcWeb.Metadata | null): Promise<wallet_pb.TransferResponse>;

  transfer(
    request: wallet_pb.TransferRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.TransferResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.TransferResponse>;

  transfer(
    request: wallet_pb.TransferRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.TransferResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/Transfer",
        request,
        metadata || {},
        this.methodDescriptorTransfer,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/Transfer",
      request,
      metadata || {},
      this.methodDescriptorTransfer,
    );
  }

  methodDescriptorGetTransactionInfo = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetTransactionInfo",
    grpcWeb.MethodType.UNARY,
    wallet_pb.GetTransactionInfoRequest,
    wallet_pb.GetTransactionInfoResponse,
    (request: wallet_pb.GetTransactionInfoRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.GetTransactionInfoResponse.deserializeBinary,
  );

  getTransactionInfo(
    request: wallet_pb.GetTransactionInfoRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.GetTransactionInfoResponse>;

  getTransactionInfo(
    request: wallet_pb.GetTransactionInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.GetTransactionInfoResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.GetTransactionInfoResponse>;

  getTransactionInfo(
    request: wallet_pb.GetTransactionInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.GetTransactionInfoResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/GetTransactionInfo",
        request,
        metadata || {},
        this.methodDescriptorGetTransactionInfo,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/GetTransactionInfo",
      request,
      metadata || {},
      this.methodDescriptorGetTransactionInfo,
    );
  }

  methodDescriptorGetCompletedTransactions = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetCompletedTransactions",
    grpcWeb.MethodType.SERVER_STREAMING,
    wallet_pb.GetCompletedTransactionsRequest,
    wallet_pb.GetCompletedTransactionsResponse,
    (request: wallet_pb.GetCompletedTransactionsRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.GetCompletedTransactionsResponse.deserializeBinary,
  );

  getCompletedTransactions(
    request: wallet_pb.GetCompletedTransactionsRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<wallet_pb.GetCompletedTransactionsResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.Wallet/GetCompletedTransactions",
      request,
      metadata || {},
      this.methodDescriptorGetCompletedTransactions,
    );
  }

  methodDescriptorGetBalance = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetBalance",
    grpcWeb.MethodType.UNARY,
    wallet_pb.GetBalanceRequest,
    wallet_pb.GetBalanceResponse,
    (request: wallet_pb.GetBalanceRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.GetBalanceResponse.deserializeBinary,
  );

  getBalance(
    request: wallet_pb.GetBalanceRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.GetBalanceResponse>;

  getBalance(
    request: wallet_pb.GetBalanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.GetBalanceResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.GetBalanceResponse>;

  getBalance(
    request: wallet_pb.GetBalanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.GetBalanceResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/GetBalance",
        request,
        metadata || {},
        this.methodDescriptorGetBalance,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/GetBalance",
      request,
      metadata || {},
      this.methodDescriptorGetBalance,
    );
  }

  methodDescriptorGetUnspentAmounts = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetUnspentAmounts",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    wallet_pb.GetUnspentAmountsResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    wallet_pb.GetUnspentAmountsResponse.deserializeBinary,
  );

  getUnspentAmounts(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.GetUnspentAmountsResponse>;

  getUnspentAmounts(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.GetUnspentAmountsResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.GetUnspentAmountsResponse>;

  getUnspentAmounts(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.GetUnspentAmountsResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/GetUnspentAmounts",
        request,
        metadata || {},
        this.methodDescriptorGetUnspentAmounts,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/GetUnspentAmounts",
      request,
      metadata || {},
      this.methodDescriptorGetUnspentAmounts,
    );
  }

  methodDescriptorCoinSplit = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/CoinSplit",
    grpcWeb.MethodType.UNARY,
    wallet_pb.CoinSplitRequest,
    wallet_pb.CoinSplitResponse,
    (request: wallet_pb.CoinSplitRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.CoinSplitResponse.deserializeBinary,
  );

  coinSplit(
    request: wallet_pb.CoinSplitRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.CoinSplitResponse>;

  coinSplit(
    request: wallet_pb.CoinSplitRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.CoinSplitResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.CoinSplitResponse>;

  coinSplit(
    request: wallet_pb.CoinSplitRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.CoinSplitResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/CoinSplit",
        request,
        metadata || {},
        this.methodDescriptorCoinSplit,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/CoinSplit",
      request,
      metadata || {},
      this.methodDescriptorCoinSplit,
    );
  }

  methodDescriptorImportUtxos = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/ImportUtxos",
    grpcWeb.MethodType.UNARY,
    wallet_pb.ImportUtxosRequest,
    wallet_pb.ImportUtxosResponse,
    (request: wallet_pb.ImportUtxosRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.ImportUtxosResponse.deserializeBinary,
  );

  importUtxos(
    request: wallet_pb.ImportUtxosRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.ImportUtxosResponse>;

  importUtxos(
    request: wallet_pb.ImportUtxosRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.ImportUtxosResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.ImportUtxosResponse>;

  importUtxos(
    request: wallet_pb.ImportUtxosRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.ImportUtxosResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/ImportUtxos",
        request,
        metadata || {},
        this.methodDescriptorImportUtxos,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/ImportUtxos",
      request,
      metadata || {},
      this.methodDescriptorImportUtxos,
    );
  }

  methodDescriptorGetNetworkStatus = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/GetNetworkStatus",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    network_pb.NetworkStatusResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    network_pb.NetworkStatusResponse.deserializeBinary,
  );

  getNetworkStatus(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<network_pb.NetworkStatusResponse>;

  getNetworkStatus(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.NetworkStatusResponse) => void,
  ): grpcWeb.ClientReadableStream<network_pb.NetworkStatusResponse>;

  getNetworkStatus(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.NetworkStatusResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/GetNetworkStatus",
        request,
        metadata || {},
        this.methodDescriptorGetNetworkStatus,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/GetNetworkStatus",
      request,
      metadata || {},
      this.methodDescriptorGetNetworkStatus,
    );
  }

  methodDescriptorListConnectedPeers = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/ListConnectedPeers",
    grpcWeb.MethodType.UNARY,
    types_pb.Empty,
    network_pb.ListConnectedPeersResponse,
    (request: types_pb.Empty) => {
      return request.serializeBinary();
    },
    network_pb.ListConnectedPeersResponse.deserializeBinary,
  );

  listConnectedPeers(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<network_pb.ListConnectedPeersResponse>;

  listConnectedPeers(
    request: types_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.ListConnectedPeersResponse) => void,
  ): grpcWeb.ClientReadableStream<network_pb.ListConnectedPeersResponse>;

  listConnectedPeers(
    request: types_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.ListConnectedPeersResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/ListConnectedPeers",
        request,
        metadata || {},
        this.methodDescriptorListConnectedPeers,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/ListConnectedPeers",
      request,
      metadata || {},
      this.methodDescriptorListConnectedPeers,
    );
  }

  methodDescriptorCancelTransaction = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/CancelTransaction",
    grpcWeb.MethodType.UNARY,
    wallet_pb.CancelTransactionRequest,
    wallet_pb.CancelTransactionResponse,
    (request: wallet_pb.CancelTransactionRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.CancelTransactionResponse.deserializeBinary,
  );

  cancelTransaction(
    request: wallet_pb.CancelTransactionRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.CancelTransactionResponse>;

  cancelTransaction(
    request: wallet_pb.CancelTransactionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.CancelTransactionResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.CancelTransactionResponse>;

  cancelTransaction(
    request: wallet_pb.CancelTransactionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.CancelTransactionResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/CancelTransaction",
        request,
        metadata || {},
        this.methodDescriptorCancelTransaction,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/CancelTransaction",
      request,
      metadata || {},
      this.methodDescriptorCancelTransaction,
    );
  }

  methodDescriptorRevalidateAllTransactions = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/RevalidateAllTransactions",
    grpcWeb.MethodType.UNARY,
    wallet_pb.RevalidateRequest,
    wallet_pb.RevalidateResponse,
    (request: wallet_pb.RevalidateRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.RevalidateResponse.deserializeBinary,
  );

  revalidateAllTransactions(
    request: wallet_pb.RevalidateRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.RevalidateResponse>;

  revalidateAllTransactions(
    request: wallet_pb.RevalidateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.RevalidateResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.RevalidateResponse>;

  revalidateAllTransactions(
    request: wallet_pb.RevalidateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.RevalidateResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/RevalidateAllTransactions",
        request,
        metadata || {},
        this.methodDescriptorRevalidateAllTransactions,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/RevalidateAllTransactions",
      request,
      metadata || {},
      this.methodDescriptorRevalidateAllTransactions,
    );
  }

  methodDescriptorValidateAllTransactions = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/ValidateAllTransactions",
    grpcWeb.MethodType.UNARY,
    wallet_pb.ValidateRequest,
    wallet_pb.ValidateResponse,
    (request: wallet_pb.ValidateRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.ValidateResponse.deserializeBinary,
  );

  validateAllTransactions(
    request: wallet_pb.ValidateRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.ValidateResponse>;

  validateAllTransactions(
    request: wallet_pb.ValidateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.ValidateResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.ValidateResponse>;

  validateAllTransactions(
    request: wallet_pb.ValidateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.ValidateResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/ValidateAllTransactions",
        request,
        metadata || {},
        this.methodDescriptorValidateAllTransactions,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/ValidateAllTransactions",
      request,
      metadata || {},
      this.methodDescriptorValidateAllTransactions,
    );
  }

  methodDescriptorSendShaAtomicSwapTransaction = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/SendShaAtomicSwapTransaction",
    grpcWeb.MethodType.UNARY,
    wallet_pb.SendShaAtomicSwapRequest,
    wallet_pb.SendShaAtomicSwapResponse,
    (request: wallet_pb.SendShaAtomicSwapRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.SendShaAtomicSwapResponse.deserializeBinary,
  );

  sendShaAtomicSwapTransaction(
    request: wallet_pb.SendShaAtomicSwapRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.SendShaAtomicSwapResponse>;

  sendShaAtomicSwapTransaction(
    request: wallet_pb.SendShaAtomicSwapRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.SendShaAtomicSwapResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.SendShaAtomicSwapResponse>;

  sendShaAtomicSwapTransaction(
    request: wallet_pb.SendShaAtomicSwapRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.SendShaAtomicSwapResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/SendShaAtomicSwapTransaction",
        request,
        metadata || {},
        this.methodDescriptorSendShaAtomicSwapTransaction,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/SendShaAtomicSwapTransaction",
      request,
      metadata || {},
      this.methodDescriptorSendShaAtomicSwapTransaction,
    );
  }

  methodDescriptorCreateBurnTransaction = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/CreateBurnTransaction",
    grpcWeb.MethodType.UNARY,
    wallet_pb.CreateBurnTransactionRequest,
    wallet_pb.CreateBurnTransactionResponse,
    (request: wallet_pb.CreateBurnTransactionRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.CreateBurnTransactionResponse.deserializeBinary,
  );

  createBurnTransaction(
    request: wallet_pb.CreateBurnTransactionRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.CreateBurnTransactionResponse>;

  createBurnTransaction(
    request: wallet_pb.CreateBurnTransactionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.CreateBurnTransactionResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.CreateBurnTransactionResponse>;

  createBurnTransaction(
    request: wallet_pb.CreateBurnTransactionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.CreateBurnTransactionResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/CreateBurnTransaction",
        request,
        metadata || {},
        this.methodDescriptorCreateBurnTransaction,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/CreateBurnTransaction",
      request,
      metadata || {},
      this.methodDescriptorCreateBurnTransaction,
    );
  }

  methodDescriptorClaimShaAtomicSwapTransaction = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/ClaimShaAtomicSwapTransaction",
    grpcWeb.MethodType.UNARY,
    wallet_pb.ClaimShaAtomicSwapRequest,
    wallet_pb.ClaimShaAtomicSwapResponse,
    (request: wallet_pb.ClaimShaAtomicSwapRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.ClaimShaAtomicSwapResponse.deserializeBinary,
  );

  claimShaAtomicSwapTransaction(
    request: wallet_pb.ClaimShaAtomicSwapRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.ClaimShaAtomicSwapResponse>;

  claimShaAtomicSwapTransaction(
    request: wallet_pb.ClaimShaAtomicSwapRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.ClaimShaAtomicSwapResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.ClaimShaAtomicSwapResponse>;

  claimShaAtomicSwapTransaction(
    request: wallet_pb.ClaimShaAtomicSwapRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.ClaimShaAtomicSwapResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/ClaimShaAtomicSwapTransaction",
        request,
        metadata || {},
        this.methodDescriptorClaimShaAtomicSwapTransaction,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/ClaimShaAtomicSwapTransaction",
      request,
      metadata || {},
      this.methodDescriptorClaimShaAtomicSwapTransaction,
    );
  }

  methodDescriptorClaimHtlcRefundTransaction = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/ClaimHtlcRefundTransaction",
    grpcWeb.MethodType.UNARY,
    wallet_pb.ClaimHtlcRefundRequest,
    wallet_pb.ClaimHtlcRefundResponse,
    (request: wallet_pb.ClaimHtlcRefundRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.ClaimHtlcRefundResponse.deserializeBinary,
  );

  claimHtlcRefundTransaction(
    request: wallet_pb.ClaimHtlcRefundRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.ClaimHtlcRefundResponse>;

  claimHtlcRefundTransaction(
    request: wallet_pb.ClaimHtlcRefundRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.ClaimHtlcRefundResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.ClaimHtlcRefundResponse>;

  claimHtlcRefundTransaction(
    request: wallet_pb.ClaimHtlcRefundRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.ClaimHtlcRefundResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/ClaimHtlcRefundTransaction",
        request,
        metadata || {},
        this.methodDescriptorClaimHtlcRefundTransaction,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/ClaimHtlcRefundTransaction",
      request,
      metadata || {},
      this.methodDescriptorClaimHtlcRefundTransaction,
    );
  }

  methodDescriptorCreateTemplateRegistration = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/CreateTemplateRegistration",
    grpcWeb.MethodType.UNARY,
    wallet_pb.CreateTemplateRegistrationRequest,
    wallet_pb.CreateTemplateRegistrationResponse,
    (request: wallet_pb.CreateTemplateRegistrationRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.CreateTemplateRegistrationResponse.deserializeBinary,
  );

  createTemplateRegistration(
    request: wallet_pb.CreateTemplateRegistrationRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.CreateTemplateRegistrationResponse>;

  createTemplateRegistration(
    request: wallet_pb.CreateTemplateRegistrationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.CreateTemplateRegistrationResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.CreateTemplateRegistrationResponse>;

  createTemplateRegistration(
    request: wallet_pb.CreateTemplateRegistrationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.CreateTemplateRegistrationResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/CreateTemplateRegistration",
        request,
        metadata || {},
        this.methodDescriptorCreateTemplateRegistration,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/CreateTemplateRegistration",
      request,
      metadata || {},
      this.methodDescriptorCreateTemplateRegistration,
    );
  }

  methodDescriptorSetBaseNode = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/SetBaseNode",
    grpcWeb.MethodType.UNARY,
    wallet_pb.SetBaseNodeRequest,
    wallet_pb.SetBaseNodeResponse,
    (request: wallet_pb.SetBaseNodeRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.SetBaseNodeResponse.deserializeBinary,
  );

  setBaseNode(
    request: wallet_pb.SetBaseNodeRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.SetBaseNodeResponse>;

  setBaseNode(
    request: wallet_pb.SetBaseNodeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.SetBaseNodeResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.SetBaseNodeResponse>;

  setBaseNode(
    request: wallet_pb.SetBaseNodeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.SetBaseNodeResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/SetBaseNode",
        request,
        metadata || {},
        this.methodDescriptorSetBaseNode,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/SetBaseNode",
      request,
      metadata || {},
      this.methodDescriptorSetBaseNode,
    );
  }

  methodDescriptorStreamTransactionEvents = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/StreamTransactionEvents",
    grpcWeb.MethodType.SERVER_STREAMING,
    wallet_pb.TransactionEventRequest,
    wallet_pb.TransactionEventResponse,
    (request: wallet_pb.TransactionEventRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.TransactionEventResponse.deserializeBinary,
  );

  streamTransactionEvents(
    request: wallet_pb.TransactionEventRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<wallet_pb.TransactionEventResponse> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.Wallet/StreamTransactionEvents",
      request,
      metadata || {},
      this.methodDescriptorStreamTransactionEvents,
    );
  }

  methodDescriptorRegisterValidatorNode = new grpcWeb.MethodDescriptor(
    "/tari.rpc.Wallet/RegisterValidatorNode",
    grpcWeb.MethodType.UNARY,
    wallet_pb.RegisterValidatorNodeRequest,
    wallet_pb.RegisterValidatorNodeResponse,
    (request: wallet_pb.RegisterValidatorNodeRequest) => {
      return request.serializeBinary();
    },
    wallet_pb.RegisterValidatorNodeResponse.deserializeBinary,
  );

  registerValidatorNode(
    request: wallet_pb.RegisterValidatorNodeRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<wallet_pb.RegisterValidatorNodeResponse>;

  registerValidatorNode(
    request: wallet_pb.RegisterValidatorNodeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: wallet_pb.RegisterValidatorNodeResponse) => void,
  ): grpcWeb.ClientReadableStream<wallet_pb.RegisterValidatorNodeResponse>;

  registerValidatorNode(
    request: wallet_pb.RegisterValidatorNodeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: wallet_pb.RegisterValidatorNodeResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.Wallet/RegisterValidatorNode",
        request,
        metadata || {},
        this.methodDescriptorRegisterValidatorNode,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.Wallet/RegisterValidatorNode",
      request,
      metadata || {},
      this.methodDescriptorRegisterValidatorNode,
    );
  }
}
