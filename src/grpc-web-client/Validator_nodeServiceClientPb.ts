/**
 * @fileoverview gRPC-Web generated client stub for tari.rpc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: validator_node.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from "grpc-web";

import * as validator_node_pb from "./validator_node_pb"; // proto import: "validator_node.proto"
import * as network_pb from "./network_pb"; // proto import: "network.proto"
import * as transaction_pb from "./transaction_pb"; // proto import: "transaction.proto"

export class ValidatorNodeClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any },
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "binary";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetIdentity = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ValidatorNode/GetIdentity",
    grpcWeb.MethodType.UNARY,
    network_pb.GetIdentityRequest,
    network_pb.GetIdentityResponse,
    (request: network_pb.GetIdentityRequest) => {
      return request.serializeBinary();
    },
    network_pb.GetIdentityResponse.deserializeBinary,
  );

  getIdentity(
    request: network_pb.GetIdentityRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<network_pb.GetIdentityResponse>;

  getIdentity(
    request: network_pb.GetIdentityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: network_pb.GetIdentityResponse) => void,
  ): grpcWeb.ClientReadableStream<network_pb.GetIdentityResponse>;

  getIdentity(
    request: network_pb.GetIdentityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: network_pb.GetIdentityResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ValidatorNode/GetIdentity",
        request,
        metadata || {},
        this.methodDescriptorGetIdentity,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ValidatorNode/GetIdentity",
      request,
      metadata || {},
      this.methodDescriptorGetIdentity,
    );
  }

  methodDescriptorGetMetadata = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ValidatorNode/GetMetadata",
    grpcWeb.MethodType.UNARY,
    validator_node_pb.GetMetadataRequest,
    validator_node_pb.GetMetadataResponse,
    (request: validator_node_pb.GetMetadataRequest) => {
      return request.serializeBinary();
    },
    validator_node_pb.GetMetadataResponse.deserializeBinary,
  );

  getMetadata(
    request: validator_node_pb.GetMetadataRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<validator_node_pb.GetMetadataResponse>;

  getMetadata(
    request: validator_node_pb.GetMetadataRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: validator_node_pb.GetMetadataResponse) => void,
  ): grpcWeb.ClientReadableStream<validator_node_pb.GetMetadataResponse>;

  getMetadata(
    request: validator_node_pb.GetMetadataRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: validator_node_pb.GetMetadataResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ValidatorNode/GetMetadata",
        request,
        metadata || {},
        this.methodDescriptorGetMetadata,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ValidatorNode/GetMetadata",
      request,
      metadata || {},
      this.methodDescriptorGetMetadata,
    );
  }

  methodDescriptorGetTokenData = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ValidatorNode/GetTokenData",
    grpcWeb.MethodType.UNARY,
    validator_node_pb.GetTokenDataRequest,
    validator_node_pb.GetTokenDataResponse,
    (request: validator_node_pb.GetTokenDataRequest) => {
      return request.serializeBinary();
    },
    validator_node_pb.GetTokenDataResponse.deserializeBinary,
  );

  getTokenData(
    request: validator_node_pb.GetTokenDataRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<validator_node_pb.GetTokenDataResponse>;

  getTokenData(
    request: validator_node_pb.GetTokenDataRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: validator_node_pb.GetTokenDataResponse) => void,
  ): grpcWeb.ClientReadableStream<validator_node_pb.GetTokenDataResponse>;

  getTokenData(
    request: validator_node_pb.GetTokenDataRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: validator_node_pb.GetTokenDataResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ValidatorNode/GetTokenData",
        request,
        metadata || {},
        this.methodDescriptorGetTokenData,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ValidatorNode/GetTokenData",
      request,
      metadata || {},
      this.methodDescriptorGetTokenData,
    );
  }

  methodDescriptorInvokeReadMethod = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ValidatorNode/InvokeReadMethod",
    grpcWeb.MethodType.UNARY,
    validator_node_pb.InvokeReadMethodRequest,
    validator_node_pb.InvokeReadMethodResponse,
    (request: validator_node_pb.InvokeReadMethodRequest) => {
      return request.serializeBinary();
    },
    validator_node_pb.InvokeReadMethodResponse.deserializeBinary,
  );

  invokeReadMethod(
    request: validator_node_pb.InvokeReadMethodRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<validator_node_pb.InvokeReadMethodResponse>;

  invokeReadMethod(
    request: validator_node_pb.InvokeReadMethodRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: validator_node_pb.InvokeReadMethodResponse) => void,
  ): grpcWeb.ClientReadableStream<validator_node_pb.InvokeReadMethodResponse>;

  invokeReadMethod(
    request: validator_node_pb.InvokeReadMethodRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: validator_node_pb.InvokeReadMethodResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ValidatorNode/InvokeReadMethod",
        request,
        metadata || {},
        this.methodDescriptorInvokeReadMethod,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ValidatorNode/InvokeReadMethod",
      request,
      metadata || {},
      this.methodDescriptorInvokeReadMethod,
    );
  }

  methodDescriptorInvokeMethod = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ValidatorNode/InvokeMethod",
    grpcWeb.MethodType.UNARY,
    validator_node_pb.InvokeMethodRequest,
    validator_node_pb.InvokeMethodResponse,
    (request: validator_node_pb.InvokeMethodRequest) => {
      return request.serializeBinary();
    },
    validator_node_pb.InvokeMethodResponse.deserializeBinary,
  );

  invokeMethod(
    request: validator_node_pb.InvokeMethodRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<validator_node_pb.InvokeMethodResponse>;

  invokeMethod(
    request: validator_node_pb.InvokeMethodRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: validator_node_pb.InvokeMethodResponse) => void,
  ): grpcWeb.ClientReadableStream<validator_node_pb.InvokeMethodResponse>;

  invokeMethod(
    request: validator_node_pb.InvokeMethodRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: validator_node_pb.InvokeMethodResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ValidatorNode/InvokeMethod",
        request,
        metadata || {},
        this.methodDescriptorInvokeMethod,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ValidatorNode/InvokeMethod",
      request,
      metadata || {},
      this.methodDescriptorInvokeMethod,
    );
  }

  methodDescriptorGetConstitutionRequests = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ValidatorNode/GetConstitutionRequests",
    grpcWeb.MethodType.SERVER_STREAMING,
    validator_node_pb.GetConstitutionRequestsRequest,
    transaction_pb.TransactionOutput,
    (request: validator_node_pb.GetConstitutionRequestsRequest) => {
      return request.serializeBinary();
    },
    transaction_pb.TransactionOutput.deserializeBinary,
  );

  getConstitutionRequests(
    request: validator_node_pb.GetConstitutionRequestsRequest,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<transaction_pb.TransactionOutput> {
    return this.client_.serverStreaming(
      this.hostname_ + "/tari.rpc.ValidatorNode/GetConstitutionRequests",
      request,
      metadata || {},
      this.methodDescriptorGetConstitutionRequests,
    );
  }

  methodDescriptorPublishContractAcceptance = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ValidatorNode/PublishContractAcceptance",
    grpcWeb.MethodType.UNARY,
    validator_node_pb.PublishContractAcceptanceRequest,
    validator_node_pb.PublishContractAcceptanceResponse,
    (request: validator_node_pb.PublishContractAcceptanceRequest) => {
      return request.serializeBinary();
    },
    validator_node_pb.PublishContractAcceptanceResponse.deserializeBinary,
  );

  publishContractAcceptance(
    request: validator_node_pb.PublishContractAcceptanceRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<validator_node_pb.PublishContractAcceptanceResponse>;

  publishContractAcceptance(
    request: validator_node_pb.PublishContractAcceptanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: validator_node_pb.PublishContractAcceptanceResponse) => void,
  ): grpcWeb.ClientReadableStream<validator_node_pb.PublishContractAcceptanceResponse>;

  publishContractAcceptance(
    request: validator_node_pb.PublishContractAcceptanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: validator_node_pb.PublishContractAcceptanceResponse) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ValidatorNode/PublishContractAcceptance",
        request,
        metadata || {},
        this.methodDescriptorPublishContractAcceptance,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ValidatorNode/PublishContractAcceptance",
      request,
      metadata || {},
      this.methodDescriptorPublishContractAcceptance,
    );
  }

  methodDescriptorPublishContractUpdateProposalAcceptance = new grpcWeb.MethodDescriptor(
    "/tari.rpc.ValidatorNode/PublishContractUpdateProposalAcceptance",
    grpcWeb.MethodType.UNARY,
    validator_node_pb.PublishContractUpdateProposalAcceptanceRequest,
    validator_node_pb.PublishContractUpdateProposalAcceptanceResponse,
    (request: validator_node_pb.PublishContractUpdateProposalAcceptanceRequest) => {
      return request.serializeBinary();
    },
    validator_node_pb.PublishContractUpdateProposalAcceptanceResponse.deserializeBinary,
  );

  publishContractUpdateProposalAcceptance(
    request: validator_node_pb.PublishContractUpdateProposalAcceptanceRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<validator_node_pb.PublishContractUpdateProposalAcceptanceResponse>;

  publishContractUpdateProposalAcceptance(
    request: validator_node_pb.PublishContractUpdateProposalAcceptanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: validator_node_pb.PublishContractUpdateProposalAcceptanceResponse,
    ) => void,
  ): grpcWeb.ClientReadableStream<validator_node_pb.PublishContractUpdateProposalAcceptanceResponse>;

  publishContractUpdateProposalAcceptance(
    request: validator_node_pb.PublishContractUpdateProposalAcceptanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: validator_node_pb.PublishContractUpdateProposalAcceptanceResponse,
    ) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/tari.rpc.ValidatorNode/PublishContractUpdateProposalAcceptance",
        request,
        metadata || {},
        this.methodDescriptorPublishContractUpdateProposalAcceptance,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/tari.rpc.ValidatorNode/PublishContractUpdateProposalAcceptance",
      request,
      metadata || {},
      this.methodDescriptorPublishContractUpdateProposalAcceptance,
    );
  }
}
