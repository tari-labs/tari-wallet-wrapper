// source: transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

var types_pb = require("./types_pb.js");
goog.object.extend(proto, types_pb);
var sidechain_types_pb = require("./sidechain_types_pb.js");
goog.object.extend(proto, sidechain_types_pb);
goog.exportSymbol("proto.tari.rpc.AggregateBody", null, global);
goog.exportSymbol("proto.tari.rpc.OutputFeatures", null, global);
goog.exportSymbol("proto.tari.rpc.Transaction", null, global);
goog.exportSymbol("proto.tari.rpc.TransactionInput", null, global);
goog.exportSymbol("proto.tari.rpc.TransactionKernel", null, global);
goog.exportSymbol("proto.tari.rpc.TransactionOutput", null, global);
goog.exportSymbol("proto.tari.rpc.UnblindedOutput", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.TransactionKernel = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.TransactionKernel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.TransactionKernel.displayName = "proto.tari.rpc.TransactionKernel";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.TransactionInput = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.TransactionInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.TransactionInput.displayName = "proto.tari.rpc.TransactionInput";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.TransactionOutput = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.TransactionOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.TransactionOutput.displayName = "proto.tari.rpc.TransactionOutput";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.OutputFeatures = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.OutputFeatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.OutputFeatures.displayName = "proto.tari.rpc.OutputFeatures";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.AggregateBody = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tari.rpc.AggregateBody.repeatedFields_, null);
};
goog.inherits(proto.tari.rpc.AggregateBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.AggregateBody.displayName = "proto.tari.rpc.AggregateBody";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.Transaction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.Transaction.displayName = "proto.tari.rpc.Transaction";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tari.rpc.UnblindedOutput = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tari.rpc.UnblindedOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tari.rpc.UnblindedOutput.displayName = "proto.tari.rpc.UnblindedOutput";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.TransactionKernel.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.TransactionKernel.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.TransactionKernel} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.TransactionKernel.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        features: jspb.Message.getFieldWithDefault(msg, 1, 0),
        fee: jspb.Message.getFieldWithDefault(msg, 2, 0),
        lockHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
        excess: msg.getExcess_asB64(),
        excessSig: (f = msg.getExcessSig()) && types_pb.Signature.toObject(includeInstance, f),
        hash: msg.getHash_asB64(),
        version: jspb.Message.getFieldWithDefault(msg, 9, 0),
        burnCommitment: msg.getBurnCommitment_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.TransactionKernel}
 */
proto.tari.rpc.TransactionKernel.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.TransactionKernel();
  return proto.tari.rpc.TransactionKernel.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.TransactionKernel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.TransactionKernel}
 */
proto.tari.rpc.TransactionKernel.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setFeatures(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setFee(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setLockHeight(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setExcess(value);
        break;
      case 7:
        var value = new types_pb.Signature();
        reader.readMessage(value, types_pb.Signature.deserializeBinaryFromReader);
        msg.setExcessSig(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVersion(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBurnCommitment(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionKernel.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.TransactionKernel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.TransactionKernel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.TransactionKernel.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFeatures();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getLockHeight();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getExcess_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getExcessSig();
  if (f != null) {
    writer.writeMessage(7, f, types_pb.Signature.serializeBinaryToWriter);
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(9, f);
  }
  f = message.getBurnCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
};

/**
 * optional uint32 features = 1;
 * @return {number}
 */
proto.tari.rpc.TransactionKernel.prototype.getFeatures = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.setFeatures = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 fee = 2;
 * @return {number}
 */
proto.tari.rpc.TransactionKernel.prototype.getFee = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.setFee = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 lock_height = 3;
 * @return {number}
 */
proto.tari.rpc.TransactionKernel.prototype.getLockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.setLockHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes excess = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionKernel.prototype.getExcess = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/**
 * optional bytes excess = 6;
 * This is a type-conversion wrapper around `getExcess()`
 * @return {string}
 */
proto.tari.rpc.TransactionKernel.prototype.getExcess_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getExcess()));
};

/**
 * optional bytes excess = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExcess()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionKernel.prototype.getExcess_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getExcess()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.setExcess = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * optional Signature excess_sig = 7;
 * @return {?proto.tari.rpc.Signature}
 */
proto.tari.rpc.TransactionKernel.prototype.getExcessSig = function () {
  return /** @type{?proto.tari.rpc.Signature} */ (jspb.Message.getWrapperField(this, types_pb.Signature, 7));
};

/**
 * @param {?proto.tari.rpc.Signature|undefined} value
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.setExcessSig = function (value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.clearExcessSig = function () {
  return this.setExcessSig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TransactionKernel.prototype.hasExcessSig = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional bytes hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionKernel.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/**
 * optional bytes hash = 8;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.tari.rpc.TransactionKernel.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionKernel.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.setHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};

/**
 * optional uint32 version = 9;
 * @return {number}
 */
proto.tari.rpc.TransactionKernel.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional bytes burn_commitment = 10;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionKernel.prototype.getBurnCommitment = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};

/**
 * optional bytes burn_commitment = 10;
 * This is a type-conversion wrapper around `getBurnCommitment()`
 * @return {string}
 */
proto.tari.rpc.TransactionKernel.prototype.getBurnCommitment_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBurnCommitment()));
};

/**
 * optional bytes burn_commitment = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBurnCommitment()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionKernel.prototype.getBurnCommitment_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBurnCommitment()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionKernel} returns this
 */
proto.tari.rpc.TransactionKernel.prototype.setBurnCommitment = function (value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.TransactionInput.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.TransactionInput.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.TransactionInput} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.TransactionInput.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        features: (f = msg.getFeatures()) && proto.tari.rpc.OutputFeatures.toObject(includeInstance, f),
        commitment: msg.getCommitment_asB64(),
        hash: msg.getHash_asB64(),
        script: msg.getScript_asB64(),
        inputData: msg.getInputData_asB64(),
        scriptSignature: (f = msg.getScriptSignature()) && types_pb.ComAndPubSignature.toObject(includeInstance, f),
        senderOffsetPublicKey: msg.getSenderOffsetPublicKey_asB64(),
        outputHash: msg.getOutputHash_asB64(),
        covenant: msg.getCovenant_asB64(),
        version: jspb.Message.getFieldWithDefault(msg, 11, 0),
        encryptedData: msg.getEncryptedData_asB64(),
        minimumValuePromise: jspb.Message.getFieldWithDefault(msg, 13, 0),
        metadataSignature: (f = msg.getMetadataSignature()) && types_pb.ComAndPubSignature.toObject(includeInstance, f),
        rangeproofHash: msg.getRangeproofHash_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.TransactionInput}
 */
proto.tari.rpc.TransactionInput.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.TransactionInput();
  return proto.tari.rpc.TransactionInput.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.TransactionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.TransactionInput}
 */
proto.tari.rpc.TransactionInput.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.OutputFeatures();
        reader.readMessage(value, proto.tari.rpc.OutputFeatures.deserializeBinaryFromReader);
        msg.setFeatures(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCommitment(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setScript(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setInputData(value);
        break;
      case 7:
        var value = new types_pb.ComAndPubSignature();
        reader.readMessage(value, types_pb.ComAndPubSignature.deserializeBinaryFromReader);
        msg.setScriptSignature(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSenderOffsetPublicKey(value);
        break;
      case 9:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setOutputHash(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCovenant(value);
        break;
      case 11:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVersion(value);
        break;
      case 12:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEncryptedData(value);
        break;
      case 13:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMinimumValuePromise(value);
        break;
      case 14:
        var value = new types_pb.ComAndPubSignature();
        reader.readMessage(value, types_pb.ComAndPubSignature.deserializeBinaryFromReader);
        msg.setMetadataSignature(value);
        break;
      case 15:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setRangeproofHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.TransactionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.TransactionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.TransactionInput.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(1, f, proto.tari.rpc.OutputFeatures.serializeBinaryToWriter);
  }
  f = message.getCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getInputData_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getScriptSignature();
  if (f != null) {
    writer.writeMessage(7, f, types_pb.ComAndPubSignature.serializeBinaryToWriter);
  }
  f = message.getSenderOffsetPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = message.getOutputHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(9, f);
  }
  f = message.getCovenant_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(11, f);
  }
  f = message.getEncryptedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(12, f);
  }
  f = message.getMinimumValuePromise();
  if (f !== 0) {
    writer.writeUint64(13, f);
  }
  f = message.getMetadataSignature();
  if (f != null) {
    writer.writeMessage(14, f, types_pb.ComAndPubSignature.serializeBinaryToWriter);
  }
  f = message.getRangeproofHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(15, f);
  }
};

/**
 * optional OutputFeatures features = 1;
 * @return {?proto.tari.rpc.OutputFeatures}
 */
proto.tari.rpc.TransactionInput.prototype.getFeatures = function () {
  return /** @type{?proto.tari.rpc.OutputFeatures} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.OutputFeatures, 1)
  );
};

/**
 * @param {?proto.tari.rpc.OutputFeatures|undefined} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setFeatures = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.clearFeatures = function () {
  return this.setFeatures(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TransactionInput.prototype.hasFeatures = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes commitment = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getCommitment = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes commitment = 2;
 * This is a type-conversion wrapper around `getCommitment()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getCommitment_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCommitment()));
};

/**
 * optional bytes commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommitment()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getCommitment_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCommitment()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setCommitment = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes script = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getScript = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes script = 4;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getScript_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getScript()));
};

/**
 * optional bytes script = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getScript_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getScript()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setScript = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes input_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getInputData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * optional bytes input_data = 5;
 * This is a type-conversion wrapper around `getInputData()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getInputData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getInputData()));
};

/**
 * optional bytes input_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputData()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getInputData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getInputData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setInputData = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional ComAndPubSignature script_signature = 7;
 * @return {?proto.tari.rpc.ComAndPubSignature}
 */
proto.tari.rpc.TransactionInput.prototype.getScriptSignature = function () {
  return /** @type{?proto.tari.rpc.ComAndPubSignature} */ (
    jspb.Message.getWrapperField(this, types_pb.ComAndPubSignature, 7)
  );
};

/**
 * @param {?proto.tari.rpc.ComAndPubSignature|undefined} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setScriptSignature = function (value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.clearScriptSignature = function () {
  return this.setScriptSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TransactionInput.prototype.hasScriptSignature = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional bytes sender_offset_public_key = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getSenderOffsetPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/**
 * optional bytes sender_offset_public_key = 8;
 * This is a type-conversion wrapper around `getSenderOffsetPublicKey()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getSenderOffsetPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSenderOffsetPublicKey()));
};

/**
 * optional bytes sender_offset_public_key = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderOffsetPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getSenderOffsetPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSenderOffsetPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setSenderOffsetPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};

/**
 * optional bytes output_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getOutputHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};

/**
 * optional bytes output_hash = 9;
 * This is a type-conversion wrapper around `getOutputHash()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getOutputHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOutputHash()));
};

/**
 * optional bytes output_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getOutputHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOutputHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setOutputHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};

/**
 * optional bytes covenant = 10;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getCovenant = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};

/**
 * optional bytes covenant = 10;
 * This is a type-conversion wrapper around `getCovenant()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getCovenant_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCovenant()));
};

/**
 * optional bytes covenant = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCovenant()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getCovenant_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCovenant()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setCovenant = function (value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};

/**
 * optional uint32 version = 11;
 * @return {number}
 */
proto.tari.rpc.TransactionInput.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional bytes encrypted_data = 12;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getEncryptedData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};

/**
 * optional bytes encrypted_data = 12;
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getEncryptedData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEncryptedData()));
};

/**
 * optional bytes encrypted_data = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getEncryptedData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEncryptedData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setEncryptedData = function (value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};

/**
 * optional uint64 minimum_value_promise = 13;
 * @return {number}
 */
proto.tari.rpc.TransactionInput.prototype.getMinimumValuePromise = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setMinimumValuePromise = function (value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};

/**
 * optional ComAndPubSignature metadata_signature = 14;
 * @return {?proto.tari.rpc.ComAndPubSignature}
 */
proto.tari.rpc.TransactionInput.prototype.getMetadataSignature = function () {
  return /** @type{?proto.tari.rpc.ComAndPubSignature} */ (
    jspb.Message.getWrapperField(this, types_pb.ComAndPubSignature, 14)
  );
};

/**
 * @param {?proto.tari.rpc.ComAndPubSignature|undefined} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setMetadataSignature = function (value) {
  return jspb.Message.setWrapperField(this, 14, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.clearMetadataSignature = function () {
  return this.setMetadataSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TransactionInput.prototype.hasMetadataSignature = function () {
  return jspb.Message.getField(this, 14) != null;
};

/**
 * optional bytes rangeproof_hash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionInput.prototype.getRangeproofHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};

/**
 * optional bytes rangeproof_hash = 15;
 * This is a type-conversion wrapper around `getRangeproofHash()`
 * @return {string}
 */
proto.tari.rpc.TransactionInput.prototype.getRangeproofHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getRangeproofHash()));
};

/**
 * optional bytes rangeproof_hash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeproofHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionInput.prototype.getRangeproofHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getRangeproofHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionInput} returns this
 */
proto.tari.rpc.TransactionInput.prototype.setRangeproofHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.TransactionOutput.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.TransactionOutput.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.TransactionOutput} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.TransactionOutput.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        features: (f = msg.getFeatures()) && proto.tari.rpc.OutputFeatures.toObject(includeInstance, f),
        commitment: msg.getCommitment_asB64(),
        rangeProof: (f = msg.getRangeProof()) && types_pb.RangeProof.toObject(includeInstance, f),
        hash: msg.getHash_asB64(),
        script: msg.getScript_asB64(),
        senderOffsetPublicKey: msg.getSenderOffsetPublicKey_asB64(),
        metadataSignature: (f = msg.getMetadataSignature()) && types_pb.ComAndPubSignature.toObject(includeInstance, f),
        covenant: msg.getCovenant_asB64(),
        version: jspb.Message.getFieldWithDefault(msg, 9, 0),
        encryptedData: msg.getEncryptedData_asB64(),
        minimumValuePromise: jspb.Message.getFieldWithDefault(msg, 11, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.TransactionOutput}
 */
proto.tari.rpc.TransactionOutput.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.TransactionOutput();
  return proto.tari.rpc.TransactionOutput.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.TransactionOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.TransactionOutput}
 */
proto.tari.rpc.TransactionOutput.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.OutputFeatures();
        reader.readMessage(value, proto.tari.rpc.OutputFeatures.deserializeBinaryFromReader);
        msg.setFeatures(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCommitment(value);
        break;
      case 3:
        var value = new types_pb.RangeProof();
        reader.readMessage(value, types_pb.RangeProof.deserializeBinaryFromReader);
        msg.setRangeProof(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setScript(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSenderOffsetPublicKey(value);
        break;
      case 7:
        var value = new types_pb.ComAndPubSignature();
        reader.readMessage(value, types_pb.ComAndPubSignature.deserializeBinaryFromReader);
        msg.setMetadataSignature(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCovenant(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVersion(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEncryptedData(value);
        break;
      case 11:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMinimumValuePromise(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionOutput.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.TransactionOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.TransactionOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.TransactionOutput.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(1, f, proto.tari.rpc.OutputFeatures.serializeBinaryToWriter);
  }
  f = message.getCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getRangeProof();
  if (f != null) {
    writer.writeMessage(3, f, types_pb.RangeProof.serializeBinaryToWriter);
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getSenderOffsetPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getMetadataSignature();
  if (f != null) {
    writer.writeMessage(7, f, types_pb.ComAndPubSignature.serializeBinaryToWriter);
  }
  f = message.getCovenant_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(9, f);
  }
  f = message.getEncryptedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
  f = message.getMinimumValuePromise();
  if (f !== 0) {
    writer.writeUint64(11, f);
  }
};

/**
 * optional OutputFeatures features = 1;
 * @return {?proto.tari.rpc.OutputFeatures}
 */
proto.tari.rpc.TransactionOutput.prototype.getFeatures = function () {
  return /** @type{?proto.tari.rpc.OutputFeatures} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.OutputFeatures, 1)
  );
};

/**
 * @param {?proto.tari.rpc.OutputFeatures|undefined} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setFeatures = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.clearFeatures = function () {
  return this.setFeatures(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TransactionOutput.prototype.hasFeatures = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes commitment = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionOutput.prototype.getCommitment = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes commitment = 2;
 * This is a type-conversion wrapper around `getCommitment()`
 * @return {string}
 */
proto.tari.rpc.TransactionOutput.prototype.getCommitment_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCommitment()));
};

/**
 * optional bytes commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommitment()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionOutput.prototype.getCommitment_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCommitment()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setCommitment = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional RangeProof range_proof = 3;
 * @return {?proto.tari.rpc.RangeProof}
 */
proto.tari.rpc.TransactionOutput.prototype.getRangeProof = function () {
  return /** @type{?proto.tari.rpc.RangeProof} */ (jspb.Message.getWrapperField(this, types_pb.RangeProof, 3));
};

/**
 * @param {?proto.tari.rpc.RangeProof|undefined} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setRangeProof = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.clearRangeProof = function () {
  return this.setRangeProof(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TransactionOutput.prototype.hasRangeProof = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional bytes hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionOutput.prototype.getHash = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes hash = 4;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.tari.rpc.TransactionOutput.prototype.getHash_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionOutput.prototype.getHash_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes script = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionOutput.prototype.getScript = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * optional bytes script = 5;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.tari.rpc.TransactionOutput.prototype.getScript_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getScript()));
};

/**
 * optional bytes script = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionOutput.prototype.getScript_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getScript()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setScript = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional bytes sender_offset_public_key = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionOutput.prototype.getSenderOffsetPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/**
 * optional bytes sender_offset_public_key = 6;
 * This is a type-conversion wrapper around `getSenderOffsetPublicKey()`
 * @return {string}
 */
proto.tari.rpc.TransactionOutput.prototype.getSenderOffsetPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSenderOffsetPublicKey()));
};

/**
 * optional bytes sender_offset_public_key = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderOffsetPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionOutput.prototype.getSenderOffsetPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSenderOffsetPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setSenderOffsetPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * optional ComAndPubSignature metadata_signature = 7;
 * @return {?proto.tari.rpc.ComAndPubSignature}
 */
proto.tari.rpc.TransactionOutput.prototype.getMetadataSignature = function () {
  return /** @type{?proto.tari.rpc.ComAndPubSignature} */ (
    jspb.Message.getWrapperField(this, types_pb.ComAndPubSignature, 7)
  );
};

/**
 * @param {?proto.tari.rpc.ComAndPubSignature|undefined} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setMetadataSignature = function (value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.clearMetadataSignature = function () {
  return this.setMetadataSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.TransactionOutput.prototype.hasMetadataSignature = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional bytes covenant = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionOutput.prototype.getCovenant = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/**
 * optional bytes covenant = 8;
 * This is a type-conversion wrapper around `getCovenant()`
 * @return {string}
 */
proto.tari.rpc.TransactionOutput.prototype.getCovenant_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCovenant()));
};

/**
 * optional bytes covenant = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCovenant()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionOutput.prototype.getCovenant_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCovenant()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setCovenant = function (value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};

/**
 * optional uint32 version = 9;
 * @return {number}
 */
proto.tari.rpc.TransactionOutput.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional bytes encrypted_data = 10;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.TransactionOutput.prototype.getEncryptedData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};

/**
 * optional bytes encrypted_data = 10;
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {string}
 */
proto.tari.rpc.TransactionOutput.prototype.getEncryptedData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEncryptedData()));
};

/**
 * optional bytes encrypted_data = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.TransactionOutput.prototype.getEncryptedData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEncryptedData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setEncryptedData = function (value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};

/**
 * optional uint64 minimum_value_promise = 11;
 * @return {number}
 */
proto.tari.rpc.TransactionOutput.prototype.getMinimumValuePromise = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.TransactionOutput} returns this
 */
proto.tari.rpc.TransactionOutput.prototype.setMinimumValuePromise = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.OutputFeatures.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.OutputFeatures.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.OutputFeatures} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.OutputFeatures.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        version: jspb.Message.getFieldWithDefault(msg, 1, 0),
        outputType: jspb.Message.getFieldWithDefault(msg, 2, 0),
        maturity: jspb.Message.getFieldWithDefault(msg, 3, 0),
        coinbaseExtra: msg.getCoinbaseExtra_asB64(),
        sidechainFeature:
          (f = msg.getSidechainFeature()) && sidechain_types_pb.SideChainFeature.toObject(includeInstance, f),
        rangeProofType: jspb.Message.getFieldWithDefault(msg, 6, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.OutputFeatures}
 */
proto.tari.rpc.OutputFeatures.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.OutputFeatures();
  return proto.tari.rpc.OutputFeatures.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.OutputFeatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.OutputFeatures}
 */
proto.tari.rpc.OutputFeatures.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setOutputType(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaturity(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCoinbaseExtra(value);
        break;
      case 5:
        var value = new sidechain_types_pb.SideChainFeature();
        reader.readMessage(value, sidechain_types_pb.SideChainFeature.deserializeBinaryFromReader);
        msg.setSidechainFeature(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setRangeProofType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.OutputFeatures.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.OutputFeatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.OutputFeatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.OutputFeatures.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getOutputType();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getMaturity();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getCoinbaseExtra_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getSidechainFeature();
  if (f != null) {
    writer.writeMessage(5, f, sidechain_types_pb.SideChainFeature.serializeBinaryToWriter);
  }
  f = message.getRangeProofType();
  if (f !== 0) {
    writer.writeUint32(6, f);
  }
};

/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.tari.rpc.OutputFeatures.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.OutputFeatures} returns this
 */
proto.tari.rpc.OutputFeatures.prototype.setVersion = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 output_type = 2;
 * @return {number}
 */
proto.tari.rpc.OutputFeatures.prototype.getOutputType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.OutputFeatures} returns this
 */
proto.tari.rpc.OutputFeatures.prototype.setOutputType = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 maturity = 3;
 * @return {number}
 */
proto.tari.rpc.OutputFeatures.prototype.getMaturity = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.OutputFeatures} returns this
 */
proto.tari.rpc.OutputFeatures.prototype.setMaturity = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes coinbase_extra = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.OutputFeatures.prototype.getCoinbaseExtra = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes coinbase_extra = 4;
 * This is a type-conversion wrapper around `getCoinbaseExtra()`
 * @return {string}
 */
proto.tari.rpc.OutputFeatures.prototype.getCoinbaseExtra_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCoinbaseExtra()));
};

/**
 * optional bytes coinbase_extra = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCoinbaseExtra()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.OutputFeatures.prototype.getCoinbaseExtra_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCoinbaseExtra()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.OutputFeatures} returns this
 */
proto.tari.rpc.OutputFeatures.prototype.setCoinbaseExtra = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional SideChainFeature sidechain_feature = 5;
 * @return {?proto.tari.rpc.SideChainFeature}
 */
proto.tari.rpc.OutputFeatures.prototype.getSidechainFeature = function () {
  return /** @type{?proto.tari.rpc.SideChainFeature} */ (
    jspb.Message.getWrapperField(this, sidechain_types_pb.SideChainFeature, 5)
  );
};

/**
 * @param {?proto.tari.rpc.SideChainFeature|undefined} value
 * @return {!proto.tari.rpc.OutputFeatures} returns this
 */
proto.tari.rpc.OutputFeatures.prototype.setSidechainFeature = function (value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.OutputFeatures} returns this
 */
proto.tari.rpc.OutputFeatures.prototype.clearSidechainFeature = function () {
  return this.setSidechainFeature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.OutputFeatures.prototype.hasSidechainFeature = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional uint32 range_proof_type = 6;
 * @return {number}
 */
proto.tari.rpc.OutputFeatures.prototype.getRangeProofType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.OutputFeatures} returns this
 */
proto.tari.rpc.OutputFeatures.prototype.setRangeProofType = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tari.rpc.AggregateBody.repeatedFields_ = [1, 2, 3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.AggregateBody.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.AggregateBody.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.AggregateBody} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.AggregateBody.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        inputsList: jspb.Message.toObjectList(
          msg.getInputsList(),
          proto.tari.rpc.TransactionInput.toObject,
          includeInstance,
        ),
        outputsList: jspb.Message.toObjectList(
          msg.getOutputsList(),
          proto.tari.rpc.TransactionOutput.toObject,
          includeInstance,
        ),
        kernelsList: jspb.Message.toObjectList(
          msg.getKernelsList(),
          proto.tari.rpc.TransactionKernel.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.AggregateBody}
 */
proto.tari.rpc.AggregateBody.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.AggregateBody();
  return proto.tari.rpc.AggregateBody.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.AggregateBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.AggregateBody}
 */
proto.tari.rpc.AggregateBody.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.tari.rpc.TransactionInput();
        reader.readMessage(value, proto.tari.rpc.TransactionInput.deserializeBinaryFromReader);
        msg.addInputs(value);
        break;
      case 2:
        var value = new proto.tari.rpc.TransactionOutput();
        reader.readMessage(value, proto.tari.rpc.TransactionOutput.deserializeBinaryFromReader);
        msg.addOutputs(value);
        break;
      case 3:
        var value = new proto.tari.rpc.TransactionKernel();
        reader.readMessage(value, proto.tari.rpc.TransactionKernel.deserializeBinaryFromReader);
        msg.addKernels(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.AggregateBody.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.AggregateBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.AggregateBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.AggregateBody.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.tari.rpc.TransactionInput.serializeBinaryToWriter);
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.tari.rpc.TransactionOutput.serializeBinaryToWriter);
  }
  f = message.getKernelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.tari.rpc.TransactionKernel.serializeBinaryToWriter);
  }
};

/**
 * repeated TransactionInput inputs = 1;
 * @return {!Array<!proto.tari.rpc.TransactionInput>}
 */
proto.tari.rpc.AggregateBody.prototype.getInputsList = function () {
  return /** @type{!Array<!proto.tari.rpc.TransactionInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tari.rpc.TransactionInput, 1)
  );
};

/**
 * @param {!Array<!proto.tari.rpc.TransactionInput>} value
 * @return {!proto.tari.rpc.AggregateBody} returns this
 */
proto.tari.rpc.AggregateBody.prototype.setInputsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.tari.rpc.TransactionInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.TransactionInput}
 */
proto.tari.rpc.AggregateBody.prototype.addInputs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tari.rpc.TransactionInput, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.AggregateBody} returns this
 */
proto.tari.rpc.AggregateBody.prototype.clearInputsList = function () {
  return this.setInputsList([]);
};

/**
 * repeated TransactionOutput outputs = 2;
 * @return {!Array<!proto.tari.rpc.TransactionOutput>}
 */
proto.tari.rpc.AggregateBody.prototype.getOutputsList = function () {
  return /** @type{!Array<!proto.tari.rpc.TransactionOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tari.rpc.TransactionOutput, 2)
  );
};

/**
 * @param {!Array<!proto.tari.rpc.TransactionOutput>} value
 * @return {!proto.tari.rpc.AggregateBody} returns this
 */
proto.tari.rpc.AggregateBody.prototype.setOutputsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.tari.rpc.TransactionOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.TransactionOutput}
 */
proto.tari.rpc.AggregateBody.prototype.addOutputs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tari.rpc.TransactionOutput, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.AggregateBody} returns this
 */
proto.tari.rpc.AggregateBody.prototype.clearOutputsList = function () {
  return this.setOutputsList([]);
};

/**
 * repeated TransactionKernel kernels = 3;
 * @return {!Array<!proto.tari.rpc.TransactionKernel>}
 */
proto.tari.rpc.AggregateBody.prototype.getKernelsList = function () {
  return /** @type{!Array<!proto.tari.rpc.TransactionKernel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tari.rpc.TransactionKernel, 3)
  );
};

/**
 * @param {!Array<!proto.tari.rpc.TransactionKernel>} value
 * @return {!proto.tari.rpc.AggregateBody} returns this
 */
proto.tari.rpc.AggregateBody.prototype.setKernelsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.tari.rpc.TransactionKernel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tari.rpc.TransactionKernel}
 */
proto.tari.rpc.AggregateBody.prototype.addKernels = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tari.rpc.TransactionKernel, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tari.rpc.AggregateBody} returns this
 */
proto.tari.rpc.AggregateBody.prototype.clearKernelsList = function () {
  return this.setKernelsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.Transaction.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.Transaction.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.Transaction.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        offset: msg.getOffset_asB64(),
        body: (f = msg.getBody()) && proto.tari.rpc.AggregateBody.toObject(includeInstance, f),
        scriptOffset: msg.getScriptOffset_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.Transaction}
 */
proto.tari.rpc.Transaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.Transaction();
  return proto.tari.rpc.Transaction.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.Transaction}
 */
proto.tari.rpc.Transaction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setOffset(value);
        break;
      case 2:
        var value = new proto.tari.rpc.AggregateBody();
        reader.readMessage(value, proto.tari.rpc.AggregateBody.deserializeBinaryFromReader);
        msg.setBody(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setScriptOffset(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.Transaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.Transaction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(2, f, proto.tari.rpc.AggregateBody.serializeBinaryToWriter);
  }
  f = message.getScriptOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * optional bytes offset = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Transaction.prototype.getOffset = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes offset = 1;
 * This is a type-conversion wrapper around `getOffset()`
 * @return {string}
 */
proto.tari.rpc.Transaction.prototype.getOffset_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOffset()));
};

/**
 * optional bytes offset = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffset()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Transaction.prototype.getOffset_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOffset()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Transaction} returns this
 */
proto.tari.rpc.Transaction.prototype.setOffset = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional AggregateBody body = 2;
 * @return {?proto.tari.rpc.AggregateBody}
 */
proto.tari.rpc.Transaction.prototype.getBody = function () {
  return /** @type{?proto.tari.rpc.AggregateBody} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.AggregateBody, 2)
  );
};

/**
 * @param {?proto.tari.rpc.AggregateBody|undefined} value
 * @return {!proto.tari.rpc.Transaction} returns this
 */
proto.tari.rpc.Transaction.prototype.setBody = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.Transaction} returns this
 */
proto.tari.rpc.Transaction.prototype.clearBody = function () {
  return this.setBody(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.Transaction.prototype.hasBody = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional bytes script_offset = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.Transaction.prototype.getScriptOffset = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * optional bytes script_offset = 3;
 * This is a type-conversion wrapper around `getScriptOffset()`
 * @return {string}
 */
proto.tari.rpc.Transaction.prototype.getScriptOffset_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getScriptOffset()));
};

/**
 * optional bytes script_offset = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptOffset()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.Transaction.prototype.getScriptOffset_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getScriptOffset()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.Transaction} returns this
 */
proto.tari.rpc.Transaction.prototype.setScriptOffset = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.tari.rpc.UnblindedOutput.prototype.toObject = function (opt_includeInstance) {
    return proto.tari.rpc.UnblindedOutput.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.tari.rpc.UnblindedOutput} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.tari.rpc.UnblindedOutput.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        value: jspb.Message.getFieldWithDefault(msg, 1, 0),
        spendingKey: msg.getSpendingKey_asB64(),
        features: (f = msg.getFeatures()) && proto.tari.rpc.OutputFeatures.toObject(includeInstance, f),
        script: msg.getScript_asB64(),
        inputData: msg.getInputData_asB64(),
        scriptPrivateKey: msg.getScriptPrivateKey_asB64(),
        senderOffsetPublicKey: msg.getSenderOffsetPublicKey_asB64(),
        metadataSignature: (f = msg.getMetadataSignature()) && types_pb.ComAndPubSignature.toObject(includeInstance, f),
        scriptLockHeight: jspb.Message.getFieldWithDefault(msg, 10, 0),
        covenant: msg.getCovenant_asB64(),
        encryptedData: msg.getEncryptedData_asB64(),
        minimumValuePromise: jspb.Message.getFieldWithDefault(msg, 13, 0),
        rangeProof: (f = msg.getRangeProof()) && types_pb.RangeProof.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tari.rpc.UnblindedOutput}
 */
proto.tari.rpc.UnblindedOutput.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tari.rpc.UnblindedOutput();
  return proto.tari.rpc.UnblindedOutput.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tari.rpc.UnblindedOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tari.rpc.UnblindedOutput}
 */
proto.tari.rpc.UnblindedOutput.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setValue(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSpendingKey(value);
        break;
      case 3:
        var value = new proto.tari.rpc.OutputFeatures();
        reader.readMessage(value, proto.tari.rpc.OutputFeatures.deserializeBinaryFromReader);
        msg.setFeatures(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setScript(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setInputData(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setScriptPrivateKey(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSenderOffsetPublicKey(value);
        break;
      case 9:
        var value = new types_pb.ComAndPubSignature();
        reader.readMessage(value, types_pb.ComAndPubSignature.deserializeBinaryFromReader);
        msg.setMetadataSignature(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setScriptLockHeight(value);
        break;
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCovenant(value);
        break;
      case 12:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEncryptedData(value);
        break;
      case 13:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMinimumValuePromise(value);
        break;
      case 14:
        var value = new types_pb.RangeProof();
        reader.readMessage(value, types_pb.RangeProof.deserializeBinaryFromReader);
        msg.setRangeProof(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tari.rpc.UnblindedOutput.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.tari.rpc.UnblindedOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tari.rpc.UnblindedOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tari.rpc.UnblindedOutput.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getSpendingKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(3, f, proto.tari.rpc.OutputFeatures.serializeBinaryToWriter);
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getInputData_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getScriptPrivateKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
  f = message.getSenderOffsetPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = message.getMetadataSignature();
  if (f != null) {
    writer.writeMessage(9, f, types_pb.ComAndPubSignature.serializeBinaryToWriter);
  }
  f = message.getScriptLockHeight();
  if (f !== 0) {
    writer.writeUint64(10, f);
  }
  f = message.getCovenant_asU8();
  if (f.length > 0) {
    writer.writeBytes(11, f);
  }
  f = message.getEncryptedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(12, f);
  }
  f = message.getMinimumValuePromise();
  if (f !== 0) {
    writer.writeUint64(13, f);
  }
  f = message.getRangeProof();
  if (f != null) {
    writer.writeMessage(14, f, types_pb.RangeProof.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.tari.rpc.UnblindedOutput.prototype.getValue = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setValue = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes spending_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.UnblindedOutput.prototype.getSpendingKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * optional bytes spending_key = 2;
 * This is a type-conversion wrapper around `getSpendingKey()`
 * @return {string}
 */
proto.tari.rpc.UnblindedOutput.prototype.getSpendingKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSpendingKey()));
};

/**
 * optional bytes spending_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpendingKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.UnblindedOutput.prototype.getSpendingKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSpendingKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setSpendingKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional OutputFeatures features = 3;
 * @return {?proto.tari.rpc.OutputFeatures}
 */
proto.tari.rpc.UnblindedOutput.prototype.getFeatures = function () {
  return /** @type{?proto.tari.rpc.OutputFeatures} */ (
    jspb.Message.getWrapperField(this, proto.tari.rpc.OutputFeatures, 3)
  );
};

/**
 * @param {?proto.tari.rpc.OutputFeatures|undefined} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setFeatures = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.clearFeatures = function () {
  return this.setFeatures(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.UnblindedOutput.prototype.hasFeatures = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional bytes script = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.UnblindedOutput.prototype.getScript = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes script = 4;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.tari.rpc.UnblindedOutput.prototype.getScript_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getScript()));
};

/**
 * optional bytes script = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.UnblindedOutput.prototype.getScript_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getScript()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setScript = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes input_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.UnblindedOutput.prototype.getInputData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * optional bytes input_data = 5;
 * This is a type-conversion wrapper around `getInputData()`
 * @return {string}
 */
proto.tari.rpc.UnblindedOutput.prototype.getInputData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getInputData()));
};

/**
 * optional bytes input_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputData()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.UnblindedOutput.prototype.getInputData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getInputData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setInputData = function (value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional bytes script_private_key = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.UnblindedOutput.prototype.getScriptPrivateKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * optional bytes script_private_key = 7;
 * This is a type-conversion wrapper around `getScriptPrivateKey()`
 * @return {string}
 */
proto.tari.rpc.UnblindedOutput.prototype.getScriptPrivateKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getScriptPrivateKey()));
};

/**
 * optional bytes script_private_key = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptPrivateKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.UnblindedOutput.prototype.getScriptPrivateKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getScriptPrivateKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setScriptPrivateKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};

/**
 * optional bytes sender_offset_public_key = 8;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.UnblindedOutput.prototype.getSenderOffsetPublicKey = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/**
 * optional bytes sender_offset_public_key = 8;
 * This is a type-conversion wrapper around `getSenderOffsetPublicKey()`
 * @return {string}
 */
proto.tari.rpc.UnblindedOutput.prototype.getSenderOffsetPublicKey_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSenderOffsetPublicKey()));
};

/**
 * optional bytes sender_offset_public_key = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderOffsetPublicKey()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.UnblindedOutput.prototype.getSenderOffsetPublicKey_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSenderOffsetPublicKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setSenderOffsetPublicKey = function (value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};

/**
 * optional ComAndPubSignature metadata_signature = 9;
 * @return {?proto.tari.rpc.ComAndPubSignature}
 */
proto.tari.rpc.UnblindedOutput.prototype.getMetadataSignature = function () {
  return /** @type{?proto.tari.rpc.ComAndPubSignature} */ (
    jspb.Message.getWrapperField(this, types_pb.ComAndPubSignature, 9)
  );
};

/**
 * @param {?proto.tari.rpc.ComAndPubSignature|undefined} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setMetadataSignature = function (value) {
  return jspb.Message.setWrapperField(this, 9, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.clearMetadataSignature = function () {
  return this.setMetadataSignature(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.UnblindedOutput.prototype.hasMetadataSignature = function () {
  return jspb.Message.getField(this, 9) != null;
};

/**
 * optional uint64 script_lock_height = 10;
 * @return {number}
 */
proto.tari.rpc.UnblindedOutput.prototype.getScriptLockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setScriptLockHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional bytes covenant = 11;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.UnblindedOutput.prototype.getCovenant = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};

/**
 * optional bytes covenant = 11;
 * This is a type-conversion wrapper around `getCovenant()`
 * @return {string}
 */
proto.tari.rpc.UnblindedOutput.prototype.getCovenant_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getCovenant()));
};

/**
 * optional bytes covenant = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCovenant()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.UnblindedOutput.prototype.getCovenant_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getCovenant()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setCovenant = function (value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};

/**
 * optional bytes encrypted_data = 12;
 * @return {!(string|Uint8Array)}
 */
proto.tari.rpc.UnblindedOutput.prototype.getEncryptedData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};

/**
 * optional bytes encrypted_data = 12;
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {string}
 */
proto.tari.rpc.UnblindedOutput.prototype.getEncryptedData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEncryptedData()));
};

/**
 * optional bytes encrypted_data = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {!Uint8Array}
 */
proto.tari.rpc.UnblindedOutput.prototype.getEncryptedData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEncryptedData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setEncryptedData = function (value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};

/**
 * optional uint64 minimum_value_promise = 13;
 * @return {number}
 */
proto.tari.rpc.UnblindedOutput.prototype.getMinimumValuePromise = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};

/**
 * @param {number} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setMinimumValuePromise = function (value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};

/**
 * optional RangeProof range_proof = 14;
 * @return {?proto.tari.rpc.RangeProof}
 */
proto.tari.rpc.UnblindedOutput.prototype.getRangeProof = function () {
  return /** @type{?proto.tari.rpc.RangeProof} */ (jspb.Message.getWrapperField(this, types_pb.RangeProof, 14));
};

/**
 * @param {?proto.tari.rpc.RangeProof|undefined} value
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.setRangeProof = function (value) {
  return jspb.Message.setWrapperField(this, 14, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.tari.rpc.UnblindedOutput} returns this
 */
proto.tari.rpc.UnblindedOutput.prototype.clearRangeProof = function () {
  return this.setRangeProof(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tari.rpc.UnblindedOutput.prototype.hasRangeProof = function () {
  return jspb.Message.getField(this, 14) != null;
};

goog.object.extend(exports, proto.tari.rpc);
